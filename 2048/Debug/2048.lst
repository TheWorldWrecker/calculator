SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Users\hojoo\OneDrive\¹®¼­\CASIO\fx-9860G SDK\2048\2048.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          2048.c     1    /*****************************************************************/
          2048.c     2    /*                                                               */
          2048.c     3    /*   CASIO fx-9860G SDK Library                                  */
          2048.c     4    /*                                                               */
          2048.c     5    /*   File name : [ProjectName].c                                 */
          2048.c     6    /*                                                               */
          2048.c     7    /*   Copyright (c) 2006 CASIO COMPUTER CO., LTD.                 */
          2048.c     8    /*                                                               */
          2048.c     9    /*****************************************************************/
          2048.c    10    #include "fxlib.h"
          2048.c    11    #include "timer.h"
          2048.c    12    
          2048.c    13    
          2048.c    14    GRAPHDATA graphs[19] = {
          2048.c    15        {16, 16, (unsigned char*)  // Empty [0]
          2048.c    16        "\xFF\xFF\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01"
          2048.c    17        "\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\x80\x01\xFF\xFF"},
          2048.c    18        {16, 16, (unsigned char*)  // 2 [1]
          2048.c    19        "\xFF\xFF\x80\x01\x80\x01\x80\x01\x81\x81\x82\x41\x80\x41\x80\x81"
          2048.c    20        "\x81\x01\x82\x01\x83\xC1\x80\x01\x80\x01\x80\x01\x80\x01\xFF\xFF"},
          2048.c    21        {16, 16, (unsigned char*)  // 4 [2]
          2048.c    22        "\xFF\xFF\x80\x01\x80\x01\x80\x01\x82\x01\x82\x41\x82\x41\x83\xC1"
          2048.c    23        "\x80\x41\x80\x41\x80\x41\x80\x01\x80\x01\x80\x01\x80\x01\xFF\xFF"},
          2048.c    24        {16, 16, (unsigned char*)  // 8 [3]
          2048.c    25        "\xFF\xFF\x80\x01\x80\x01\x80\x01\x81\x81\x82\x41\x82\x41\x81\x81"
          2048.c    26        "\x82\x41\x82\x41\x81\x81\x80\x01\x80\x01\x80\x01\x80\x01\xFF\xFF"},
          2048.c    27        {16, 16, (unsigned char*)  // 16 [4]
          2048.c    28        "\xFF\xFF\x80\x01\x80\x01\x80\x01\x84\x61\x8C\x91\x84\x81\x84\xE1"
          2048.c    29        "\x84\x91\x84\x91\x8E\x61\x80\x01\x80\x01\x80\x01\x80\x01\xFF\xFF"},
          2048.c    30        {16, 16, (unsigned char*)  // 32 [5]
          2048.c    31        "\xFF\xFF\x80\x01\x80\x01\x80\x01\x8C\x61\x92\x91\x82\x11\x8C\x21"
          2048.c    32        "\x82\x41\x92\x81\x8C\xF1\x80\x01\x80\x01\x80\x01\x80\x01\xFF\xFF"},
          2048.c    33        {16, 16, (unsigned char*)  // 64 [6]
          2048.c    34        "\xFF\xFF\x80\x01\x80\x03\x80\x01\x8C\x81\x92\x93\x90\x91\x9C\xF1"
          2048.c    35        "\x92\x13\x92\x11\x8C\x11\x80\x03\x80\x01\x80\x01\xA4\x89\xFF\xFF"},
          2048.c    36        {16, 16, (unsigned char*)  // 128 [7]
          2048.c    37        "\xFF\xFF\x80\x01\x80\x03\x80\x01\x80\x01\x97\x73\xB1\x51\x97\x71"
          2048.c    38        "\x94\x53\x97\x71\x80\x01\x80\x03\x80\x01\x80\x01\xA4\x93\xFF\xFF"},
          2048.c    39        {16, 16, (unsigned char*)  // 256 [8]
          2048.c    40        "\xFF\xFF\x80\x01\x80\x03\x80\x01\x80\x01\xBB\xBB\x8A\x21\xBB\xB9"
          2048.c    41        "\xA0\xAB\xBB\xB9\x80\x01\x80\x03\x80\x01\x80\x01\xA4\x93\xFF\xFF"},
          2048.c    42        {16, 16, (unsigned char*)  // 512 [9]
          2048.c    43        "\xFF\xFF\x80\x01\x80\x03\x80\x01\x80\x01\xB9\x73\xA3\x11\xB9\x71"
          2048.c    44        "\x89\x43\xB9\x71\x80\x01\x80\x03\x80\x01\x80\x01\xA4\x93\xFF\xFF"},
          2048.c    45        {16, 16, (unsigned char*)  // 1024 [10]
          2048.c    46        "\xFF\xFF\x80\x01\x84\xE3\x8C\xA3\x84\xA3\x84\xA3\x84\xE3\x80\x03"
          2048.c    47        "\x8E\xA3\x82\xA3\x8E\xE3\x88\x23\x8E\x23\x80\x03\xBF\xFF\xFF\xFF"},
          2048.c    48        {16, 16, (unsigned char*)  // 2048 [11]
          2048.c    49        "\xFF\xFF\x80\x01\x8E\xE3\x82\xA3\x8E\xA3\x88\xA3\x8E\xE3\x80\x03"
          2048.c    50        "\x8A\xE3\x8A\xA3\x8E\xE3\x82\xA3\x82\xE3\x80\x03\xBF\xFF\xFF\xFF"},
          2048.c    51        {16, 16, (unsigned char*)  // 4096 [12]
          2048.c    52        "\xFF\xFF\x80\x01\x8A\xE3\x8A\xA3\x8E\xA3\x82\xA3\x82\xE3\x80\x03"
          2048.c    53        "\x8E\xE3\x8A\x83\x8E\xE3\x82\xA3\x8E\xE3\x80\x03\xBF\xFF\xFF\xFF"},
          2048.c    54        {16, 16, (unsigned char*)  // 8192 [13]




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          2048.c    55        "\xFF\xFF\x80\x01\x8E\x43\x8A\xC3\x8E\x43\x8A\x43\x8E\x43\x80\x03"
          2048.c    56        "\x8E\xE3\x8A\x23\x8E\xE3\x82\x83\x8E\xE3\x80\x03\xBF\xFF\xFF\xFF"},
          2048.c    57        {16, 16, (unsigned char*)  // 16384 [14]
          2048.c    58        "\xFF\xFF\xFF\xFD\xFB\x1D\xF3\x7D\xFB\x1D\xFB\x5D\xFB\x1D\xFF\xFD"
          2048.c    59        "\xC4\x55\xF5\x55\xC4\x45\xF5\x75\xC4\x75\xFF\xFD\x80\x01\xFF\xFF"},
          2048.c    60        {16, 16, (unsigned char*)  // 32768 [15]
          2048.c    61        "\xFF\xFF\xFF\xFD\xF1\x1D\xFD\xDD\xF1\x1D\xFD\x7D\xF1\x1D\xFF\xFD"
          2048.c    62        "\xC4\x45\xD5\xD5\xF4\x45\xF5\x55\xF4\x45\xFF\xFD\x80\x01\xFF\xFF"},
          2048.c    63        {16, 16, (unsigned char*)  // 65536 [16]
          2048.c    64        "\xFF\xFF\xFF\xFD\xF1\x1D\xF7\x7D\xF1\x1D\xF5\xDD\xF1\x1D\xFF\xFD"
          2048.c    65        "\xC4\x45\xDF\x5D\xC4\x45\xF7\x55\xC4\x45\xFF\xFD\x80\x01\xFF\xFF"},
          2048.c    66        {16, 16, (unsigned char*)  // 130172 [17]
          2048.c    67        "\xFF\xFF\xFF\xFD\xE8\x8D\xCE\xAD\xE8\xAD\xEE\xAD\xE8\x8D\xFF\xFD"
          2048.c    68        "\xE8\x8D\xCA\xED\xEA\x8D\xEE\xBD\xEE\x8D\xFF\xFD\x80\x01\xFF\xFF"},
          2048.c    69        {24, 24, (unsigned char*)  // Can move UI [18]
          2048.c    70        "\x00\x7E\x00\x03\x81\xC0\x04\x18\x20\x08\x3C\x10\x10\x7E\x08\x20"
          2048.c    71        "\x18\x04\x40\x18\x02\x40\x18\x02\x40\x18\x02\x88\x18\x11\x98\x00"
          2048.c    72        "\x19\xBF\xDB\xFD\xBF\xDB\xFD\x98\x00\x19\x88\x18\x11\x40\x18\x02"
          2048.c    73        "\x40\x18\x02\x40\x18\x02\x20\x18\x04\x10\x7E\x08\x08\x3C\x10\x04"
          2048.c    74        "\x18\x20\x03\x81\xC0\x00\x7E\x00"}
          2048.c    75    };
          2048.c    76    
          2048.c    77    int board[4][4] = {0};
          2048.c    78    int score = 0;
          2048.c    79    int moves = 0;
          2048.c    80    
          2048.c    81    void initBoard() {
P   00000000              _initBoard:                      ; function: initBoard
                                                           ; frame size=0
          2048.c    82        int i; int j;
          2048.c    83        score = 0;
    00000000 D380                   MOV.L       L721+2,R3  ; _score
    00000002 E004                   MOV         #4,R0
          2048.c    84        moves = 0;
    00000004 D280                   MOV.L       L721+6,R2  ; _moves
    00000006 E400                   MOV         #0,R4
    00000008 D580                   MOV.L       L721+10,R5 ; _board
    0000000A 2342                   MOV.L       R4,@R3
    0000000C 2242                   MOV.L       R4,@R2
    0000000E 6653                   MOV         R5,R6
    00000010 6153                   MOV         R5,R1
    00000012 7140                   ADD         #64,R1
          2048.c    85        for(i = 0; i<4; ++i) {
    00000014              L595:                             
          2048.c    86            for(j = 0; j<4; ++j) {
    00000014 6743                   MOV         R4,R7
    00000016 6563                   MOV         R6,R5
    00000018              L596:                             
          2048.c    87                board[i][j] = 0;
    00000018 2542                   MOV.L       R4,@R5
    0000001A 7701                   ADD         #1,R7
    0000001C 3703                   CMP/GE      R0,R7
    0000001E 8FFB                   BF/S        L596
    00000020 7504                   ADD         #4,R5
    00000022 7610                   ADD         #16,R6
    00000024 3612                   CMP/HS      R1,R6
    00000026 8BF5                   BF          L595




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          2048.c    88            }
          2048.c    89        }
          2048.c    90    }
    00000028 000B                   RTS
    0000002A 0009                   NOP
          2048.c    91    
          2048.c    92    void placeRandom() {
    0000002C              _placeRandom:                    ; function: placeRandom
                                                           ; frame size=32
                                                           ; used runtime library name:
                                                           ; __modls
    0000002C 2FE6                   MOV.L       R14,@-R15
    0000002E 2FD6                   MOV.L       R13,@-R15
    00000030 2FC6                   MOV.L       R12,@-R15
          2048.c    93        int empty = 0;
    00000032 ED00                   MOV         #0,R13
    00000034 2FB6                   MOV.L       R11,@-R15
    00000036 2FA6                   MOV.L       R10,@-R15
    00000038 2F96                   MOV.L       R9,@-R15
    0000003A 2F86                   MOV.L       R8,@-R15
    0000003C 4F22                   STS.L       PR,@-R15
          2048.c    94        int i; int j;
          2048.c    95        int pos;
          2048.c    96        if(isDead()) {
    0000003E B146                   BSR         _isDead
    00000040 6ED3                   MOV         R13,R14
    00000042 2008                   TST         R0,R0
    00000044 8B64                   BF          L598
    00000046 EC04                   MOV         #4,R12
    00000048 D470                   MOV.L       L721+10,R4 ; _board
    0000004A 6543                   MOV         R4,R5
    0000004C 6743                   MOV         R4,R7
    0000004E 7740                   ADD         #64,R7
          2048.c    97            return;
          2048.c    98        }
          2048.c    99        for (i = 0; i < 4; i++) {
    00000050              L599:                             
          2048.c   100            for (j = 0; j < 4; j++) {
    00000050 66D3                   MOV         R13,R6
    00000052 6453                   MOV         R5,R4
    00000054              L600:                             
          2048.c   101                empty += board[i][j] == 0;
    00000054 6046                   MOV.L       @R4+,R0
    00000056 7601                   ADD         #1,R6
    00000058 2008                   TST         R0,R0
    0000005A 0029                   MOVT        R0
    0000005C 36C3                   CMP/GE      R12,R6
    0000005E 8FF9                   BF/S        L600
    00000060 3E0C                   ADD         R0,R14
    00000062 7510                   ADD         #16,R5
    00000064 3572                   CMP/HS      R7,R5
    00000066 8BF3                   BF          L599
          2048.c   102            }
          2048.c   103        }
          2048.c   104        if (empty == 0) {
    00000068 2EE8                   TST         R14,R14
    0000006A 8951                   BT          L598




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          2048.c   105            return;
          2048.c   106        }
          2048.c   107        pos = rand() % empty;
    0000006C D268                   MOV.L       L721+14,R2 ; _rand
    0000006E 420B                   JSR         @R2
    00000070 0009                   NOP
    00000072 6103                   MOV         R0,R1
    00000074 D367                   MOV.L       L721+18,R3 ; __modls
    00000076 430B                   JSR         @R3
    00000078 60E3                   MOV         R14,R0
    0000007A 6703                   MOV         R0,R7
          2048.c   108        for (i = 0; i < 4; i++) {
    0000007C DE66                   MOV.L       L721+22,R14; _Bdisp_DrawLineVRAM
    0000007E E80A                   MOV         #10,R8
    00000080 A044                   BRA         L603
    00000082 65D3                   MOV         R13,R5
    00000084              L604:                             
    00000084 D361                   MOV.L       L721+10,R3 ; _board
    00000086 6953                   MOV         R5,R9
          2048.c   109            for (j = 0; j < 4; j++) {
    00000088 66D3                   MOV         R13,R6
    0000008A 6BD3                   MOV         R13,R11
    0000008C 6453                   MOV         R5,R4
    0000008E 4408                   SHLL2       R4
    00000090 4408                   SHLL2       R4
    00000092 343C                   ADD         R3,R4
    00000094 6A43                   MOV         R4,R10
    00000096 6253                   MOV         R5,R2
    00000098 4908                   SHLL2       R9
    0000009A 4908                   SHLL2       R9
    0000009C 3928                   SUB         R2,R9
    0000009E              L606:                             
          2048.c   110                if (board[i][j] == 0) {
    0000009E 6342                   MOV.L       @R4,R3
    000000A0 2338                   TST         R3,R3
    000000A2 8B2C                   BF          L607
          2048.c   111                    if (pos == 0) {
    000000A4 2778                   TST         R7,R7
    000000A6 8B29                   BF          L608
          2048.c   112                        board[i][j] = 1 + (rand()%10==0);
    000000A8 D159                   MOV.L       L721+14,R1 ; _rand
    000000AA 410B                   JSR         @R1
    000000AC 0009                   NOP
    000000AE 6103                   MOV         R0,R1
    000000B0 D358                   MOV.L       L721+18,R3 ; __modls
    000000B2 430B                   JSR         @R3
    000000B4 6083                   MOV         R8,R0
    000000B6 2008                   TST         R0,R0
    000000B8 0029                   MOVT        R0
    000000BA 7001                   ADD         #1,R0
          2048.c   113                        drawBoard();
    000000BC B34C                   BSR         _drawBoard
    000000BE 2A02                   MOV.L       R0,@R10
          2048.c   114                        //Bdisp_AreaReverseVRAM(53+15*j, 2+15*i, 68+15*j, 17+15*i);
          2048.c   115                        Bdisp_DrawLineVRAM(55+15*j, 4+15*i, 66+15*j, 4+15*i);
    000000C0 6A93                   MOV         R9,R10
    000000C2 7A04                   ADD         #4,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000C4 67A3                   MOV         R10,R7
    000000C6 6CB3                   MOV         R11,R12
    000000C8 7C42                   ADD         #66,R12
    000000CA 66C3                   MOV         R12,R6
    000000CC 65A3                   MOV         R10,R5
    000000CE 6DB3                   MOV         R11,R13
    000000D0 7D37                   ADD         #55,R13
    000000D2 4E0B                   JSR         @R14
    000000D4 64D3                   MOV         R13,R4
          2048.c   116                        Bdisp_DrawLineVRAM(55+15*j, 4+15*i, 55+15*j, 15+15*i);
    000000D6 6B93                   MOV         R9,R11
    000000D8 7B0F                   ADD         #15,R11
    000000DA 67B3                   MOV         R11,R7
    000000DC 66D3                   MOV         R13,R6
    000000DE 65A3                   MOV         R10,R5
    000000E0 4E0B                   JSR         @R14
    000000E2 64D3                   MOV         R13,R4
          2048.c   117                        Bdisp_DrawLineVRAM(55+15*j, 15+15*i, 66+15*j, 15+15*i);
    000000E4 67B3                   MOV         R11,R7
    000000E6 66C3                   MOV         R12,R6
    000000E8 65B3                   MOV         R11,R5
    000000EA 4E0B                   JSR         @R14
    000000EC 64D3                   MOV         R13,R4
          2048.c   118                        Bdisp_DrawLineVRAM(66+15*j, 4+15*i, 66+15*j, 15+15*i);
    000000EE 67B3                   MOV         R11,R7
    000000F0 66C3                   MOV         R12,R6
    000000F2 65A3                   MOV         R10,R5
    000000F4 4E0B                   JSR         @R14
    000000F6 64C3                   MOV         R12,R4
          2048.c   119                        return;
    000000F8 A00A                   BRA         L598
    000000FA 0009                   NOP
    000000FC              L608:                             
          2048.c   120                    }
          2048.c   121                    pos--;
    000000FC 77FF                   ADD         #-1,R7
    000000FE              L607:                             
    000000FE 7601                   ADD         #1,R6
    00000100 7B0F                   ADD         #15,R11
    00000102 7A04                   ADD         #4,R10
    00000104 36C3                   CMP/GE      R12,R6
    00000106 8FCA                   BF/S        L606
    00000108 7404                   ADD         #4,R4
    0000010A 7501                   ADD         #1,R5
    0000010C              L603:                             
    0000010C 35C3                   CMP/GE      R12,R5
    0000010E 8BB9                   BF          L604
    00000110              L598:                             
          2048.c   122                }
          2048.c   123            }
          2048.c   124        }
          2048.c   125        return;
          2048.c   126    }
    00000110 4F26                   LDS.L       @R15+,PR
    00000112 68F6                   MOV.L       @R15+,R8
    00000114 69F6                   MOV.L       @R15+,R9
    00000116 6AF6                   MOV.L       @R15+,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000118 6BF6                   MOV.L       @R15+,R11
    0000011A 6CF6                   MOV.L       @R15+,R12
    0000011C 6DF6                   MOV.L       @R15+,R13
    0000011E 000B                   RTS
    00000120 6EF6                   MOV.L       @R15+,R14
          2048.c   127    
          2048.c   128    // Returns false when moving would not change the board
          2048.c   129    // True is either there is a merge or an empty space 
          2048.c   130    // OR there is an empty space in front of a non-empty space
          2048.c   131    // empty spaces BEHIND do not count
          2048.c   132    int canMove(int dir) {
    00000122              _canMove:                        ; function: canMove
                                                           ; frame size=24
    00000122 E701                   MOV         #1,R7
    00000124 2FE6                   MOV.L       R14,@-R15
    00000126 E604                   MOV         #4,R6
    00000128 2FD6                   MOV.L       R13,@-R15
    0000012A 6043                   MOV         R4,R0
    0000012C DE37                   MOV.L       L721+10,R14; _board
    0000012E ED03                   MOV         #3,R13
    00000130 2FC6                   MOV.L       R12,@-R15
    00000132 8800                   CMP/EQ      #0,R0
    00000134 2FB6                   MOV.L       R11,@-R15
    00000136 2FA6                   MOV.L       R10,@-R15
    00000138 2F96                   MOV.L       R9,@-R15
    0000013A 8D0A                   BT/S        L530
    0000013C E500                   MOV         #0,R5
    0000013E 8801                   CMP/EQ      #1,R0
    00000140 8931                   BT          L531
    00000142 8802                   CMP/EQ      #2,R0
    00000144 895B                   BT          L532
    00000146 8803                   CMP/EQ      #3,R0
    00000148 8B01                   BF          L722
    0000014A A08D                   BRA         L533
    0000014C 0009                   NOP
    0000014E              L722:                             
    0000014E A0B6                   BRA         L610
    00000150 0009                   NOP
    00000152              L530:                            ; case label 
          2048.c   133        int i; int j;
          2048.c   134        int isFirstZero = 1;
          2048.c   135        switch (dir)
          2048.c   136        {
          2048.c   137            case 0:
          2048.c   138                for(i = 0; i<4; ++i) {
    00000152 A024                   BRA         L611
    00000154 6A53                   MOV         R5,R10
    00000156              L612:                             
          2048.c   139                    isFirstZero = 1;
    00000156 6B73                   MOV         R7,R11
          2048.c   140                    for(j = 3; j>=0; --j) {
    00000158 64D3                   MOV         R13,R4
    0000015A 6CA3                   MOV         R10,R12
    0000015C 4C08                   SHLL2       R12
    0000015E 4C08                   SHLL2       R12
    00000160 A01A                   BRA         L613
    00000162 3CEC                   ADD         R14,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000164              L614:                             
          2048.c   141                        if(board[i][j] == 0) {
    00000164 6043                   MOV         R4,R0
    00000166 4008                   SHLL2       R0
    00000168 03CE                   MOV.L       @(R0,R12),R3
    0000016A 2338                   TST         R3,R3
    0000016C 8B03                   BF          L615
          2048.c   142                            if(isFirstZero) {
    0000016E 2BB8                   TST         R11,R11
    00000170 8B11                   BF          L617
    00000172 A09C                   BRA         L493
    00000174 0009                   NOP
    00000176              L615:                             
          2048.c   143                                continue;
          2048.c   144                            }
          2048.c   145                            return 1;
          2048.c   146                        }
          2048.c   147                        if(isFirstZero) {
    00000176 2BB8                   TST         R11,R11
    00000178 8900                   BT          L619
          2048.c   148                            isFirstZero = 0;
    0000017A 6B53                   MOV         R5,R11
    0000017C              L619:                             
          2048.c   149                        }
          2048.c   150                        if(j>=1 && board[i][j] == board[i][j-1]) {
    0000017C 3473                   CMP/GE      R7,R4
    0000017E 8B0A                   BF          L617
    00000180 6043                   MOV         R4,R0
    00000182 4008                   SHLL2       R0
    00000184 03CE                   MOV.L       @(R0,R12),R3
    00000186 6043                   MOV         R4,R0
    00000188 70FF                   ADD         #-1,R0
    0000018A 4008                   SHLL2       R0
    0000018C 02CE                   MOV.L       @(R0,R12),R2
    0000018E 3320                   CMP/EQ      R2,R3
    00000190 8B01                   BF          L723
    00000192 A08C                   BRA         L493
    00000194 0009                   NOP
    00000196              L723:                             
    00000196              L617:                             
    00000196 74FF                   ADD         #-1,R4
    00000198              L613:                             
    00000198 4411                   CMP/PZ      R4
    0000019A 89E3                   BT          L614
    0000019C 7A01                   ADD         #1,R10
    0000019E              L611:                             
    0000019E 3A63                   CMP/GE      R6,R10
    000001A0 8BD9                   BF          L612
          2048.c   151                            return 1;
          2048.c   152                        }
          2048.c   153                    }
          2048.c   154                }
          2048.c   155                break;
    000001A2 A08C                   BRA         L610
    000001A4 0009                   NOP
    000001A6              L531:                            ; case label 
          2048.c   156            case 1:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          2048.c   157                for(j = 0; j<4; ++j) {
    000001A6 A026                   BRA         L621
    000001A8 6A53                   MOV         R5,R10
    000001AA              L622:                             
          2048.c   158                    isFirstZero = 1;
    000001AA 6B73                   MOV         R7,R11
          2048.c   159                    for(i = 0; i<4; ++i) {
    000001AC 6453                   MOV         R5,R4
    000001AE 6CA3                   MOV         R10,R12
    000001B0 A01E                   BRA         L623
    000001B2 4C08                   SHLL2       R12
    000001B4              L624:                             
          2048.c   160                        if(board[i][j] == 0) {
    000001B4 6043                   MOV         R4,R0
    000001B6 4008                   SHLL2       R0
    000001B8 4008                   SHLL2       R0
    000001BA 30EC                   ADD         R14,R0
    000001BC 03CE                   MOV.L       @(R0,R12),R3
    000001BE 2338                   TST         R3,R3
    000001C0 8B03                   BF          L625
          2048.c   161                            if(isFirstZero) {
    000001C2 2BB8                   TST         R11,R11
    000001C4 8B13                   BF          L627
    000001C6 A072                   BRA         L493
    000001C8 0009                   NOP
    000001CA              L625:                             
          2048.c   162                                continue;
          2048.c   163                            }
          2048.c   164                            return 1;
          2048.c   165                        }
          2048.c   166                        if(isFirstZero) {
    000001CA 2BB8                   TST         R11,R11
    000001CC 8900                   BT          L628
          2048.c   167                            isFirstZero = 0;
    000001CE 6B53                   MOV         R5,R11
    000001D0              L628:                             
          2048.c   168                        }
          2048.c   169                        if(i<3 && board[i][j] == board[i+1][j]) {
    000001D0 34D3                   CMP/GE      R13,R4
    000001D2 890C                   BT          L627
    000001D4 6043                   MOV         R4,R0
    000001D6 4008                   SHLL2       R0
    000001D8 4008                   SHLL2       R0
    000001DA 30EC                   ADD         R14,R0
    000001DC 03CE                   MOV.L       @(R0,R12),R3
    000001DE 6243                   MOV         R4,R2
    000001E0 4208                   SHLL2       R2
    000001E2 4208                   SHLL2       R2
    000001E4 32EC                   ADD         R14,R2
    000001E6 32CC                   ADD         R12,R2
    000001E8 5124                   MOV.L       @(16,R2),R1
    000001EA 3310                   CMP/EQ      R1,R3
    000001EC 895F                   BT          L493
    000001EE              L627:                             
    000001EE 7401                   ADD         #1,R4
    000001F0              L623:                             
    000001F0 3463                   CMP/GE      R6,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001F2 8BDF                   BF          L624
    000001F4 7A01                   ADD         #1,R10
    000001F6              L621:                             
    000001F6 3A63                   CMP/GE      R6,R10
    000001F8 8BD7                   BF          L622
          2048.c   170                            return 1;
          2048.c   171                        }
          2048.c   172                    }
          2048.c   173                }
          2048.c   174                break;
    000001FA A060                   BRA         L610
    000001FC 0009                   NOP
    000001FE              L532:                            ; case label 
          2048.c   175            case 2:
          2048.c   176                for(i = 0; i<4; ++i) {
    000001FE A02F                   BRA         L630
    00000200 6A53                   MOV         R5,R10
    00000202              L721:                             
    00000202 0000                   .DATA.W     0
    00000204 <00000000>             .DATA.L     _score
    00000208 <00000000>             .DATA.L     _moves
    0000020C <00000000>             .DATA.L     _board
    00000210 <00000000>             .DATA.L     _rand
    00000214 <00000000>             .DATA.L     __modls
    00000218 <00000000>             .DATA.L     _Bdisp_DrawLineVRAM
    0000021C              L631:                             
          2048.c   177                    isFirstZero = 1;
    0000021C 6B73                   MOV         R7,R11
          2048.c   178                    for(j = 0; j<4; ++j) {
    0000021E 6453                   MOV         R5,R4
    00000220 6CA3                   MOV         R10,R12
    00000222 4C08                   SHLL2       R12
    00000224 4C08                   SHLL2       R12
    00000226 A018                   BRA         L632
    00000228 3CEC                   ADD         R14,R12
    0000022A              L633:                             
          2048.c   179                        if(board[i][j] == 0) {
    0000022A 6043                   MOV         R4,R0
    0000022C 4008                   SHLL2       R0
    0000022E 03CE                   MOV.L       @(R0,R12),R3
    00000230 2338                   TST         R3,R3
    00000232 8B03                   BF          L634
          2048.c   180                            if(isFirstZero) {
    00000234 2BB8                   TST         R11,R11
    00000236 8B0F                   BF          L636
    00000238 A039                   BRA         L493
    0000023A 0009                   NOP
    0000023C              L634:                             
          2048.c   181                                continue;
          2048.c   182                            }
          2048.c   183                            return 1;
          2048.c   184                        }
          2048.c   185                        if(isFirstZero) {
    0000023C 2BB8                   TST         R11,R11
    0000023E 8900                   BT          L637
          2048.c   186                            isFirstZero = 0;
    00000240 6B53                   MOV         R5,R11




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000242              L637:                             
          2048.c   187                        }
          2048.c   188                        if(j<3 && board[i][j] == board[i][j+1]) {
    00000242 34D3                   CMP/GE      R13,R4
    00000244 8908                   BT          L636
    00000246 6043                   MOV         R4,R0
    00000248 4008                   SHLL2       R0
    0000024A 6243                   MOV         R4,R2
    0000024C 03CE                   MOV.L       @(R0,R12),R3
    0000024E 4208                   SHLL2       R2
    00000250 32CC                   ADD         R12,R2
    00000252 5121                   MOV.L       @(4,R2),R1
    00000254 3310                   CMP/EQ      R1,R3
    00000256 892A                   BT          L493
    00000258              L636:                             
    00000258 7401                   ADD         #1,R4
    0000025A              L632:                             
    0000025A 3463                   CMP/GE      R6,R4
    0000025C 8BE5                   BF          L633
    0000025E 7A01                   ADD         #1,R10
    00000260              L630:                             
    00000260 3A63                   CMP/GE      R6,R10
    00000262 8BDB                   BF          L631
          2048.c   189                            return 1;
          2048.c   190                        }
          2048.c   191                    }
          2048.c   192                }
          2048.c   193                break;
    00000264 A02B                   BRA         L610
    00000266 0009                   NOP
    00000268              L533:                            ; case label 
          2048.c   194            case 3:
          2048.c   195                for(j = 0; j<4; ++j) {
    00000268 A027                   BRA         L639
    0000026A 6953                   MOV         R5,R9
    0000026C              L640:                             
          2048.c   196                    isFirstZero = 1;
    0000026C 6B73                   MOV         R7,R11
          2048.c   197                    for(i = 3; i>=0; --i) {
    0000026E 64D3                   MOV         R13,R4
    00000270 6C93                   MOV         R9,R12
    00000272 A01F                   BRA         L641
    00000274 4C08                   SHLL2       R12
    00000276              L642:                             
    00000276 6A43                   MOV         R4,R10
    00000278 4A08                   SHLL2       R10
    0000027A 4A08                   SHLL2       R10
    0000027C 60A3                   MOV         R10,R0
    0000027E 30EC                   ADD         R14,R0
    00000280 03CE                   MOV.L       @(R0,R12),R3
    00000282 2338                   TST         R3,R3
    00000284 8B03                   BF          L643
          2048.c   198                        if(board[i][j] == 0) {
          2048.c   199                            if(isFirstZero) {
    00000286 2BB8                   TST         R11,R11
    00000288 8B13                   BF          L645
    0000028A A010                   BRA         L493




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000028C 0009                   NOP
    0000028E              L643:                             
          2048.c   200                                continue;
          2048.c   201                            }
          2048.c   202                            return 1;
          2048.c   203                        }
          2048.c   204                        if(isFirstZero) {
    0000028E 2BB8                   TST         R11,R11
    00000290 8900                   BT          L646
          2048.c   205                            isFirstZero = 0;
    00000292 6B53                   MOV         R5,R11
    00000294              L646:                             
          2048.c   206                        }
          2048.c   207                        if(i>=1 && board[i][j] == board[i-1][j]) {
    00000294 3473                   CMP/GE      R7,R4
    00000296 8B0C                   BF          L645
    00000298 60A3                   MOV         R10,R0
    0000029A 30EC                   ADD         R14,R0
    0000029C 03CE                   MOV.L       @(R0,R12),R3
    0000029E 6043                   MOV         R4,R0
    000002A0 70FF                   ADD         #-1,R0
    000002A2 4008                   SHLL2       R0
    000002A4 4008                   SHLL2       R0
    000002A6 30EC                   ADD         R14,R0
    000002A8 02CE                   MOV.L       @(R0,R12),R2
    000002AA 3320                   CMP/EQ      R2,R3
    000002AC 8B01                   BF          L645
    000002AE              L493:
          2048.c   208                            return 1;
    000002AE A007                   BRA         L618
    000002B0 E001                   MOV         #1,R0
    000002B2              L645:                             
    000002B2 74FF                   ADD         #-1,R4
    000002B4              L641:                             
    000002B4 4411                   CMP/PZ      R4
    000002B6 89DE                   BT          L642
    000002B8 7901                   ADD         #1,R9
    000002BA              L639:                             
    000002BA 3963                   CMP/GE      R6,R9
    000002BC 8BD6                   BF          L640
    000002BE              L610:                             
          2048.c   209                        }
          2048.c   210                    }
          2048.c   211                }
          2048.c   212                break;
          2048.c   213        }
          2048.c   214        return 0;
    000002BE E000                   MOV         #0,R0
          2048.c   215    }
    000002C0              L618:                             
    000002C0 69F6                   MOV.L       @R15+,R9
    000002C2 6AF6                   MOV.L       @R15+,R10
    000002C4 6BF6                   MOV.L       @R15+,R11
    000002C6 6CF6                   MOV.L       @R15+,R12
    000002C8 6DF6                   MOV.L       @R15+,R13
    000002CA 000B                   RTS
    000002CC 6EF6                   MOV.L       @R15+,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          2048.c   216    
          2048.c   217    int isDead() {
    000002CE              _isDead:                         ; function: isDead
                                                           ; frame size=12
    000002CE 2FE6                   MOV.L       R14,@-R15
    000002D0 2FC6                   MOV.L       R12,@-R15
          2048.c   218        int i; int j;
          2048.c   219        for(i = 0; i<4; ++i) {
    000002D2 EC00                   MOV         #0,R12
    000002D4 2FB6                   MOV.L       R11,@-R15
    000002D6 A038                   BRA         L648
    000002D8 66C3                   MOV         R12,R6
    000002DA              L649:                             
          2048.c   220            for(j = 0; j<4; ++j) {
    000002DA 65C3                   MOV         R12,R5
    000002DC D145                   MOV.L       L724+2,R1  ; _board
    000002DE 6E63                   MOV         R6,R14
    000002E0 4E08                   SHLL2       R14
    000002E2 4E08                   SHLL2       R14
    000002E4 6013                   MOV         R1,R0
    000002E6 3E1C                   ADD         R1,R14
    000002E8 6B63                   MOV         R6,R11
    000002EA 7BFF                   ADD         #-1,R11
    000002EC 4B08                   SHLL2       R11
    000002EE 4B08                   SHLL2       R11
    000002F0 3B0C                   ADD         R0,R11
    000002F2              L651:                             
    000002F2 6053                   MOV         R5,R0
    000002F4 4008                   SHLL2       R0
    000002F6 03EE                   MOV.L       @(R0,R14),R3
    000002F8 2338                   TST         R3,R3
    000002FA 8920                   BT          L503
          2048.c   221                if(board[i][j] == 0) {
          2048.c   222                    return 0;
          2048.c   223                }
          2048.c   224                if(i > 0 && board[i][j] == board[i-1][j]) {
    000002FC 4615                   CMP/PL      R6
    000002FE 8B03                   BF          L654
    00000300 03EE                   MOV.L       @(R0,R14),R3
    00000302 02BE                   MOV.L       @(R0,R11),R2
    00000304 3320                   CMP/EQ      R2,R3
    00000306 891A                   BT          L503
    00000308              L654:                             
          2048.c   225                    return 0;
          2048.c   226                }
          2048.c   227                if(i < 3 && board[i][j] == board[i+1][j]) {
    00000308 E103                   MOV         #3,R1
    0000030A 3613                   CMP/GE      R1,R6
    0000030C 8905                   BT          L655
    0000030E 6203                   MOV         R0,R2
    00000310 03EE                   MOV.L       @(R0,R14),R3
    00000312 32EC                   ADD         R14,R2
    00000314 5224                   MOV.L       @(16,R2),R2
    00000316 3320                   CMP/EQ      R2,R3
    00000318 8911                   BT          L503
    0000031A              L655:                             
          2048.c   228                    return 0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          2048.c   229                }
          2048.c   230                if(j > 0 && board[i][j] == board[i][j-1]) {
    0000031A 4515                   CMP/PL      R5
    0000031C 8B07                   BF          L656
    0000031E 6253                   MOV         R5,R2
    00000320 03EE                   MOV.L       @(R0,R14),R3
    00000322 72FF                   ADD         #-1,R2
    00000324 4208                   SHLL2       R2
    00000326 32EC                   ADD         R14,R2
    00000328 6222                   MOV.L       @R2,R2
    0000032A 3320                   CMP/EQ      R2,R3
    0000032C 8907                   BT          L503
    0000032E              L656:                             
          2048.c   231                    return 0;
          2048.c   232                }
          2048.c   233                if(j < 3 && board[i][j] == board[i][j+1]) {
    0000032E 3513                   CMP/GE      R1,R5
    00000330 8907                   BT          L657
    00000332 6203                   MOV         R0,R2
    00000334 03EE                   MOV.L       @(R0,R14),R3
    00000336 32EC                   ADD         R14,R2
    00000338 5221                   MOV.L       @(4,R2),R2
    0000033A 3320                   CMP/EQ      R2,R3
    0000033C 8B01                   BF          L657
    0000033E              L503:
          2048.c   234                    return 0;
    0000033E A008                   BRA         L653
    00000340 E000                   MOV         #0,R0
    00000342              L657:                             
    00000342 7501                   ADD         #1,R5
    00000344 3573                   CMP/GE      R7,R5
    00000346 8BD4                   BF          L651
    00000348 7601                   ADD         #1,R6
    0000034A              L648:                             
    0000034A E704                   MOV         #4,R7
    0000034C 3673                   CMP/GE      R7,R6
    0000034E 8BC4                   BF          L649
          2048.c   235                }
          2048.c   236            }
          2048.c   237        }
          2048.c   238        return 1;
    00000350 E001                   MOV         #1,R0
          2048.c   239    }
    00000352              L653:                             
    00000352 6BF6                   MOV.L       @R15+,R11
    00000354 6CF6                   MOV.L       @R15+,R12
    00000356 000B                   RTS
    00000358 6EF6                   MOV.L       @R15+,R14
          2048.c   240    
          2048.c   241    // 3: up, 2: right, 1: down, 0: left
          2048.c   242    void move(int dir) {
    0000035A              _move:                           ; function: move
                                                           ; frame size=128
                                                           ; used runtime library name:
                                                           ; __quick_evn_mvn
    0000035A 2FE6                   MOV.L       R14,@-R15
    0000035C 2FD6                   MOV.L       R13,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000035E 2FC6                   MOV.L       R12,@-R15
    00000360 2FB6                   MOV.L       R11,@-R15
    00000362 2FA6                   MOV.L       R10,@-R15
    00000364 2F96                   MOV.L       R9,@-R15
    00000366 2F86                   MOV.L       R8,@-R15
    00000368 4F22                   STS.L       PR,@-R15
    0000036A 7FA0                   ADD         #-96,R15
          2048.c   243        int i; int j; int k;
          2048.c   244        int merged[4][4] = {0};
    0000036C D222                   MOV.L       L724+6,R2  ; L391
    0000036E 6BF3                   MOV         R15,R11
    00000370 D322                   MOV.L       L724+10,R3 ; __quick_evn_mvn
    00000372 61F3                   MOV         R15,R1
    00000374 7B20                   ADD         #32,R11
    00000376 7120                   ADD         #32,R1
    00000378 430B                   JSR         @R3
    0000037A E040                   MOV         #64,R0
          2048.c   245        moves++;
    0000037C D520                   MOV.L       L724+14,R5 ; _moves
          2048.c   246        switch (dir)
    0000037E EC04                   MOV         #4,R12
    00000380 D720                   MOV.L       L724+18,R7 ; _score
    00000382 6043                   MOV         R4,R0
    00000384 6152                   MOV.L       @R5,R1
    00000386 ED03                   MOV         #3,R13
    00000388 7101                   ADD         #1,R1
    0000038A 8800                   CMP/EQ      #0,R0
    0000038C 2512                   MOV.L       R1,@R5
    0000038E D519                   MOV.L       L724+2,R5  ; _board
    00000390 8D0C                   BT/S        L535
    00000392 E600                   MOV         #0,R6
    00000394 8801                   CMP/EQ      #1,R0
    00000396 8979                   BT          L536
    00000398 8802                   CMP/EQ      #2,R0
    0000039A 8B01                   BF          L725
    0000039C A0D6                   BRA         L537
    0000039E 0009                   NOP
    000003A0              L725:                             
    000003A0 8803                   CMP/EQ      #3,R0
    000003A2 8B01                   BF          L726
    000003A4 A12B                   BRA         L538
    000003A6 0009                   NOP
    000003A8              L726:                             
    000003A8 A18B                   BRA         L658
    000003AA 0009                   NOP
    000003AC              L535:                            ; case label 
          2048.c   247        {
          2048.c   248        case 0:
          2048.c   249            for(i = 0; i<4; ++i) {
    000003AC 2F62                   MOV.L       R6,@R15
    000003AE              L659:                             
          2048.c   250                for(j = 0; j<4; ++j) {
    000003AE 1F61                   MOV.L       R6,@(4,R15)
    000003B0 6EF2                   MOV.L       @R15,R14
    000003B2 4E08                   SHLL2       R14
    000003B4 4E08                   SHLL2       R14
    000003B6 6AE3                   MOV         R14,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003B8 3A5C                   ADD         R5,R10
    000003BA              L660:                             
          2048.c   251                    for(k = j; k>0; --k) {
    000003BA 54F1                   MOV.L       @(4,R15),R4
    000003BC 6943                   MOV         R4,R9
    000003BE 4908                   SHLL2       R9
    000003C0 6893                   MOV         R9,R8
    000003C2 6D43                   MOV         R4,R13
    000003C4 7DFF                   ADD         #-1,R13
    000003C6 4415                   CMP/PL      R4
    000003C8 8F54                   BF/S        L661
    000003CA 4D08                   SHLL2       R13
    000003CC              L662:                             
          2048.c   252                        if(board[i][k-1] == 0) {
    000003CC 6043                   MOV         R4,R0
    000003CE 70FF                   ADD         #-1,R0
    000003D0 4008                   SHLL2       R0
    000003D2 03AE                   MOV.L       @(R0,R10),R3
    000003D4 2338                   TST         R3,R3
    000003D6 8B17                   BF          L663
          2048.c   253                            board[i][k-1] = board[i][k];
    000003D8 6043                   MOV         R4,R0
    000003DA 70FF                   ADD         #-1,R0
    000003DC 4008                   SHLL2       R0
    000003DE 6343                   MOV         R4,R3
    000003E0 4308                   SHLL2       R3
    000003E2 33AC                   ADD         R10,R3
    000003E4 1F32                   MOV.L       R3,@(8,R15)
    000003E6 6232                   MOV.L       @R3,R2
    000003E8 0A26                   MOV.L       R2,@(R0,R10)
          2048.c   254                            board[i][k] = 0;
    000003EA 53F2                   MOV.L       @(8,R15),R3
    000003EC 2362                   MOV.L       R6,@R3
    000003EE A03B                   BRA         L664
    000003F0 0009                   NOP
    000003F2              L724:                             
    000003F2 0000                   .DATA.W     0
    000003F4 <00000000>             .DATA.L     _board
    000003F8 <00000000>             .DATA.L     L391
    000003FC <00000000>             .DATA.L     __quick_evn_mvn
    00000400 <00000000>             .DATA.L     _moves
    00000404 <00000000>             .DATA.L     _score
    00000408              L663:                             
          2048.c   255                        } else if(board[i][k-1] == board[i][k] 
          2048.c   256                        && !merged[i][k-1] && !merged[i][k]) {
    00000408 63E3                   MOV         R14,R3
    0000040A 335C                   ADD         R5,R3
    0000040C 1F32                   MOV.L       R3,@(8,R15)
    0000040E 6243                   MOV         R4,R2
    00000410 72FF                   ADD         #-1,R2
    00000412 4208                   SHLL2       R2
    00000414 1F23                   MOV.L       R2,@(12,R15)
    00000416 332C                   ADD         R2,R3
    00000418 50F2                   MOV.L       @(8,R15),R0
    0000041A 019E                   MOV.L       @(R0,R9),R1
    0000041C 6332                   MOV.L       @R3,R3
    0000041E 3310                   CMP/EQ      R1,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000420 8B22                   BF          L664
    00000422 63F3                   MOV         R15,R3
    00000424 7320                   ADD         #32,R3
    00000426 33EC                   ADD         R14,R3
    00000428 332C                   ADD         R2,R3
    0000042A 6332                   MOV.L       @R3,R3
    0000042C 2338                   TST         R3,R3
    0000042E 8B1B                   BF          L664
    00000430 63F3                   MOV         R15,R3
    00000432 7320                   ADD         #32,R3
    00000434 33EC                   ADD         R14,R3
    00000436 339C                   ADD         R9,R3
    00000438 6332                   MOV.L       @R3,R3
    0000043A 2338                   TST         R3,R3
    0000043C 8B14                   BF          L664
          2048.c   257                            board[i][k-1] += 1;
    0000043E 63E3                   MOV         R14,R3
    00000440 335C                   ADD         R5,R3
          2048.c   258                            board[i][k] = 0;
          2048.c   259                            merged[i][k-1] = 1;
          2048.c   260                            score += 1 << board[i][k-1];
    00000442 E101                   MOV         #1,R1
    00000444 1F32                   MOV.L       R3,@(8,R15)
    00000446 33DC                   ADD         R13,R3
    00000448 1F33                   MOV.L       R3,@(12,R15)
    0000044A 6232                   MOV.L       @R3,R2
    0000044C 7201                   ADD         #1,R2
    0000044E 2322                   MOV.L       R2,@R3
    00000450 50F2                   MOV.L       @(8,R15),R0
    00000452 E301                   MOV         #1,R3
    00000454 0866                   MOV.L       R6,@(R0,R8)
    00000456 60E3                   MOV         R14,R0
    00000458 30BC                   ADD         R11,R0
    0000045A 0D36                   MOV.L       R3,@(R0,R13)
    0000045C 52F3                   MOV.L       @(12,R15),R2
    0000045E 6322                   MOV.L       @R2,R3
    00000460 6272                   MOV.L       @R7,R2
    00000462 413C                   SHAD        R3,R1
    00000464 321C                   ADD         R1,R2
    00000466 2722                   MOV.L       R2,@R7
    00000468              L664:                             
    00000468 74FF                   ADD         #-1,R4
    0000046A 78FC                   ADD         #-4,R8
    0000046C 7DFC                   ADD         #-4,R13
    0000046E 4415                   CMP/PL      R4
    00000470 8DAC                   BT/S        L662
    00000472 79FC                   ADD         #-4,R9
    00000474              L661:                             
    00000474 52F1                   MOV.L       @(4,R15),R2
    00000476 7201                   ADD         #1,R2
    00000478 32C3                   CMP/GE      R12,R2
    0000047A 8F9E                   BF/S        L660
    0000047C 1F21                   MOV.L       R2,@(4,R15)
    0000047E 62F2                   MOV.L       @R15,R2
    00000480 7201                   ADD         #1,R2
    00000482 32C3                   CMP/GE      R12,R2
    00000484 8F93                   BF/S        L659




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000486 2F22                   MOV.L       R2,@R15
          2048.c   261                        }
          2048.c   262                    }
          2048.c   263                }
          2048.c   264            }
          2048.c   265            break;
    00000488 A11B                   BRA         L658
    0000048A 0009                   NOP
    0000048C              L536:                            ; case label 
          2048.c   266        case 1:
          2048.c   267            for(j = 0; j<4; ++j) {
    0000048C 1F62                   MOV.L       R6,@(8,R15)
    0000048E              L666:                             
          2048.c   268                for(i = 3; i>=0; --i) {
    0000048E 1FD1                   MOV.L       R13,@(4,R15)
    00000490 5EF2                   MOV.L       @(8,R15),R14
    00000492 4E08                   SHLL2       R14
    00000494              L667:                             
          2048.c   269                    for(k = i; k<3; ++k) {
    00000494 5AF1                   MOV.L       @(4,R15),R10
    00000496 68A3                   MOV         R10,R8
    00000498 4808                   SHLL2       R8
    0000049A 4808                   SHLL2       R8
    0000049C 6983                   MOV         R8,R9
    0000049E 6483                   MOV         R8,R4
    000004A0 3AD3                   CMP/GE      R13,R10
    000004A2 8D47                   BT/S        L668
    000004A4 385C                   ADD         R5,R8
    000004A6              L669:                             
          2048.c   270                        if(board[k+1][j] == 0) {
    000004A6 62A3                   MOV         R10,R2
    000004A8 4208                   SHLL2       R2
    000004AA 4208                   SHLL2       R2
    000004AC 325C                   ADD         R5,R2
    000004AE 32EC                   ADD         R14,R2
    000004B0 5324                   MOV.L       @(16,R2),R3
    000004B2 2338                   TST         R3,R3
    000004B4 8B0B                   BF          L670
          2048.c   271                            board[k+1][j] = board[k][j];
    000004B6 6383                   MOV         R8,R3
    000004B8 1FE6                   MOV.L       R14,@(24,R15)
    000004BA 33EC                   ADD         R14,R3
    000004BC 2F32                   MOV.L       R3,@R15
    000004BE 6233                   MOV         R3,R2
    000004C0 6132                   MOV.L       @R3,R1
    000004C2 7210                   ADD         #16,R2
    000004C4 2212                   MOV.L       R1,@R2
          2048.c   272                            board[k][j] = 0;
    000004C6 63F2                   MOV.L       @R15,R3
    000004C8 2362                   MOV.L       R6,@R3
    000004CA A02D                   BRA         L671
    000004CC 0009                   NOP
    000004CE              L670:                             
          2048.c   273                        } else if(board[k+1][j] == board[k][j] 
          2048.c   274                        && !merged[k+1][j] && !merged[k][j]) {
    000004CE 6243                   MOV         R4,R2
    000004D0 325C                   ADD         R5,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004D2 1F25                   MOV.L       R2,@(20,R15)
    000004D4 32EC                   ADD         R14,R2
    000004D6 2F22                   MOV.L       R2,@R15
    000004D8 5324                   MOV.L       @(16,R2),R3
    000004DA 6122                   MOV.L       @R2,R1
    000004DC 3310                   CMP/EQ      R1,R3
    000004DE 8B23                   BF          L671
    000004E0 60F3                   MOV         R15,R0
    000004E2 7020                   ADD         #32,R0
    000004E4 304C                   ADD         R4,R0
    000004E6 30EC                   ADD         R14,R0
    000004E8 5304                   MOV.L       @(16,R0),R3
    000004EA 2338                   TST         R3,R3
    000004EC 8B1C                   BF          L671
    000004EE 60F3                   MOV         R15,R0
    000004F0 7020                   ADD         #32,R0
    000004F2 304C                   ADD         R4,R0
    000004F4 03EE                   MOV.L       @(R0,R14),R3
    000004F6 2338                   TST         R3,R3
    000004F8 8B16                   BF          L671
          2048.c   275                            board[k+1][j] += 1;
    000004FA 6293                   MOV         R9,R2
    000004FC 325C                   ADD         R5,R2
    000004FE 1F24                   MOV.L       R2,@(16,R15)
    00000500 32EC                   ADD         R14,R2
    00000502 1F23                   MOV.L       R2,@(12,R15)
    00000504 7210                   ADD         #16,R2
    00000506 2F22                   MOV.L       R2,@R15
    00000508 6322                   MOV.L       @R2,R3
    0000050A 7301                   ADD         #1,R3
    0000050C 2232                   MOV.L       R3,@R2
          2048.c   276                            board[k][j] = 0;
          2048.c   277                            merged[k+1][j] = 1;
    0000050E 6393                   MOV         R9,R3
    00000510 52F3                   MOV.L       @(12,R15),R2
    00000512 33BC                   ADD         R11,R3
    00000514 2262                   MOV.L       R6,@R2
    00000516 33EC                   ADD         R14,R3
    00000518 E201                   MOV         #1,R2
    0000051A 1324                   MOV.L       R2,@(16,R3)
          2048.c   278                            score += 1 << board[k+1][j];
    0000051C 63F2                   MOV.L       @R15,R3
    0000051E 6332                   MOV.L       @R3,R3
    00000520 6172                   MOV.L       @R7,R1
    00000522 423C                   SHAD        R3,R2
    00000524 312C                   ADD         R2,R1
    00000526 2712                   MOV.L       R1,@R7
    00000528              L671:                             
    00000528 7A01                   ADD         #1,R10
    0000052A 7910                   ADD         #16,R9
    0000052C 7410                   ADD         #16,R4
    0000052E 3AD3                   CMP/GE      R13,R10
    00000530 8FB9                   BF/S        L669
    00000532 7810                   ADD         #16,R8
    00000534              L668:                             
    00000534 52F1                   MOV.L       @(4,R15),R2
    00000536 72FF                   ADD         #-1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000538 4211                   CMP/PZ      R2
    0000053A 8DAB                   BT/S        L667
    0000053C 1F21                   MOV.L       R2,@(4,R15)
    0000053E 52F2                   MOV.L       @(8,R15),R2
    00000540 7201                   ADD         #1,R2
    00000542 32C3                   CMP/GE      R12,R2
    00000544 8FA3                   BF/S        L666
    00000546 1F22                   MOV.L       R2,@(8,R15)
          2048.c   279                        }
          2048.c   280                    }
          2048.c   281                }
          2048.c   282            }
          2048.c   283            break;
    00000548 A0BB                   BRA         L658
    0000054A 0009                   NOP
    0000054C              L537:                            ; case label 
          2048.c   284        case 2:
          2048.c   285            for(i = 0; i<4; ++i) {
    0000054C 1F62                   MOV.L       R6,@(8,R15)
    0000054E              L673:                             
          2048.c   286                for(j = 3; j>=0; --j) {
    0000054E 1FD1                   MOV.L       R13,@(4,R15)
    00000550 5EF2                   MOV.L       @(8,R15),R14
    00000552 4E08                   SHLL2       R14
    00000554 4E08                   SHLL2       R14
    00000556 63E3                   MOV         R14,R3
    00000558 335C                   ADD         R5,R3
    0000055A 2F32                   MOV.L       R3,@R15
    0000055C              L674:                             
          2048.c   287                    for(k = j; k<3; ++k) {
    0000055C 59F1                   MOV.L       @(4,R15),R9
    0000055E 6A93                   MOV         R9,R10
    00000560 63F2                   MOV.L       @R15,R3
    00000562 39D3                   CMP/GE      R13,R9
    00000564 4A08                   SHLL2       R10
    00000566 68A3                   MOV         R10,R8
    00000568 64A3                   MOV         R10,R4
    0000056A 8D3C                   BT/S        L675
    0000056C 3A3C                   ADD         R3,R10
    0000056E              L676:                             
          2048.c   288                        if(board[i][k+1] == 0) {
    0000056E 6393                   MOV         R9,R3
    00000570 62F2                   MOV.L       @R15,R2
    00000572 4308                   SHLL2       R3
    00000574 332C                   ADD         R2,R3
    00000576 5131                   MOV.L       @(4,R3),R1
    00000578 2118                   TST         R1,R1
    0000057A 8B03                   BF          L677
          2048.c   289                            board[i][k+1] = board[i][k];
    0000057C 61A2                   MOV.L       @R10,R1
    0000057E 1A11                   MOV.L       R1,@(4,R10)
          2048.c   290                            board[i][k] = 0;
    00000580 A02B                   BRA         L678
    00000582 2A62                   MOV.L       R6,@R10
    00000584              L677:                             
          2048.c   291                        } else if(board[i][k+1] == board[i][k]
          2048.c   292                        && !merged[i][k+1] && !merged[i][k]) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000584 61E3                   MOV         R14,R1
    00000586 315C                   ADD         R5,R1
    00000588 314C                   ADD         R4,R1
    0000058A 1F13                   MOV.L       R1,@(12,R15)
    0000058C 5311                   MOV.L       @(4,R1),R3
    0000058E 6012                   MOV.L       @R1,R0
    00000590 3300                   CMP/EQ      R0,R3
    00000592 8B22                   BF          L678
    00000594 63F3                   MOV         R15,R3
    00000596 7320                   ADD         #32,R3
    00000598 33EC                   ADD         R14,R3
    0000059A 334C                   ADD         R4,R3
    0000059C 5031                   MOV.L       @(4,R3),R0
    0000059E 2008                   TST         R0,R0
    000005A0 8B1B                   BF          L678
    000005A2 60F3                   MOV         R15,R0
    000005A4 7020                   ADD         #32,R0
    000005A6 30EC                   ADD         R14,R0
    000005A8 034E                   MOV.L       @(R0,R4),R3
    000005AA 2338                   TST         R3,R3
    000005AC 8B15                   BF          L678
          2048.c   293                            board[i][k+1] += 1;
    000005AE 62E3                   MOV         R14,R2
    000005B0 325C                   ADD         R5,R2
    000005B2 328C                   ADD         R8,R2
    000005B4 1F23                   MOV.L       R2,@(12,R15)
    000005B6 7204                   ADD         #4,R2
    000005B8 1F27                   MOV.L       R2,@(28,R15)
    000005BA 6322                   MOV.L       @R2,R3
    000005BC 7301                   ADD         #1,R3
    000005BE 2232                   MOV.L       R3,@R2
          2048.c   294                            board[i][k] = 0;
    000005C0 52F3                   MOV.L       @(12,R15),R2
          2048.c   295                            merged[i][k+1] = 1;
    000005C2 63E3                   MOV         R14,R3
    000005C4 2262                   MOV.L       R6,@R2
    000005C6 33BC                   ADD         R11,R3
    000005C8 338C                   ADD         R8,R3
    000005CA E201                   MOV         #1,R2
    000005CC 1321                   MOV.L       R2,@(4,R3)
          2048.c   296                            score += 1 << board[i][k+1];
    000005CE 53F7                   MOV.L       @(28,R15),R3
    000005D0 6172                   MOV.L       @R7,R1
    000005D2 6332                   MOV.L       @R3,R3
    000005D4 423C                   SHAD        R3,R2
    000005D6 312C                   ADD         R2,R1
    000005D8 2712                   MOV.L       R1,@R7
    000005DA              L678:                             
    000005DA 7901                   ADD         #1,R9
    000005DC 7804                   ADD         #4,R8
    000005DE 7404                   ADD         #4,R4
    000005E0 39D3                   CMP/GE      R13,R9
    000005E2 8FC4                   BF/S        L676
    000005E4 7A04                   ADD         #4,R10
    000005E6              L675:                             
    000005E6 52F1                   MOV.L       @(4,R15),R2
    000005E8 72FF                   ADD         #-1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005EA 4211                   CMP/PZ      R2
    000005EC 8DB6                   BT/S        L674
    000005EE 1F21                   MOV.L       R2,@(4,R15)
    000005F0 52F2                   MOV.L       @(8,R15),R2
    000005F2 7201                   ADD         #1,R2
    000005F4 32C3                   CMP/GE      R12,R2
    000005F6 8FAA                   BF/S        L673
    000005F8 1F22                   MOV.L       R2,@(8,R15)
          2048.c   297                        }
          2048.c   298                    }
          2048.c   299                }
          2048.c   300            }
          2048.c   301            break;
    000005FA A062                   BRA         L658
    000005FC 0009                   NOP
    000005FE              L538:                            ; case label 
          2048.c   302        case 3:
          2048.c   303            for(j = 0; j<4; ++j) {
    000005FE 2F62                   MOV.L       R6,@R15
    00000600              L680:                             
          2048.c   304                for(i = 0; i<4; ++i) {
    00000600 1F61                   MOV.L       R6,@(4,R15)
    00000602 6EF2                   MOV.L       @R15,R14
    00000604 4E08                   SHLL2       R14
    00000606              L681:                             
          2048.c   305                    for(k = i; k>0; --k) {
    00000606 54F1                   MOV.L       @(4,R15),R4
    00000608 6A43                   MOV         R4,R10
    0000060A 4A08                   SHLL2       R10
    0000060C 4A08                   SHLL2       R10
    0000060E 69A3                   MOV         R10,R9
    00000610 395C                   ADD         R5,R9
    00000612 6D43                   MOV         R4,R13
    00000614 7DFF                   ADD         #-1,R13
    00000616 4D08                   SHLL2       R13
    00000618 4415                   CMP/PL      R4
    0000061A 8F48                   BF/S        L682
    0000061C 4D08                   SHLL2       R13
    0000061E              L683:                             
          2048.c   306                        if(board[k-1][j] == 0) {
    0000061E 6043                   MOV         R4,R0
    00000620 70FF                   ADD         #-1,R0
    00000622 4008                   SHLL2       R0
    00000624 4008                   SHLL2       R0
    00000626 305C                   ADD         R5,R0
    00000628 03EE                   MOV.L       @(R0,R14),R3
    0000062A 2338                   TST         R3,R3
    0000062C 8B0D                   BF          L684
          2048.c   307                            board[k-1][j] = board[k][j];
    0000062E 6043                   MOV         R4,R0
    00000630 70FF                   ADD         #-1,R0
    00000632 4008                   SHLL2       R0
    00000634 4008                   SHLL2       R0
    00000636 305C                   ADD         R5,R0
    00000638 6843                   MOV         R4,R8
    0000063A 4808                   SHLL2       R8
    0000063C 4808                   SHLL2       R8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000063E 385C                   ADD         R5,R8
    00000640 38EC                   ADD         R14,R8
    00000642 6382                   MOV.L       @R8,R3
    00000644 0E36                   MOV.L       R3,@(R0,R14)
          2048.c   308                            board[k][j] = 0;
    00000646 A02C                   BRA         L685
    00000648 2862                   MOV.L       R6,@R8
    0000064A              L684:                             
    0000064A 6853                   MOV         R5,R8
    0000064C 6043                   MOV         R4,R0
    0000064E 70FF                   ADD         #-1,R0
    00000650 4008                   SHLL2       R0
    00000652 4008                   SHLL2       R0
    00000654 1F02                   MOV.L       R0,@(8,R15)
    00000656 308C                   ADD         R8,R0
    00000658 03EE                   MOV.L       @(R0,R14),R3
    0000065A 60A3                   MOV         R10,R0
    0000065C 308C                   ADD         R8,R0
    0000065E 02EE                   MOV.L       @(R0,R14),R2
    00000660 3320                   CMP/EQ      R2,R3
    00000662 8B1E                   BF          L685
    00000664 50F2                   MOV.L       @(8,R15),R0
    00000666 63F3                   MOV         R15,R3
    00000668 7320                   ADD         #32,R3
    0000066A 303C                   ADD         R3,R0
    0000066C 02EE                   MOV.L       @(R0,R14),R2
    0000066E 2228                   TST         R2,R2
    00000670 8B17                   BF          L685
    00000672 60A3                   MOV         R10,R0
    00000674 303C                   ADD         R3,R0
    00000676 02EE                   MOV.L       @(R0,R14),R2
    00000678 2228                   TST         R2,R2
    0000067A 8B12                   BF          L685
          2048.c   309                        } else if(board[k-1][j] == board[k][j]
          2048.c   310                        && !merged[k-1][j] && !merged[k][j]) {
          2048.c   311                            board[k-1][j] += 1;
    0000067C 38DC                   ADD         R13,R8
    0000067E 38EC                   ADD         R14,R8
    00000680 1F82                   MOV.L       R8,@(8,R15)
          2048.c   312                            board[k][j] = 0;
    00000682 60E3                   MOV         R14,R0
    00000684 6382                   MOV.L       @R8,R3
          2048.c   313                            merged[k-1][j] = 1;
          2048.c   314                            score += 1 << board[k-1][j];
    00000686 E101                   MOV         #1,R1
    00000688 7301                   ADD         #1,R3
    0000068A 2832                   MOV.L       R3,@R8
    0000068C 0966                   MOV.L       R6,@(R0,R9)
    0000068E E301                   MOV         #1,R3
    00000690 60D3                   MOV         R13,R0
    00000692 30BC                   ADD         R11,R0
    00000694 0E36                   MOV.L       R3,@(R0,R14)
    00000696 52F2                   MOV.L       @(8,R15),R2
    00000698 6322                   MOV.L       @R2,R3
    0000069A 413C                   SHAD        R3,R1
    0000069C 6272                   MOV.L       @R7,R2
    0000069E 321C                   ADD         R1,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006A0 2722                   MOV.L       R2,@R7
    000006A2              L685:                             
    000006A2 74FF                   ADD         #-1,R4
    000006A4 79F0                   ADD         #-16,R9
    000006A6 7DF0                   ADD         #-16,R13
    000006A8 4415                   CMP/PL      R4
    000006AA 8DB8                   BT/S        L683
    000006AC 7AF0                   ADD         #-16,R10
    000006AE              L682:                             
    000006AE 52F1                   MOV.L       @(4,R15),R2
    000006B0 7201                   ADD         #1,R2
    000006B2 32C3                   CMP/GE      R12,R2
    000006B4 8FA7                   BF/S        L681
    000006B6 1F21                   MOV.L       R2,@(4,R15)
    000006B8 62F2                   MOV.L       @R15,R2
    000006BA 7201                   ADD         #1,R2
    000006BC 32C3                   CMP/GE      R12,R2
    000006BE 8F9F                   BF/S        L680
    000006C0 2F22                   MOV.L       R2,@R15
    000006C2              L658:                             
          2048.c   315                        }
          2048.c   316                    }
          2048.c   317                }
          2048.c   318            }
          2048.c   319            break;
          2048.c   320        default:
          2048.c   321            break;
          2048.c   322        }
          2048.c   323        Bdisp_PutDisp_DD();
    000006C2 D222                   MOV.L       L727+2,R2  ; _Bdisp_PutDisp_DD
    000006C4 420B                   JSR         @R2
    000006C6 0009                   NOP
          2048.c   324    }
    000006C8 7F60                   ADD         #96,R15
    000006CA 4F26                   LDS.L       @R15+,PR
    000006CC 68F6                   MOV.L       @R15+,R8
    000006CE 69F6                   MOV.L       @R15+,R9
    000006D0 6AF6                   MOV.L       @R15+,R10
    000006D2 6BF6                   MOV.L       @R15+,R11
    000006D4 6CF6                   MOV.L       @R15+,R12
    000006D6 6DF6                   MOV.L       @R15+,R13
    000006D8 000B                   RTS
    000006DA 6EF6                   MOV.L       @R15+,R14
          2048.c   325    
          2048.c   326    void atoi(int n, char* str) {
    000006DC              _atoi:                           ; function: atoi
                                                           ; frame size=8
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    000006DC 2FD6                   MOV.L       R13,@-R15
          2048.c   327        int i = 0; int j = 0;
          2048.c   328        if (n == 0) {
    000006DE 2448                   TST         R4,R4
    000006E0 4F22                   STS.L       PR,@-R15
    000006E2 ED00                   MOV         #0,R13
    000006E4 8F04                   BF/S        L687
    000006E6 67D3                   MOV         R13,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          2048.c   329            str[i++] = '0'; // Handle case when n is 0
    000006E8 6073                   MOV         R7,R0
    000006EA 7701                   ADD         #1,R7
    000006EC E330                   MOV         #48,R3
    000006EE 0534                   MOV.B       R3,@(R0,R5)
    000006F0              L687:                             
          2048.c   330        }
          2048.c   331        while(n > 0) {
    000006F0 4415                   CMP/PL      R4
    000006F2 8F10                   BF/S        L688
    000006F4 E60A                   MOV         #10,R6
    000006F6              L689:                             
          2048.c   332            str[i++] = n % 10 + '0';
    000006F6 6373                   MOV         R7,R3
    000006F8 D215                   MOV.L       L727+6,R2  ; __modls
    000006FA 6143                   MOV         R4,R1
    000006FC 7701                   ADD         #1,R7
    000006FE 335C                   ADD         R5,R3
    00000700 420B                   JSR         @R2
    00000702 6063                   MOV         R6,R0
    00000704 7030                   ADD         #48,R0
    00000706 2300                   MOV.B       R0,@R3
          2048.c   333            n /= 10;
    00000708 D312                   MOV.L       L727+10,R3 ; __divls
    0000070A 6063                   MOV         R6,R0
    0000070C 430B                   JSR         @R3
    0000070E 6143                   MOV         R4,R1
    00000710 6403                   MOV         R0,R4
    00000712 4415                   CMP/PL      R4
    00000714 89EF                   BT          L689
    00000716              L688:                             
          2048.c   334        }
          2048.c   335        str[i] = '\0';
    00000716 6073                   MOV         R7,R0
    00000718 05D4                   MOV.B       R13,@(R0,R5)
    0000071A 6673                   MOV         R7,R6
    0000071C 76FF                   ADD         #-1,R6
    0000071E 365C                   ADD         R5,R6
    00000720 6453                   MOV         R5,R4
    00000722 6573                   MOV         R7,R5
    00000724 E300                   MOV         #0,R3
    00000726 3357                   CMP/GT      R5,R3
    00000728 353E                   ADDC        R3,R5
    0000072A 4521                   SHAR        R5
          2048.c   336        for(j = 0; j < i / 2; ++j) {
    0000072C 4515                   CMP/PL      R5
    0000072E 8F09                   BF/S        L690
    00000730 60D3                   MOV         R13,R0
    00000732              L691:                             
    00000732 7001                   ADD         #1,R0
          2048.c   337            char temp = str[j];
    00000734 6740                   MOV.B       @R4,R7
    00000736 3053                   CMP/GE      R5,R0
          2048.c   338            str[j] = str[i-j-1];
    00000738 6360                   MOV.B       @R6,R3
    0000073A 2430                   MOV.B       R3,@R4
          2048.c   339            str[i-j-1] = temp;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000073C 2670                   MOV.B       R7,@R6
    0000073E 76FF                   ADD         #-1,R6
    00000740 8FF7                   BF/S        L691
    00000742 7401                   ADD         #1,R4
    00000744              L690:                             
          2048.c   340        }
          2048.c   341    }
    00000744 4F26                   LDS.L       @R15+,PR
    00000746 000B                   RTS
    00000748 6DF6                   MOV.L       @R15+,R13
    0000074A              L727:                             
    0000074A 0000                   .DATA.W     0
    0000074C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000750 <00000000>             .DATA.L     __modls
    00000754 <00000000>             .DATA.L     __divls
          2048.c   342    
          2048.c   343    int drawBoard() {
    00000758              _drawBoard:                      ; function: drawBoard
                                                           ; frame size=72
                                                           ; used runtime library name:
                                                           ; __quick_odd_mvn
    00000758 2FE6                   MOV.L       R14,@-R15
          2048.c   344        int i; int j;
          2048.c   345        char* str;
          2048.c   346        DISPBOX box;
          2048.c   347        DISPGRAPH graph;
          2048.c   348        graph.WriteModify = IMB_WRITEMODIFY_NORMAL;
    0000075A E401                   MOV         #1,R4
    0000075C 2FD6                   MOV.L       R13,@-R15
    0000075E E014                   MOV         #20,R0
    00000760 2FC6                   MOV.L       R12,@-R15
          2048.c   349        graph.WriteKind = IMB_WRITEKIND_OVER;
          2048.c   350        box.left = 53;
    00000762 E335                   MOV         #53,R3
    00000764 2FB6                   MOV.L       R11,@-R15
          2048.c   351        box.top = 2;
    00000766 E202                   MOV         #2,R2
    00000768 2FA6                   MOV.L       R10,@-R15
    0000076A 2F96                   MOV.L       R9,@-R15
    0000076C 2F86                   MOV.L       R8,@-R15
    0000076E 4F22                   STS.L       PR,@-R15
    00000770 7FD8                   ADD         #-40,R15
    00000772 0F44                   MOV.B       R4,@(R0,R15)
    00000774 E015                   MOV         #21,R0
    00000776 0F44                   MOV.B       R4,@(R0,R15)
    00000778 1F36                   MOV.L       R3,@(24,R15)
          2048.c   352        box.right = 113;
          2048.c   353        box.bottom = 62;
          2048.c   354        Bdisp_AreaClr_VRAM(&box);
    0000077A 64F3                   MOV         R15,R4
    0000077C 1F27                   MOV.L       R2,@(28,R15)
    0000077E E371                   MOV         #113,R3
    00000780 1F38                   MOV.L       R3,@(32,R15)
    00000782 E23E                   MOV         #62,R2
    00000784 D369                   MOV.L       L728,R3    ; _Bdisp_AreaClr_VRAM
    00000786 1F29                   MOV.L       R2,@(36,R15)
    00000788 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000078A 7418                   ADD         #24,R4
          2048.c   355        for(i = 0; i<4; ++i) {
    0000078C E904                   MOV         #4,R9
    0000078E EA00                   MOV         #0,R10
    00000790 6CA3                   MOV         R10,R12
    00000792              L692:                             
          2048.c   356            for(j = 0; j<4; ++j) {
    00000792 68A3                   MOV         R10,R8
    00000794 D366                   MOV.L       L728+4,R3  ; _board
    00000796 6EA3                   MOV         R10,R14
    00000798 6DC3                   MOV         R12,R13
    0000079A 4D08                   SHLL2       R13
    0000079C 4D08                   SHLL2       R13
    0000079E 3D3C                   ADD         R3,R13
    000007A0 6BC3                   MOV         R12,R11
    000007A2 62C3                   MOV         R12,R2
    000007A4 4B08                   SHLL2       R11
    000007A6 4B08                   SHLL2       R11
    000007A8 3B28                   SUB         R2,R11
    000007AA              L693:                             
          2048.c   357                box.left = 53 + 15*j;
    000007AA 63E3                   MOV         R14,R3
          2048.c   358                box.top = 2 + 15*i;
          2048.c   359                box.right = 68 + 15*j;
          2048.c   360                box.bottom = 17 + 15*i;
          2048.c   361                graph.x = box.left;
          2048.c   362                graph.y = box.top;
          2048.c   363                graph.GraphData = graphs[board[i][j]];
    000007AC D061                   MOV.L       L728+8,R0  ; _graphs
    000007AE 62B3                   MOV         R11,R2
    000007B0 7335                   ADD         #53,R3
    000007B2 7202                   ADD         #2,R2
    000007B4 1F36                   MOV.L       R3,@(24,R15)
    000007B6 61F3                   MOV         R15,R1
    000007B8 1F27                   MOV.L       R2,@(28,R15)
    000007BA 63E3                   MOV         R14,R3
    000007BC 7344                   ADD         #68,R3
    000007BE 62B3                   MOV         R11,R2
    000007C0 1F38                   MOV.L       R3,@(32,R15)
    000007C2 7108                   ADD         #8,R1
    000007C4 7211                   ADD         #17,R2
    000007C6 1F29                   MOV.L       R2,@(36,R15)
    000007C8 53F6                   MOV.L       @(24,R15),R3
    000007CA 2F32                   MOV.L       R3,@R15
    000007CC 52F7                   MOV.L       @(28,R15),R2
    000007CE 1F21                   MOV.L       R2,@(4,R15)
    000007D0 62D6                   MOV.L       @R13+,R2
    000007D2 6323                   MOV         R2,R3
    000007D4 4200                   SHLL        R2
    000007D6 323C                   ADD         R3,R2
    000007D8 D357                   MOV.L       L728+12,R3 ; __quick_odd_mvn
    000007DA 4208                   SHLL2       R2
    000007DC 320C                   ADD         R0,R2
    000007DE 430B                   JSR         @R3
    000007E0 E00C                   MOV         #12,R0
          2048.c   364                Bdisp_WriteGraph_VRAM(&graph);
    000007E2 D356                   MOV.L       L728+16,R3 ; _Bdisp_WriteGraph_VRAM




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007E4 430B                   JSR         @R3
    000007E6 64F3                   MOV         R15,R4
    000007E8 7801                   ADD         #1,R8
    000007EA 3893                   CMP/GE      R9,R8
    000007EC 8FDD                   BF/S        L693
    000007EE 7E0F                   ADD         #15,R14
    000007F0 7C01                   ADD         #1,R12
    000007F2 3C93                   CMP/GE      R9,R12
    000007F4 8BCD                   BF          L692
          2048.c   365            }
          2048.c   366        }
          2048.c   367        PrintMini(7, 4, "SCORE", MINI_OVER);
    000007F6 E710                   MOV         #16,R7
    000007F8 D652                   MOV.L       L728+24,R6 ; L431
    000007FA E504                   MOV         #4,R5
    000007FC DE50                   MOV.L       L728+20,R14; _PrintMini
    000007FE 4E0B                   JSR         @R14
    00000800 E407                   MOV         #7,R4
          2048.c   368        atoi(score, str);
    00000802 65F3                   MOV         R15,R5
    00000804 D250                   MOV.L       L728+28,R2 ; _score
    00000806 BF69                   BSR         _atoi
    00000808 6422                   MOV.L       @R2,R4
          2048.c   369        PrintMini(7, 10, str, MINI_OVER);
    0000080A E710                   MOV         #16,R7
    0000080C 66F3                   MOV         R15,R6
    0000080E E50A                   MOV         #10,R5
    00000810 4E0B                   JSR         @R14
    00000812 E407                   MOV         #7,R4
          2048.c   370    
          2048.c   371        PrintMini(7, 19, "MOVES", MINI_OVER);
    00000814 D64D                   MOV.L       L728+32,R6 ; L432
    00000816 E513                   MOV         #19,R5
    00000818 E710                   MOV         #16,R7
    0000081A 4E0B                   JSR         @R14
    0000081C E407                   MOV         #7,R4
          2048.c   372        atoi(moves, str);
    0000081E 65F3                   MOV         R15,R5
    00000820 D24B                   MOV.L       L728+36,R2 ; _moves
    00000822 BF5B                   BSR         _atoi
    00000824 6422                   MOV.L       @R2,R4
          2048.c   373        PrintMini(7, 25, str, MINI_OVER);
    00000826 E710                   MOV         #16,R7
    00000828 66F3                   MOV         R15,R6
    0000082A E519                   MOV         #25,R5
    0000082C 4E0B                   JSR         @R14
    0000082E E407                   MOV         #7,R4
          2048.c   374    
          2048.c   375        box.left = 13;
    00000830 E20D                   MOV         #13,R2
          2048.c   376        box.top = 37;
    00000832 E325                   MOV         #37,R3
    00000834 1F26                   MOV.L       R2,@(24,R15)
          2048.c   377        box.right = 13+24-1;
          2048.c   378        box.bottom = 37+24-1;
          2048.c   379        graph.x = box.left;
          2048.c   380        graph.y = box.top;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          2048.c   381        graph.GraphData = graphs[18];
    00000836 61F3                   MOV         R15,R1
    00000838 1F37                   MOV.L       R3,@(28,R15)
    0000083A E224                   MOV         #36,R2
    0000083C 1F28                   MOV.L       R2,@(32,R15)
    0000083E E33C                   MOV         #60,R3
    00000840 1F39                   MOV.L       R3,@(36,R15)
    00000842 7108                   ADD         #8,R1
    00000844 52F6                   MOV.L       @(24,R15),R2
    00000846 2F22                   MOV.L       R2,@R15
    00000848 53F7                   MOV.L       @(28,R15),R3
    0000084A 1F31                   MOV.L       R3,@(4,R15)
    0000084C D241                   MOV.L       L728+40,R2 ; H'000000D8+_graphs
    0000084E D33A                   MOV.L       L728+12,R3 ; __quick_odd_mvn
    00000850 430B                   JSR         @R3
    00000852 E00C                   MOV         #12,R0
          2048.c   382        Bdisp_WriteGraph_VRAM(&graph);
    00000854 D239                   MOV.L       L728+16,R2 ; _Bdisp_WriteGraph_VRAM
    00000856 420B                   JSR         @R2
    00000858 64F3                   MOV         R15,R4
          2048.c   383        if(!canMove(3)) {
    0000085A ED2E                   MOV         #46,R13
    0000085C BC61                   BSR         _canMove
    0000085E E403                   MOV         #3,R4
    00000860 2008                   TST         R0,R0
    00000862 8B0A                   BF          L694
          2048.c   384            box.left = 22;
    00000864 E316                   MOV         #22,R3
          2048.c   385            box.top = 39;
    00000866 E227                   MOV         #39,R2
    00000868 1F36                   MOV.L       R3,@(24,R15)
          2048.c   386            box.right = 28;
          2048.c   387            box.bottom = 46;
          2048.c   388            Bdisp_AreaClr_VRAM(&box);
    0000086A 64F3                   MOV         R15,R4
    0000086C 1F27                   MOV.L       R2,@(28,R15)
    0000086E E31C                   MOV         #28,R3
    00000870 1F38                   MOV.L       R3,@(32,R15)
    00000872 1FD9                   MOV.L       R13,@(36,R15)
    00000874 D32D                   MOV.L       L728,R3    ; _Bdisp_AreaClr_VRAM
    00000876 430B                   JSR         @R3
    00000878 7418                   ADD         #24,R4
    0000087A              L694:                             
          2048.c   389        }
          2048.c   390        if(!canMove(2)) {
    0000087A EE33                   MOV         #51,R14
    0000087C BC51                   BSR         _canMove
    0000087E E402                   MOV         #2,R4
    00000880 2008                   TST         R0,R0
    00000882 8B09                   BF          L695
          2048.c   391            box.left = 27;
    00000884 E21B                   MOV         #27,R2
          2048.c   392            box.top = 46;
          2048.c   393            box.right = 35;
    00000886 E323                   MOV         #35,R3
    00000888 1F26                   MOV.L       R2,@(24,R15)
          2048.c   394            box.bottom = 51;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          2048.c   395            Bdisp_AreaClr_VRAM(&box);
    0000088A 64F3                   MOV         R15,R4
    0000088C 1FD7                   MOV.L       R13,@(28,R15)
    0000088E 1F38                   MOV.L       R3,@(32,R15)
    00000890 1FE9                   MOV.L       R14,@(36,R15)
    00000892 D326                   MOV.L       L728,R3    ; _Bdisp_AreaClr_VRAM
    00000894 430B                   JSR         @R3
    00000896 7418                   ADD         #24,R4
    00000898              L695:                             
          2048.c   396        }
          2048.c   397        if(!canMove(1)) {
    00000898 BC43                   BSR         _canMove
    0000089A E401                   MOV         #1,R4
    0000089C 2008                   TST         R0,R0
    0000089E 8B0A                   BF          L696
          2048.c   398            box.left = 22;
    000008A0 E216                   MOV         #22,R2
          2048.c   399            box.top = 51;
          2048.c   400            box.right = 28;
    000008A2 E31C                   MOV         #28,R3
    000008A4 1F26                   MOV.L       R2,@(24,R15)
          2048.c   401            box.bottom = 58;
          2048.c   402            Bdisp_AreaClr_VRAM(&box);
    000008A6 64F3                   MOV         R15,R4
    000008A8 1FE7                   MOV.L       R14,@(28,R15)
    000008AA E23A                   MOV         #58,R2
    000008AC 1F38                   MOV.L       R3,@(32,R15)
    000008AE 1F29                   MOV.L       R2,@(36,R15)
    000008B0 D31E                   MOV.L       L728,R3    ; _Bdisp_AreaClr_VRAM
    000008B2 430B                   JSR         @R3
    000008B4 7418                   ADD         #24,R4
    000008B6              L696:                             
          2048.c   403        }
          2048.c   404        if(!canMove(0)) {
    000008B6 BC34                   BSR         _canMove
    000008B8 E400                   MOV         #0,R4
    000008BA 2008                   TST         R0,R0
    000008BC 8B09                   BF          L697
          2048.c   405            box.left = 15;
    000008BE E20F                   MOV         #15,R2
    000008C0 1F26                   MOV.L       R2,@(24,R15)
          2048.c   406            box.top = 46;
          2048.c   407            box.right = 23;
    000008C2 E317                   MOV         #23,R3
    000008C4 1FD7                   MOV.L       R13,@(28,R15)
          2048.c   408            box.bottom = 51;
          2048.c   409            Bdisp_AreaClr_VRAM(&box);
    000008C6 64F3                   MOV         R15,R4
    000008C8 1F38                   MOV.L       R3,@(32,R15)
    000008CA 1FE9                   MOV.L       R14,@(36,R15)
    000008CC D317                   MOV.L       L728,R3    ; _Bdisp_AreaClr_VRAM
    000008CE 430B                   JSR         @R3
    000008D0 7418                   ADD         #24,R4
    000008D2              L697:                             
          2048.c   410        }
          2048.c   411        if(isDead()) {
    000008D2 BCFC                   BSR         _isDead




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008D4 0009                   NOP
    000008D6 2008                   TST         R0,R0
    000008D8 891E                   BT          L698
          2048.c   412            Bdisp_DrawLineVRAM(13, 37, 36, 60);
    000008DA E73C                   MOV         #60,R7
    000008DC DE1E                   MOV.L       L728+44,R14; _Bdisp_DrawLineVRAM
    000008DE E624                   MOV         #36,R6
    000008E0 E525                   MOV         #37,R5
    000008E2 4E0B                   JSR         @R14
    000008E4 E40D                   MOV         #13,R4
          2048.c   413            Bdisp_DrawLineVRAM(13, 38, 35, 60);
    000008E6 E73C                   MOV         #60,R7
    000008E8 E623                   MOV         #35,R6
    000008EA E526                   MOV         #38,R5
    000008EC 4E0B                   JSR         @R14
    000008EE E40D                   MOV         #13,R4
          2048.c   414            Bdisp_DrawLineVRAM(14, 37, 36, 59);
    000008F0 E73B                   MOV         #59,R7
    000008F2 E624                   MOV         #36,R6
    000008F4 E525                   MOV         #37,R5
    000008F6 4E0B                   JSR         @R14
    000008F8 E40E                   MOV         #14,R4
          2048.c   415            Bdisp_DrawLineVRAM(13, 60, 36, 37);
    000008FA E725                   MOV         #37,R7
    000008FC E624                   MOV         #36,R6
    000008FE E53C                   MOV         #60,R5
    00000900 4E0B                   JSR         @R14
    00000902 E40D                   MOV         #13,R4
          2048.c   416            Bdisp_DrawLineVRAM(13, 59, 35, 37);
    00000904 E725                   MOV         #37,R7
    00000906 E623                   MOV         #35,R6
    00000908 E53B                   MOV         #59,R5
    0000090A 4E0B                   JSR         @R14
    0000090C E40D                   MOV         #13,R4
          2048.c   417            Bdisp_DrawLineVRAM(14, 60, 36, 38);
    0000090E E726                   MOV         #38,R7
    00000910 E624                   MOV         #36,R6
    00000912 E53C                   MOV         #60,R5
    00000914 4E0B                   JSR         @R14
    00000916 E40E                   MOV         #14,R4
    00000918              L698:                             
          2048.c   418        }
          2048.c   419    }
    00000918 7F28                   ADD         #40,R15
    0000091A 4F26                   LDS.L       @R15+,PR
    0000091C 68F6                   MOV.L       @R15+,R8
    0000091E 69F6                   MOV.L       @R15+,R9
    00000920 6AF6                   MOV.L       @R15+,R10
    00000922 6BF6                   MOV.L       @R15+,R11
    00000924 6CF6                   MOV.L       @R15+,R12
    00000926 6DF6                   MOV.L       @R15+,R13
    00000928 000B                   RTS
    0000092A 6EF6                   MOV.L       @R15+,R14
    0000092C              L728:                             
    0000092C <00000000>             .DATA.L     _Bdisp_AreaClr_VRAM
    00000930 <00000000>             .DATA.L     _board
    00000934 <00000000>             .DATA.L     _graphs




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000938 <00000000>             .DATA.L     __quick_odd_mvn
    0000093C <00000000>             .DATA.L     _Bdisp_WriteGraph_VRAM
    00000940 <00000000>             .DATA.L     _PrintMini
    00000944 <00000000>             .DATA.L     L431
    00000948 <00000000>             .DATA.L     _score
    0000094C <00000000>             .DATA.L     L432
    00000950 <00000000>             .DATA.L     _moves
    00000954 <000000D8>             .DATA.L     H'000000D8+_graphs
    00000958 <00000000>             .DATA.L     _Bdisp_DrawLineVRAM
          2048.c   420    
          2048.c   421    int game() {
    0000095C              _game:                           ; function: game
                                                           ; frame size=12
    0000095C 2FE6                   MOV.L       R14,@-R15
    0000095E 4F22                   STS.L       PR,@-R15
          2048.c   422        unsigned int key;
          2048.c   423        Bdisp_AllClr_DDVRAM();
    00000960 D32C                   MOV.L       L729+14,R3 ; _Bdisp_AllClr_DDVRAM
    00000962 7FFC                   ADD         #-4,R15
    00000964 430B                   JSR         @R3
    00000966 0009                   NOP
          2048.c   424        initBoard();
    00000968 BB4A                   BSR         _initBoard
    0000096A 0009                   NOP
          2048.c   425        placeRandom();
    0000096C BB5E                   BSR         _placeRandom
    0000096E 0009                   NOP
          2048.c   426        //placeRandom();
          2048.c   427        drawBoard();
    00000970 BEF2                   BSR         _drawBoard
    00000972 0009                   NOP
          2048.c   428        while(1) {
    00000974              L700:                             
          2048.c   429            GetKey(&key);
    00000974 DE28                   MOV.L       L729+18,R14; _GetKey
    00000976 4E0B                   JSR         @R14
    00000978 64F3                   MOV         R15,R4
          2048.c   430            switch (key) {
    0000097A 60F2                   MOV.L       @R15,R0
    0000097C 9143                   MOV.W       L729,R1    ; H'7542
    0000097E 3010                   CMP/EQ      R1,R0
    00000980 8910                   BT          L542
    00000982 9141                   MOV.W       L729+2,R1  ; H'7545
    00000984 3010                   CMP/EQ      R1,R0
    00000986 8917                   BT          L543
    00000988 913F                   MOV.W       L729+4,R1  ; H'7547
    0000098A 3010                   CMP/EQ      R1,R0
    0000098C 8921                   BT          L544
    0000098E 913D                   MOV.W       L729+6,R1  ; H'7544
    00000990 3010                   CMP/EQ      R1,R0
    00000992 892A                   BT          L545
    00000994 913B                   MOV.W       L729+8,R1  ; H'7532
    00000996 3010                   CMP/EQ      R1,R0
    00000998 8944                   BT          L720
    0000099A 9139                   MOV.W       L729+10,R1 ; H'7534
    0000099C 3010                   CMP/EQ      R1,R0
    0000099E 893D                   BT          L547




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009A0 AFE8                   BRA         L700
    000009A2 0009                   NOP
    000009A4              L542:                            ; case label 
          2048.c   431                case KEY_CTRL_UP:
          2048.c   432                    if(isDead() || !canMove(3)) {
    000009A4 BC93                   BSR         _isDead
    000009A6 0009                   NOP
    000009A8 2008                   TST         R0,R0
    000009AA 8BE3                   BF          L700
    000009AC BBB9                   BSR         _canMove
    000009AE E403                   MOV         #3,R4
    000009B0 2008                   TST         R0,R0
    000009B2 89DF                   BT          L700
    000009B4 A009                   BRA         L719
          2048.c   433                        continue;
          2048.c   434                    }
          2048.c   435                    move(3);
    000009B6 E403                   MOV         #3,R4
    000009B8              L543:                            ; case label 
          2048.c   436                    placeRandom();
          2048.c   437                    break;
          2048.c   438                case KEY_CTRL_RIGHT:
          2048.c   439                    if(isDead() || !canMove(2)) {
    000009B8 BC89                   BSR         _isDead
    000009BA 0009                   NOP
    000009BC 2008                   TST         R0,R0
    000009BE 8BD9                   BF          L700
    000009C0 BBAF                   BSR         _canMove
    000009C2 E402                   MOV         #2,R4
    000009C4 2008                   TST         R0,R0
    000009C6 89D5                   BT          L700
          2048.c   440                        continue;
          2048.c   441                    }
          2048.c   442                    move(2);
    000009C8 E402                   MOV         #2,R4
    000009CA              L719:                             
    000009CA BCC6                   BSR         _move
    000009CC 0009                   NOP
    000009CE A016                   BRA         L510
    000009D0 0009                   NOP
    000009D2              L544:                            ; case label 
          2048.c   443                    placeRandom();
          2048.c   444                    break;
          2048.c   445                case KEY_CTRL_DOWN:
          2048.c   446                    if(isDead() || !canMove(1)) {
    000009D2 BC7C                   BSR         _isDead
    000009D4 0009                   NOP
    000009D6 2008                   TST         R0,R0
    000009D8 8BCC                   BF          L700
    000009DA BBA2                   BSR         _canMove
    000009DC E401                   MOV         #1,R4
    000009DE 2008                   TST         R0,R0
    000009E0 89C8                   BT          L700
          2048.c   447                        continue;
          2048.c   448                    }
          2048.c   449                    move(1);
    000009E2 BCBA                   BSR         _move




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009E4 E401                   MOV         #1,R4
    000009E6 A00A                   BRA         L510
    000009E8 0009                   NOP
    000009EA              L545:                            ; case label 
          2048.c   450                    placeRandom();
          2048.c   451                    break; 
          2048.c   452                case KEY_CTRL_LEFT:
          2048.c   453                    if(isDead() || !canMove(0)) {
    000009EA BC70                   BSR         _isDead
    000009EC 0009                   NOP
    000009EE 2008                   TST         R0,R0
    000009F0 8BC0                   BF          L700
    000009F2 BB96                   BSR         _canMove
    000009F4 E400                   MOV         #0,R4
    000009F6 2008                   TST         R0,R0
    000009F8 89BC                   BT          L700
          2048.c   454                        continue;
          2048.c   455                    }
          2048.c   456                    move(0);
    000009FA BCAE                   BSR         _move
    000009FC E400                   MOV         #0,R4
    000009FE              L510:
          2048.c   457                    placeRandom();
    000009FE BB15                   BSR         _placeRandom
    00000A00 0009                   NOP
          2048.c   458                    break; 
    00000A02 AFB7                   BRA         L700
    00000A04 0009                   NOP
    00000A06              L729:                             
    00000A06 7542                   .DATA.W     H'7542
    00000A08 7545                   .DATA.W     H'7545
    00000A0A 7547                   .DATA.W     H'7547
    00000A0C 7544                   .DATA.W     H'7544
    00000A0E 7532                   .DATA.W     H'7532
    00000A10 7534                   .DATA.W     H'7534
    00000A12 0000                   .DATA.W     0
    00000A14 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000A18 <00000000>             .DATA.L     _GetKey
    00000A1C              L547:                            ; case label 
          2048.c   459                case KEY_CTRL_EXIT:
          2048.c   460                    titleScreen();
          2048.c   461                    return 0;
          2048.c   462                case KEY_CTRL_EXE:
          2048.c   463                    if(isDead()) {
    00000A1C BC57                   BSR         _isDead
    00000A1E 0009                   NOP
    00000A20 2008                   TST         R0,R0
    00000A22 89A7                   BT          L700
    00000A24              L720:                             
    00000A24 B00E                   BSR         _titleScreen
    00000A26 0009                   NOP
          2048.c   464                        titleScreen();
          2048.c   465                        return 0;
    00000A28 E000                   MOV         #0,R0
          2048.c   466                    }
          2048.c   467                    break;
          2048.c   468            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

          2048.c   469        }
          2048.c   470    }
    00000A2A 7F04                   ADD         #4,R15
    00000A2C 4F26                   LDS.L       @R15+,PR
    00000A2E 000B                   RTS
    00000A30 6EF6                   MOV.L       @R15+,R14
          2048.c   471    
          2048.c   472    int backgroundTick() {
    00000A32              _backgroundTick:                 ; function: backgroundTick
                                                           ; frame size=4
          2048.c   473        SetTimer(ID_USER_TIMER1, 100, backgroundTick);
    00000A32 E564                   MOV         #100,R5
    00000A34 D31C                   MOV.L       L730+8,R3  ; _SetTimer
    00000A36 4F22                   STS.L       PR,@-R15
    00000A38 D61A                   MOV.L       L730+4,R6  ; _backgroundTick
    00000A3A 430B                   JSR         @R3
    00000A3C E401                   MOV         #1,R4
          2048.c   474        rand();
    00000A3E D21B                   MOV.L       L730+12,R2 ; _rand
    00000A40 422B                   JMP         @R2
    00000A42 4F26                   LDS.L       @R15+,PR
          2048.c   475    }
          2048.c   476    
          2048.c   477    int titleScreen() {
    00000A44              _titleScreen:                    ; function: titleScreen
                                                           ; frame size=16
    00000A44 2FE6                   MOV.L       R14,@-R15
    00000A46 2FD6                   MOV.L       R13,@-R15
    00000A48 4F22                   STS.L       PR,@-R15
    00000A4A 7FFC                   ADD         #-4,R15
          2048.c   478        unsigned int key;
          2048.c   479    
          2048.c   480        backgroundTick();
    00000A4C BFF1                   BSR         _backgroundTick
    00000A4E 0009                   NOP
          2048.c   481        Bdisp_AllClr_DDVRAM();
    00000A50 D217                   MOV.L       L730+16,R2 ; _Bdisp_AllClr_DDVRAM
    00000A52 420B                   JSR         @R2
    00000A54 0009                   NOP
          2048.c   482        locate(3,3);
    00000A56 E503                   MOV         #3,R5
    00000A58 D316                   MOV.L       L730+20,R3 ; _locate
    00000A5A 430B                   JSR         @R3
    00000A5C 6453                   MOV         R5,R4
          2048.c   483        Print("2048");
    00000A5E D416                   MOV.L       L730+24,R4 ; L453
    00000A60 D216                   MOV.L       L730+28,R2 ; _Print
    00000A62 420B                   JSR         @R2
    00000A64 0009                   NOP
          2048.c   484        locate(3,6);
    00000A66 E506                   MOV         #6,R5
    00000A68 D312                   MOV.L       L730+20,R3 ; _locate
    00000A6A 430B                   JSR         @R3
    00000A6C E403                   MOV         #3,R4
          2048.c   485        Print("EXE to start");
    00000A6E D414                   MOV.L       L730+32,R4 ; L454
    00000A70 D212                   MOV.L       L730+28,R2 ; _Print




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A72 420B                   JSR         @R2
    00000A74 0009                   NOP
    00000A76 DD13                   MOV.L       L730+36,R13; _GetKey
    00000A78 9E12                   MOV.W       L730,R14   ; H'7534
          2048.c   486    
          2048.c   487        while(1) {
    00000A7A              L713:                             
          2048.c   488            GetKey(&key);
    00000A7A 4D0B                   JSR         @R13
    00000A7C 64F3                   MOV         R15,R4
          2048.c   489            if(key == KEY_CTRL_EXE) {
    00000A7E 62F2                   MOV.L       @R15,R2
    00000A80 32E0                   CMP/EQ      R14,R2
    00000A82 8BFA                   BF          L713
          2048.c   490                break;
          2048.c   491            }
          2048.c   492        }
          2048.c   493        game();
    00000A84 BF6A                   BSR         _game
    00000A86 0009                   NOP
          2048.c   494        return 0;
    00000A88 E000                   MOV         #0,R0
          2048.c   495    }
    00000A8A 7F04                   ADD         #4,R15
    00000A8C 4F26                   LDS.L       @R15+,PR
    00000A8E 6DF6                   MOV.L       @R15+,R13
    00000A90 000B                   RTS
    00000A92 6EF6                   MOV.L       @R15+,R14
          2048.c   496    
          2048.c   497    
          2048.c   498    
          2048.c   499    //****************************************************************************
          2048.c   500    //  AddIn_main (Sample program main function)
          2048.c   501    //
          2048.c   502    //  param   :   isAppli   : 1 = This application is launched by MAIN MENU.
          2048.c   503    //                        : 0 = This application is launched by a strip in eACT application.
          2048.c   504    //
          2048.c   505    //              OptionNum : Strip number (0~3)
          2048.c   506    //                         (This parameter is only used when isAppli parameter is 0.)
          2048.c   507    //
          2048.c   508    //  retval  :   1 = No error / 0 = Error
          2048.c   509    //
          2048.c   510    //****************************************************************************
          2048.c   511    int AddIn_main(int isAppli, unsigned short OptionNum)
    00000A94              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=4
    00000A94 4F22                   STS.L       PR,@-R15
          2048.c   512    {
          2048.c   513        titleScreen();
    00000A96 BFD5                   BSR         _titleScreen
    00000A98 0009                   NOP
          2048.c   514    
          2048.c   515        return 1;
          2048.c   516    }
    00000A9A 4F26                   LDS.L       @R15+,PR
    00000A9C 000B                   RTS
    00000A9E E001                   MOV         #1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AA0              L730:                             
    00000AA0 7534                   .DATA.W     H'7534
    00000AA2 0000                   .DATA.W     0
    00000AA4 <00000000>             .DATA.L     _backgroundTick
    00000AA8 <00000000>             .DATA.L     _SetTimer
    00000AAC <00000000>             .DATA.L     _rand
    00000AB0 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000AB4 <00000000>             .DATA.L     _locate
    00000AB8 <00000000>             .DATA.L     L453
    00000ABC <00000000>             .DATA.L     _Print
    00000AC0 <00000000>             .DATA.L     L454
    00000AC4 <00000000>             .DATA.L     _GetKey
          2048.c   517    
          2048.c   518    
          2048.c   519    
          2048.c   520    
          2048.c   521    //****************************************************************************
          2048.c   522    //**************                                              ****************
          2048.c   523    //**************                 Notice!                      ****************
          2048.c   524    //**************                                              ****************
          2048.c   525    //**************  Please do not change the following source.  ****************
          2048.c   526    //**************                                              ****************
          2048.c   527    //****************************************************************************
          2048.c   528    
          2048.c   529    
          2048.c   530    #pragma section _BR_Size
          2048.c   531    unsigned long BR_Size;
          2048.c   532    #pragma section
          2048.c   533    
          2048.c   534    
          2048.c   535    #pragma section _TOP
          2048.c   536    
          2048.c   537    //****************************************************************************
          2048.c   538    //  InitializeSystem
          2048.c   539    //
          2048.c   540    //  param   :   isAppli   : 1 = Application / 0 = eActivity
          2048.c   541    //              OptionNum : Option Number (only eActivity)
          2048.c   542    //
          2048.c   543    //  retval  :   1 = No error / 0 = Error
          2048.c   544    //
          2048.c   545    //****************************************************************************
          2048.c   546    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
          2048.c   547    {
          2048.c   548        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L731+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L731:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
          2048.c   549    }
          2048.c   550    
          2048.c   551    #pragma section
          2048.c   552    
D   00000000              _graphs:                         ; static: graphs




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000000 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    00000008 <00000000>             .DATA.L     L298
    0000000C 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    00000014 <00000000>             .DATA.L     L299
    00000018 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    00000020 <00000000>             .DATA.L     L300
    00000024 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    0000002C <00000000>             .DATA.L     L301
    00000030 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    00000038 <00000000>             .DATA.L     L302
    0000003C 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    00000044 <00000000>             .DATA.L     L303
    00000048 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    00000050 <00000000>             .DATA.L     L304
    00000054 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    0000005C <00000000>             .DATA.L     L305
    00000060 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    00000068 <00000000>             .DATA.L     L306
    0000006C 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    00000074 <00000000>             .DATA.L     L307
    00000078 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    00000080 <00000000>             .DATA.L     L308
    00000084 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    0000008C <00000000>             .DATA.L     L309
    00000090 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    00000098 <00000000>             .DATA.L     L310
    0000009C 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    000000A4 <00000000>             .DATA.L     L311
    000000A8 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    000000B0 <00000000>             .DATA.L     L312
    000000B4 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    000000BC <00000000>             .DATA.L     L313
    000000C0 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    000000C8 <00000000>             .DATA.L     L314
    000000CC 0000001000             .DATA.L     H'00000010,H'00000010
             000010       
    000000D4 <00000000>             .DATA.L     L315
    000000D8 0000001800             .DATA.L     H'00000018,H'00000018
             000018       
    000000E0 <00000000>             .DATA.L     L316




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000E4              _board:                          ; static: board
    000000E4 00000000               .DATA.L     H'00000000
    000000E8 0000003C01             .DATAB.B    60,0
             00           
    00000124              _score:                          ; static: score
    00000124 00000000               .DATA.L     H'00000000
    00000128              _moves:                          ; static: moves
    00000128 00000000               .DATA.L     H'00000000
C   00000000              L391:
    00000000 00000000               .DATA.L     H'00000000
    00000004 0000003C01             .DATAB.B    60,0
             00           
    00000040              L431:
    00000040 53434F5245             .SDATA      "SCORE"
    00000045 00                     .DATA.B     H'00
    00000046 00000002               .RES.W      1
    00000048              L432:
    00000048 4D4F564553             .SDATA      "MOVES"
    0000004D 00                     .DATA.B     H'00
    0000004E 00000002               .RES.W      1
    00000050              L453:
    00000050 32303438               .SDATA      "2048"
    00000054 00                     .DATA.B     H'00
    00000055 00000001               .RES.B      1
    00000056 00000002               .RES.W      1
    00000058              L454:
    00000058 4558452074             .SDATA      "EXE to start"
             6F20737461   
             7274         
    00000064 00                     .DATA.B     H'00
    00000065 00000001               .RES.B      1
    00000066 00000002               .RES.W      1
    00000068              L298:
    00000068 FFFF800180             .DATA.B     H'FF,H'FF,H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,
             0180018001 +                       H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,H'FF,H'FF,H'00
             8001800180   
             0180018001   
             8001800180   
             0180018001   
             FFFF00       
    00000089 00000001               .RES.B      1
    0000008A 00000002               .RES.W      1
    0000008C              L299:
    0000008C FFFF800180             .DATA.B     H'FF,H'FF,H'80,H'01,H'80,H'01,H'80,H'01,H'81,H'81,H'82
             0180018181   
             82           
    00000097 41                     .SDATA      "A"
    00000098 80                     .DATA.B     H'80
    00000099 41                     .SDATA      "A"
    0000009A 8081810182             .DATA.B     H'80,H'81,H'81,H'01,H'82,H'01,H'83,H'C1,H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,
             0183C18001 +                       H'FF,H'FF,H'00
             8001800180   
             01FFFF00     
    000000AD 00000001               .RES.B      1
    000000AE 00000002               .RES.W      1
    000000B0              L300:
    000000B0 FFFF800180             .DATA.B     H'FF,H'FF,H'80,H'01,H'80,H'01,H'80,H'01,H'82,H'01,H'82




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0180018201   
             82           
    000000BB 41                     .SDATA      "A"
    000000BC 82                     .DATA.B     H'82
    000000BD 41                     .SDATA      "A"
    000000BE 83C180                 .DATA.B     H'83,H'C1,H'80
    000000C1 41                     .SDATA      "A"
    000000C2 80                     .DATA.B     H'80
    000000C3 41                     .SDATA      "A"
    000000C4 80                     .DATA.B     H'80
    000000C5 41                     .SDATA      "A"
    000000C6 8001800180             .DATA.B     H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,H'FF,H'FF,H'00
             018001FFFF   
             00           
    000000D1 00000001               .RES.B      1
    000000D2 00000002               .RES.W      1
    000000D4              L301:
    000000D4 FFFF800180             .DATA.B     H'FF,H'FF,H'80,H'01,H'80,H'01,H'80,H'01,H'81,H'81,H'82
             0180018181   
             82           
    000000DF 41                     .SDATA      "A"
    000000E0 82                     .DATA.B     H'82
    000000E1 41                     .SDATA      "A"
    000000E2 818182                 .DATA.B     H'81,H'81,H'82
    000000E5 41                     .SDATA      "A"
    000000E6 82                     .DATA.B     H'82
    000000E7 41                     .SDATA      "A"
    000000E8 8181800180             .DATA.B     H'81,H'81,H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,H'FF,H'FF,H'00
             0180018001   
             FFFF00       
    000000F5 00000001               .RES.B      1
    000000F6 00000002               .RES.W      1
    000000F8              L302:
    000000F8 FFFF800180             .DATA.B     H'FF,H'FF,H'80,H'01,H'80,H'01,H'80,H'01,H'84
             01800184     
    00000101 61                     .SDATA      "a"
    00000102 8C91848184             .DATA.B     H'8C,H'91,H'84,H'81,H'84,H'E1,H'84,H'91,H'84,H'91,H'8E
             E184918491   
             8E           
    0000010D 61                     .SDATA      "a"
    0000010E 8001800180             .DATA.B     H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,H'FF,H'FF,H'00
             018001FFFF   
             00           
    00000119 00000001               .RES.B      1
    0000011A 00000002               .RES.W      1
    0000011C              L303:
    0000011C FFFF800180             .DATA.B     H'FF,H'FF,H'80,H'01,H'80,H'01,H'80,H'01,H'8C
             0180018C     
    00000125 61                     .SDATA      "a"
    00000126 929182118C             .DATA.B     H'92,H'91,H'82,H'11,H'8C
    0000012B 21                     .SDATA      "!"
    0000012C 82                     .DATA.B     H'82
    0000012D 41                     .SDATA      "A"
    0000012E 92818CF180             .DATA.B     H'92,H'81,H'8C,H'F1,H'80,H'01,H'80,H'01,H'80,H'01,H'80,H'01,H'FF,H'FF,H'00
             0180018001   
             8001FFFF00   
    0000013D 00000001               .RES.B      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000013E 00000002               .RES.W      1
    00000140              L304:
    00000140 FFFF800180             .DATA.B     H'FF,H'FF,H'80,H'01,H'80,H'03,H'80,H'01,H'8C,H'81,H'92,H'93,H'90,H'91,H'9C,H'F1,
             0380018C81 +                       H'92,H'13,H'92,H'11,H'8C,H'11,H'80,H'03,H'80,H'01,H'80,H'01,H'A4,H'89,H'FF,H'FF,H'00
             929390919C   
             F192139211   
             8C11800380   
             018001A489   
             FFFF00       
    00000161 00000001               .RES.B      1
    00000162 00000002               .RES.W      1
    00000164              L305:
    00000164 FFFF800180             .DATA.B     H'FF,H'FF,H'80,H'01,H'80,H'03,H'80,H'01,H'80,H'01,H'97
             0380018001   
             97           
    0000016F 73                     .SDATA      "s"
    00000170 B1                     .DATA.B     H'B1
    00000171 51                     .SDATA      "Q"
    00000172 97                     .DATA.B     H'97
    00000173 71                     .SDATA      "q"
    00000174 94                     .DATA.B     H'94
    00000175 53                     .SDATA      "S"
    00000176 97                     .DATA.B     H'97
    00000177 71                     .SDATA      "q"
    00000178 8001800380             .DATA.B     H'80,H'01,H'80,H'03,H'80,H'01,H'80,H'01,H'A4,H'93,H'FF,H'FF,H'00
             018001A493   
             FFFF00       
    00000185 00000001               .RES.B      1
    00000186 00000002               .RES.W      1
    00000188              L306:
    00000188 FFFF800180             .DATA.B     H'FF,H'FF,H'80,H'01,H'80,H'03,H'80,H'01,H'80,H'01,H'BB,H'BB,H'8A
             0380018001   
             BBBB8A       
    00000195 21                     .SDATA      "!"
    00000196 BBB9A0ABBB             .DATA.B     H'BB,H'B9,H'A0,H'AB,H'BB,H'B9,H'80,H'01,H'80,H'03,H'80,H'01,H'80,H'01,H'A4,H'93,
             B980018003 +                       H'FF,H'FF,H'00
             80018001A4   
             93FFFF00     
    000001A9 00000001               .RES.B      1
    000001AA 00000002               .RES.W      1
    000001AC              L307:
    000001AC FFFF800180             .DATA.B     H'FF,H'FF,H'80,H'01,H'80,H'03,H'80,H'01,H'80,H'01,H'B9
             0380018001   
             B9           
    000001B7 73                     .SDATA      "s"
    000001B8 A311B9                 .DATA.B     H'A3,H'11,H'B9
    000001BB 71                     .SDATA      "q"
    000001BC 89                     .DATA.B     H'89
    000001BD 43                     .SDATA      "C"
    000001BE B9                     .DATA.B     H'B9
    000001BF 71                     .SDATA      "q"
    000001C0 8001800380             .DATA.B     H'80,H'01,H'80,H'03,H'80,H'01,H'80,H'01,H'A4,H'93,H'FF,H'FF,H'00
             018001A493   
             FFFF00       
    000001CD 00000001               .RES.B      1
    000001CE 00000002               .RES.W      1
    000001D0              L308:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001D0 FFFF800184             .DATA.B     H'FF,H'FF,H'80,H'01,H'84,H'E3,H'8C,H'A3,H'84,H'A3,H'84,H'A3,H'84,H'E3,H'80,H'03,
             E38CA384A3 +                       H'8E,H'A3,H'82,H'A3,H'8E,H'E3,H'88
             84A384E380   
             038EA382A3   
             8EE388       
    000001E7 23                     .SDATA      "#"
    000001E8 8E                     .DATA.B     H'8E
    000001E9 23                     .SDATA      "#"
    000001EA 8003BFFFFF             .DATA.B     H'80,H'03,H'BF,H'FF,H'FF,H'FF,H'00
             FF00         
    000001F1 00000001               .RES.B      1
    000001F2 00000002               .RES.W      1
    000001F4              L309:
    000001F4 FFFF80018E             .DATA.B     H'FF,H'FF,H'80,H'01,H'8E,H'E3,H'82,H'A3,H'8E,H'A3,H'88,H'A3,H'8E,H'E3,H'80,H'03,
             E382A38EA3 +                       H'8A,H'E3,H'8A,H'A3,H'8E,H'E3,H'82,H'A3,H'82,H'E3,H'80,H'03,H'BF,H'FF,H'FF,H'FF,H'00
             88A38EE380   
             038AE38AA3   
             8EE382A382   
             E38003BFFF   
             FFFF00       
    00000215 00000001               .RES.B      1
    00000216 00000002               .RES.W      1
    00000218              L310:
    00000218 FFFF80018A             .DATA.B     H'FF,H'FF,H'80,H'01,H'8A,H'E3,H'8A,H'A3,H'8E,H'A3,H'82,H'A3,H'82,H'E3,H'80,H'03,
             E38AA38EA3 +                       H'8E,H'E3,H'8A,H'83,H'8E,H'E3,H'82,H'A3,H'8E,H'E3,H'80,H'03,H'BF,H'FF,H'FF,H'FF,H'00
             82A382E380   
             038EE38A83   
             8EE382A38E   
             E38003BFFF   
             FFFF00       
    00000239 00000001               .RES.B      1
    0000023A 00000002               .RES.W      1
    0000023C              L311:
    0000023C FFFF80018E             .DATA.B     H'FF,H'FF,H'80,H'01,H'8E
    00000241 43                     .SDATA      "C"
    00000242 8AC38E                 .DATA.B     H'8A,H'C3,H'8E
    00000245 43                     .SDATA      "C"
    00000246 8A                     .DATA.B     H'8A
    00000247 43                     .SDATA      "C"
    00000248 8E                     .DATA.B     H'8E
    00000249 43                     .SDATA      "C"
    0000024A 80038EE38A             .DATA.B     H'80,H'03,H'8E,H'E3,H'8A
    0000024F 23                     .SDATA      "#"
    00000250 8EE382838E             .DATA.B     H'8E,H'E3,H'82,H'83,H'8E,H'E3,H'80,H'03,H'BF,H'FF,H'FF,H'FF,H'00
             E38003BFFF   
             FFFF00       
    0000025D 00000001               .RES.B      1
    0000025E 00000002               .RES.W      1
    00000260              L312:
    00000260 FFFFFFFDFB             .DATA.B     H'FF,H'FF,H'FF,H'FD,H'FB,H'1D,H'F3
             1DF3         
    00000267 7D                     .SDATA      "}"
    00000268 FB1DFB                 .DATA.B     H'FB,H'1D,H'FB
    0000026B 5D                     .SDATA      "]"
    0000026C FB1DFFFDC4             .DATA.B     H'FB,H'1D,H'FF,H'FD,H'C4
    00000271 55                     .SDATA      "U"
    00000272 F5                     .DATA.B     H'F5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000273 55                     .SDATA      "U"
    00000274 C4                     .DATA.B     H'C4
    00000275 45                     .SDATA      "E"
    00000276 F5                     .DATA.B     H'F5
    00000277 75                     .SDATA      "u"
    00000278 C4                     .DATA.B     H'C4
    00000279 75                     .SDATA      "u"
    0000027A FFFD8001FF             .DATA.B     H'FF,H'FD,H'80,H'01,H'FF,H'FF,H'00
             FF00         
    00000281 00000001               .RES.B      1
    00000282 00000002               .RES.W      1
    00000284              L313:
    00000284 FFFFFFFDF1             .DATA.B     H'FF,H'FF,H'FF,H'FD,H'F1,H'1D,H'FD,H'DD,H'F1,H'1D,H'FD
             1DFDDDF11D   
             FD           
    0000028F 7D                     .SDATA      "}"
    00000290 F11DFFFDC4             .DATA.B     H'F1,H'1D,H'FF,H'FD,H'C4
    00000295 45                     .SDATA      "E"
    00000296 D5D5F4                 .DATA.B     H'D5,H'D5,H'F4
    00000299 45                     .SDATA      "E"
    0000029A F5                     .DATA.B     H'F5
    0000029B 55                     .SDATA      "U"
    0000029C F4                     .DATA.B     H'F4
    0000029D 45                     .SDATA      "E"
    0000029E FFFD8001FF             .DATA.B     H'FF,H'FD,H'80,H'01,H'FF,H'FF,H'00
             FF00         
    000002A5 00000001               .RES.B      1
    000002A6 00000002               .RES.W      1
    000002A8              L314:
    000002A8 FFFFFFFDF1             .DATA.B     H'FF,H'FF,H'FF,H'FD,H'F1,H'1D,H'F7
             1DF7         
    000002AF 7D                     .SDATA      "}"
    000002B0 F11DF5DDF1             .DATA.B     H'F1,H'1D,H'F5,H'DD,H'F1,H'1D,H'FF,H'FD,H'C4
             1DFFFDC4     
    000002B9 45                     .SDATA      "E"
    000002BA DF                     .DATA.B     H'DF
    000002BB 5D                     .SDATA      "]"
    000002BC C4                     .DATA.B     H'C4
    000002BD 45                     .SDATA      "E"
    000002BE F7                     .DATA.B     H'F7
    000002BF 55                     .SDATA      "U"
    000002C0 C4                     .DATA.B     H'C4
    000002C1 45                     .SDATA      "E"
    000002C2 FFFD8001FF             .DATA.B     H'FF,H'FD,H'80,H'01,H'FF,H'FF,H'00
             FF00         
    000002C9 00000001               .RES.B      1
    000002CA 00000002               .RES.W      1
    000002CC              L315:
    000002CC FFFFFFFDE8             .DATA.B     H'FF,H'FF,H'FF,H'FD,H'E8,H'8D,H'CE,H'AD,H'E8,H'AD,H'EE,H'AD,H'E8,H'8D,H'FF,H'FD,
             8DCEADE8AD +                       H'E8,H'8D,H'CA,H'ED,H'EA,H'8D,H'EE,H'BD,H'EE,H'8D,H'FF,H'FD,H'80,H'01,H'FF,H'FF,H'00
             EEADE88DFF   
             FDE88DCAED   
             EA8DEEBDEE   
             8DFFFD8001   
             FFFF00       
    000002ED 00000001               .RES.B      1
    000002EE 00000002               .RES.W      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002F0              L316:
    000002F0 00                     .DATA.B     H'00
    000002F1 7E                     .SDATA      "~"
    000002F2 000381C004             .DATA.B     H'00,H'03,H'81,H'C0,H'04,H'18
             18           
    000002F8 20                     .SDATA      " "
    000002F9 08                     .DATA.B     H'08
    000002FA 3C                     .SDATA      "<"
    000002FB 1010                   .DATA.B     H'10,H'10
    000002FD 7E                     .SDATA      "~"
    000002FE 08                     .DATA.B     H'08
    000002FF 20                     .SDATA      " "
    00000300 1804                   .DATA.B     H'18,H'04
    00000302 40                     .SDATA      "@"
    00000303 1802                   .DATA.B     H'18,H'02
    00000305 40                     .SDATA      "@"
    00000306 1802                   .DATA.B     H'18,H'02
    00000308 40                     .SDATA      "@"
    00000309 1802881811             .DATA.B     H'18,H'02,H'88,H'18,H'11,H'98,H'00,H'19,H'BF,H'DB,H'FD,H'BF,H'DB,H'FD,H'98,H'00,
             980019BFDB +                       H'19,H'88,H'18,H'11
             FDBFDBFD98   
             0019881811   
    0000031D 40                     .SDATA      "@"
    0000031E 1802                   .DATA.B     H'18,H'02
    00000320 40                     .SDATA      "@"
    00000321 1802                   .DATA.B     H'18,H'02
    00000323 40                     .SDATA      "@"
    00000324 1802                   .DATA.B     H'18,H'02
    00000326 20                     .SDATA      " "
    00000327 180410                 .DATA.B     H'18,H'04,H'10
    0000032A 7E                     .SDATA      "~"
    0000032B 0808                   .DATA.B     H'08,H'08
    0000032D 3C                     .SDATA      "<"
    0000032E 100418                 .DATA.B     H'10,H'04,H'18
    00000331 20                     .SDATA      " "
    00000332 0381C000               .DATA.B     H'03,H'81,H'C0,H'00
    00000336 7E                     .SDATA      "~"
    00000337 0000                   .DATA.B     H'00,H'00
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1





















SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 30-Jun-2024 16:40:46  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         7




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      552



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00000AC8 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               00000339 Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               0000012C Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00000F3D Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           16
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          17
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           173






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\hojoo\AppData\Local\Temp\hmk3816.tmp 

