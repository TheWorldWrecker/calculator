SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Users\hojooni\OneDrive\¹®¼­\CASIO\fx-9860G SDK\BREAK\Break.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Break.c     1    /*****************************************************************/
         Break.c     2    /*                                                               */
         Break.c     3    /*   CASIO fx-9860G SDK Library                                  */
         Break.c     4    /*                                                               */
         Break.c     5    /*   File name : [ProjectName].c                                 */
         Break.c     6    /*                                                               */
         Break.c     7    /*   Copyright (c) 2006 CASIO COMPUTER CO., LTD.                 */
         Break.c     8    /*                                                               */
         Break.c     9    /*****************************************************************/
         Break.c    10    
         Break.c    11    // thanks random internet user
         Break.c    12    
         Break.c    13    #define __KEYBIOS_H__
         Break.c    14    
         Break.c    15    #include "fxlib.h"
         Break.c    16    #include "timer.h"
         Break.c    17    
         Break.c    18    #define KEY_CHAR_0 71
         Break.c    19    #define KEY_CHAR_1 72
         Break.c    20    #define KEY_CHAR_2 62
         Break.c    21    #define KEY_CHAR_3 52
         Break.c    22    #define KEY_CHAR_4 73
         Break.c    23    #define KEY_CHAR_5 63
         Break.c    24    #define KEY_CHAR_6 53
         Break.c    25    #define KEY_CHAR_7 74
         Break.c    26    #define KEY_CHAR_8 64
         Break.c    27    #define KEY_CHAR_9 54
         Break.c    28    #define KEY_CHAR_DP 61
         Break.c    29    #define KEY_CHAR_EXP 51
         Break.c    30    #define KEY_CHAR_PMINUS 41
         Break.c    31    #define KEY_CHAR_PLUS 42
         Break.c    32    #define KEY_CHAR_MINUS 32
         Break.c    33    #define KEY_CHAR_MULT 43
         Break.c    34    #define KEY_CHAR_DIV 33
         Break.c    35    #define KEY_CHAR_FRAC 75
         Break.c    36    #define KEY_CHAR_LPAR 55
         Break.c    37    #define KEY_CHAR_RPAR 45
         Break.c    38    #define KEY_CHAR_COMMA 35
         Break.c    39    #define KEY_CHAR_STORE 25
         Break.c    40    #define KEY_CHAR_LOG 66
         Break.c    41    #define KEY_CHAR_LN 56
         Break.c    42    #define KEY_CHAR_SIN 46
         Break.c    43    #define KEY_CHAR_COS 36
         Break.c    44    #define KEY_CHAR_TAN 26
         Break.c    45    #define KEY_CHAR_SQUARE 67
         Break.c    46    #define KEY_CHAR_POW 57
         Break.c    47    #define KEY_CTRL_EXE 31
         Break.c    48    #define KEY_CTRL_DEL 44
         Break.c    49    #define KEY_CTRL_AC 32
         Break.c    50    #define KEY_CTRL_FD 65
         Break.c    51    #define KEY_CTRL_EXIT 47
         Break.c    52    #define KEY_CTRL_SHIFT 78
         Break.c    53    #define KEY_CTRL_ALPHA 77
         Break.c    54    #define KEY_CTRL_OPTN 68




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Break.c    55    #define KEY_CTRL_VARS 58
         Break.c    56    #define KEY_CTRL_UP 28
         Break.c    57    #define KEY_CTRL_DOWN 37
         Break.c    58    #define KEY_CTRL_LEFT 38
         Break.c    59    #define KEY_CTRL_RIGHT 27
         Break.c    60    #define KEY_CTRL_F1 79
         Break.c    61    #define KEY_CTRL_F2 69
         Break.c    62    #define KEY_CTRL_F3 59
         Break.c    63    #define KEY_CTRL_F4 49
         Break.c    64    #define KEY_CTRL_F5 39
         Break.c    65    #define KEY_CTRL_F6 29
         Break.c    66    #define KEY_CTRL_MENU 48
         Break.c    67    #ifndef OS2Change
         Break.c    68    #define OS2Change
         Break.c    69    #ifndef OS2Change_GetOS2
         Break.c    70    #define OS2Change_GetOS2
         Break.c    71    typedef int(*sc_i2cp2sip)(char*, char*, short int*, short int*);
         Break.c    72    const unsigned int sc0015[] = { 0xD201D002, 0x422B0009, 0x80010070, 0x0015 };
         Break.c    73    #define GlibGetOSVersionInfo (*(sc_i2cp2sip)sc0015)
         Break.c    74    int OSVersionAsInt(void)
P   00000000              _OSVersionAsInt:                 ; function: OSVersionAsInt
                                                           ; frame size=20
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF0                   ADD         #-16,R15
         Break.c    75    {
         Break.c    76    char mainversion;
         Break.c    77    char minorversion;
         Break.c    78    short release;
         Break.c    79    short build;
         Break.c    80    GlibGetOSVersionInfo( &mainversion, &minorversion, &release, &build );
    00000004 D345                   MOV.L       L776+6,R3  ; _sc0015
    00000006 67F3                   MOV         R15,R7
    00000008 770C                   ADD         #12,R7
    0000000A 66F3                   MOV         R15,R6
    0000000C 7608                   ADD         #8,R6
    0000000E 65F3                   MOV         R15,R5
    00000010 7504                   ADD         #4,R5
    00000012 430B                   JSR         @R3
    00000014 64F3                   MOV         R15,R4
         Break.c    81    return ( ( mainversion << 24 ) & 0xFF000000 ) | ( ( minorversion << 16 ) & 0x00FF0000 ) | ( release & 0x00
                         +00FFFF );
    00000016 60F0                   MOV.B       @R15,R0
    00000018 D341                   MOV.L       L776+10,R3 ; H'FF000000
    0000001A 4028                   SHLL16      R0
    0000001C D241                   MOV.L       L776+14,R2 ; H'00FF0000
    0000001E 4018                   SHLL8       R0
    00000020 2039                   AND         R3,R0
    00000022 6103                   MOV         R0,R1
    00000024 84F4                   MOV.B       @(4,R15),R0
    00000026 4028                   SHLL16      R0
    00000028 2029                   AND         R2,R0
    0000002A 201B                   OR          R1,R0
    0000002C 6103                   MOV         R0,R1
    0000002E 85F4                   MOV.W       @(8,R15),R0
    00000030 600D                   EXTU.W      R0,R0
         Break.c    82    }
    00000032 7F10                   ADD         #16,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000034 4F26                   LDS.L       @R15+,PR
    00000036 000B                   RTS
    00000038 201B                   OR          R1,R0
         Break.c    83    #define isOS2 (OSVersionAsInt() >= 0x02020000)
         Break.c    84    #define OS2(x,y) ((OSVersionAsInt() >= 0x02020000)?y:x)
         Break.c    85    #endif
         Break.c    86    #ifndef OS2Change_Keyboard
         Break.c    87    #define OS2Change_Keyboard
         Break.c    88    void delay(void)
    0000003A              _delay:                          ; function: delay
                                                           ; frame size=0
         Break.c    89    {
         Break.c    90    char i;
         Break.c    91    for (i=0; i<5; i++){};
    0000003A E505                   MOV         #5,R5
    0000003C E400                   MOV         #0,R4
    0000003E              L613:                             
    0000003E 7401                   ADD         #1,R4
    00000040 634E                   EXTS.B      R4,R3
    00000042 3353                   CMP/GE      R5,R3
    00000044 8BFB                   BF          L613
         Break.c    92    }
    00000046 000B                   RTS
    00000048 0009                   NOP
         Break.c    93    unsigned char CheckKeyRow(unsigned char code)
    0000004A              _CheckKeyRow:                    ; function: CheckKeyRow
                                                           ; frame size=32
         Break.c    94    {
         Break.c    95    unsigned char result=0;
         Break.c    96    short*PORTB_CTRL=(void*)0xA4000102;
         Break.c    97    short*PORTM_CTRL=(void*)0xA4000118;
         Break.c    98    char*PORTB=(void*)0xA4000122;
         Break.c    99    char*PORTM=(void*)0xA4000138;
         Break.c   100    char*PORTA=(void*)0xA4000120;
         Break.c   101    short smask;
         Break.c   102    char cmask;
         Break.c   103    unsigned char column, row;
         Break.c   104    column = code>>4;
    0000004A 634C                   EXTU.B      R4,R3
    0000004C 2FE6                   MOV.L       R14,@-R15
         Break.c   105    row = code &0x0F;
    0000004E E50F                   MOV         #15,R5
    00000050 2FD6                   MOV.L       R13,@-R15
    00000052 4309                   SHLR2       R3
    00000054 2FC6                   MOV.L       R12,@-R15
    00000056 2549                   AND         R4,R5
    00000058 2FB6                   MOV.L       R11,@-R15
    0000005A 4309                   SHLR2       R3
    0000005C 2FA6                   MOV.L       R10,@-R15
         Break.c   106    smask = 0x0003 << (( row %8)*2);
    0000005E 665C                   EXTU.B      R5,R6
    00000060 2F96                   MOV.L       R9,@-R15
    00000062 6063                   MOV         R6,R0
    00000064 4F22                   STS.L       PR,@-R15
    00000066 4011                   CMP/PZ      R0
    00000068 7FFC                   ADD         #-4,R15
    0000006A 2F30                   MOV.B       R3,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000006C 8B01                   BF          L614
    0000006E A005                   BRA         L615
    00000070 C907                   AND         #7,R0
    00000072              L614:                             
    00000072 6007                   NOT         R0,R0
    00000074 7001                   ADD         #1,R0
    00000076 C907                   AND         #7,R0
    00000078 6007                   NOT         R0,R0
    0000007A 7001                   ADD         #1,R0
    0000007C              L615:                             
         Break.c   107    cmask = ~( 1 << ( row %8) );
         Break.c   108    if(row <8)
    0000007C 994B                   MOV.W       L776,R9    ; H'AAAA
    0000007E E208                   MOV         #8,R2
    00000080 DB29                   MOV.L       L776+18,R11; H'A4000102
    00000082 6403                   MOV         R0,R4
    00000084 9D48                   MOV.W       L776+2,R13 ; H'FF00
    00000086 E503                   MOV         #3,R5
    00000088 DE28                   MOV.L       L776+22,R14; H'A4000118
    0000008A EA01                   MOV         #1,R10
    0000008C 4000                   SHLL        R0
    0000008E 450C                   SHAD        R0,R5
    00000090 4A4C                   SHAD        R4,R10
    00000092 6AA7                   NOT         R10,R10
    00000094 6CB3                   MOV         R11,R12
    00000096 3623                   CMP/GE      R2,R6
    00000098 8D0D                   BT/S        L616
    0000009A 7C36                   ADD         #54,R12
         Break.c   109    {
         Break.c   110    *PORTB_CTRL = 0xAAAA ^ smask;
    0000009C 259A                   XOR         R9,R5
    0000009E 2B51                   MOV.W       R5,@R11
         Break.c   111    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000A0 60E1                   MOV.W       @R14,R0
    000000A2 20D9                   AND         R13,R0
    000000A4 CBAA                   OR          #170,R0
         Break.c   112    delay();
    000000A6 BFC8                   BSR         _delay
    000000A8 2E01                   MOV.W       R0,@R14
         Break.c   113    *PORTB = cmask;
    000000AA D221                   MOV.L       L776+26,R2 ; H'A4000122
    000000AC 22A0                   MOV.B       R10,@R2
         Break.c   114    *PORTM = (*PORTM & 0xF0 ) | 0x0F;
    000000AE 60C0                   MOV.B       @R12,R0
    000000B0 C9F0                   AND         #240,R0
    000000B2 A00D                   BRA         L767
    000000B4 CB0F                   OR          #15,R0
    000000B6              L616:                             
         Break.c   115    }
         Break.c   116    else
         Break.c   117    {
         Break.c   118    *PORTB_CTRL = 0xAAAA;
    000000B6 2B91                   MOV.W       R9,@R11
         Break.c   119    *PORTM_CTRL = ((*PORTM_CTRL & 0xFF00 ) | 0x00AA)  ^ smask;
    000000B8 60E1                   MOV.W       @R14,R0
    000000BA 20D9                   AND         R13,R0
    000000BC CBAA                   OR          #170,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000BE 205A                   XOR         R5,R0
         Break.c   120    delay();
    000000C0 BFBB                   BSR         _delay
    000000C2 2E01                   MOV.W       R0,@R14
         Break.c   121    *PORTB = 0xFF;
    000000C4 D31A                   MOV.L       L776+26,R3 ; H'A4000122
    000000C6 E2FF                   MOV         #-1,R2
    000000C8 2320                   MOV.B       R2,@R3
         Break.c   122    *PORTM = (*PORTM & 0xF0 ) | cmask;
    000000CA 60C0                   MOV.B       @R12,R0
    000000CC C9F0                   AND         #240,R0
    000000CE 20AB                   OR          R10,R0
    000000D0              L767:                             
         Break.c   123    }
         Break.c   124    
         Break.c   125    delay();
    000000D0 BFB3                   BSR         _delay
    000000D2 2C00                   MOV.B       R0,@R12
         Break.c   126    result = (~(*PORTA))>>column & 1;
    000000D4 D317                   MOV.L       L776+30,R3 ; H'A4000120
    000000D6 6030                   MOV.B       @R3,R0
    000000D8 62F0                   MOV.B       @R15,R2
    000000DA 6007                   NOT         R0,R0
    000000DC 622C                   EXTU.B      R2,R2
    000000DE 622B                   NEG         R2,R2
    000000E0 402C                   SHAD        R2,R0
    000000E2 C901                   AND         #1,R0
         Break.c   127    delay();
    000000E4 BFA9                   BSR         _delay
    000000E6 2F00                   MOV.B       R0,@R15
         Break.c   128    *PORTB_CTRL = 0xAAAA;
    000000E8 2B91                   MOV.W       R9,@R11
         Break.c   129    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000EA 60E1                   MOV.W       @R14,R0
    000000EC 20D9                   AND         R13,R0
    000000EE CBAA                   OR          #170,R0
         Break.c   130    delay();
    000000F0 BFA3                   BSR         _delay
    000000F2 2E01                   MOV.W       R0,@R14
         Break.c   131    *PORTB_CTRL = 0x5555;
    000000F4 9211                   MOV.W       L776+4,R2  ; H'5555
    000000F6 2B21                   MOV.W       R2,@R11
         Break.c   132    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x0055;
    000000F8 60E1                   MOV.W       @R14,R0
    000000FA 20D9                   AND         R13,R0
    000000FC CB55                   OR          #85,R0
         Break.c   133    delay();
    000000FE BF9C                   BSR         _delay
    00000100 2E01                   MOV.W       R0,@R14
         Break.c   134    
         Break.c   135    return result;
    00000102 60F0                   MOV.B       @R15,R0
         Break.c   136    }
    00000104 7F04                   ADD         #4,R15
    00000106 4F26                   LDS.L       @R15+,PR
    00000108 69F6                   MOV.L       @R15+,R9
    0000010A 6AF6                   MOV.L       @R15+,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000010C 6BF6                   MOV.L       @R15+,R11
    0000010E 6CF6                   MOV.L       @R15+,R12
    00000110 6DF6                   MOV.L       @R15+,R13
    00000112 000B                   RTS
    00000114 6EF6                   MOV.L       @R15+,R14
    00000116              L776:                             
    00000116 AAAA                   .DATA.W     H'AAAA
    00000118 FF00                   .DATA.W     H'FF00
    0000011A 5555                   .DATA.W     H'5555
    0000011C <00000000>             .DATA.L     _sc0015
    00000120 FF000000               .DATA.L     H'FF000000
    00000124 00FF0000               .DATA.L     H'00FF0000
    00000128 A4000102               .DATA.L     H'A4000102
    0000012C A4000118               .DATA.L     H'A4000118
    00000130 A4000122               .DATA.L     H'A4000122
    00000134 A4000120               .DATA.L     H'A4000120
         Break.c   137    
         Break.c   138    unsigned char KeyDown(unsigned char keycode)
    00000138              _KeyDown:                        ; function: KeyDown
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    00000138 2FE6                   MOV.L       R14,@-R15
    0000013A EE0A                   MOV         #10,R14
    0000013C 2FD6                   MOV.L       R13,@-R15
    0000013E 4F22                   STS.L       PR,@-R15
         Break.c   139    {
         Break.c   140    unsigned short key[8];
         Break.c   141    const unsigned short* keyboardregister = (unsigned short*)0xA44B0000;
    00000140 D390                   MOV.L       L777,R3    ; H'A44B0000
    00000142 7FE8                   ADD         #-24,R15
    00000144 2F40                   MOV.B       R4,@R15
    00000146 1F31                   MOV.L       R3,@(4,R15)
    00000148 6DF0                   MOV.B       @R15,R13
    0000014A BF59                   BSR         _OSVersionAsInt
    0000014C 6DDC                   EXTU.B      R13,R13
    0000014E D28E                   MOV.L       L777+4,R2  ; H'02020000
    00000150 3023                   CMP/GE      R2,R0
    00000152 8B26                   BF          L619
         Break.c   142    if(isOS2)
         Break.c   143    {
         Break.c   144    unsigned char row = keycode%10;
    00000154 D38D                   MOV.L       L777+8,R3  ; __modls
    00000156 61D3                   MOV         R13,R1
    00000158 430B                   JSR         @R3
    0000015A 60E3                   MOV         R14,R0
    0000015C 2F00                   MOV.B       R0,@R15
         Break.c   145    memcpy(key, keyboardregister, sizeof(unsigned short) << 3);
    0000015E E610                   MOV         #16,R6
    00000160 D38B                   MOV.L       L777+12,R3 ; _memcpy
    00000162 64F3                   MOV         R15,R4
    00000164 55F1                   MOV.L       @(4,R15),R5
    00000166 430B                   JSR         @R3
    00000168 7408                   ADD         #8,R4
         Break.c   146    
         Break.c   147    return (0 != (key[row >> 1] & 1 << keycode / 10 - 1 + ((row & 1) << 3)));
    0000016A E501                   MOV         #1,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000016C 64F0                   MOV.B       @R15,R4
    0000016E 61D3                   MOV         R13,R1
    00000170 D288                   MOV.L       L777+16,R2 ; __divls
    00000172 644C                   EXTU.B      R4,R4
    00000174 6343                   MOV         R4,R3
    00000176 2359                   AND         R5,R3
    00000178 4308                   SHLL2       R3
    0000017A 4300                   SHLL        R3
    0000017C 420B                   JSR         @R2
    0000017E 60E3                   MOV         R14,R0
    00000180 330C                   ADD         R0,R3
    00000182 73FF                   ADD         #-1,R3
    00000184 6053                   MOV         R5,R0
    00000186 403C                   SHAD        R3,R0
    00000188 6343                   MOV         R4,R3
    0000018A 4321                   SHAR        R3
    0000018C 4300                   SHLL        R3
    0000018E 61F3                   MOV         R15,R1
    00000190 7108                   ADD         #8,R1
    00000192 331C                   ADD         R1,R3
    00000194 6231                   MOV.W       @R3,R2
    00000196 622D                   EXTU.W      R2,R2
    00000198 2029                   AND         R2,R0
    0000019A 2008                   TST         R0,R0
    0000019C 0029                   MOVT        R0
    0000019E A00E                   BRA         L621
    000001A0 CA01                   XOR         #1,R0
    000001A2              L619:                             
         Break.c   148    }
         Break.c   149    else
         Break.c   150    {
         Break.c   151    return CheckKeyRow((keycode % 10) + ((keycode / 10 - 1) << 4));
    000001A2 61D3                   MOV         R13,R1
    000001A4 D37B                   MOV.L       L777+16,R3 ; __divls
    000001A6 430B                   JSR         @R3
    000001A8 60E3                   MOV         R14,R0
    000001AA 6403                   MOV         R0,R4
    000001AC D377                   MOV.L       L777+8,R3  ; __modls
    000001AE 61D3                   MOV         R13,R1
    000001B0 74FF                   ADD         #-1,R4
    000001B2 4408                   SHLL2       R4
    000001B4 4408                   SHLL2       R4
    000001B6 430B                   JSR         @R3
    000001B8 60E3                   MOV         R14,R0
    000001BA BF46                   BSR         _CheckKeyRow
    000001BC 340C                   ADD         R0,R4
         Break.c   152    }
         Break.c   153    }
    000001BE              L621:                             
    000001BE 7F18                   ADD         #24,R15
    000001C0 4F26                   LDS.L       @R15+,PR
    000001C2 6DF6                   MOV.L       @R15+,R13
    000001C4 000B                   RTS
    000001C6 6EF6                   MOV.L       @R15+,R14
         Break.c   154    unsigned char GetKeyMod(unsigned int *key)
    000001C8              _GetKeyMod:                      ; function: GetKeyMod
                                                           ; frame size=20




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001C8 2FE6                   MOV.L       R14,@-R15
    000001CA 2FD6                   MOV.L       R13,@-R15
    000001CC 2FC6                   MOV.L       R12,@-R15
    000001CE 4F22                   STS.L       PR,@-R15
         Break.c   155    {
         Break.c   156    unsigned char x, ret;
         Break.c   157    
         Break.c   158    ret = GetKey(key);
    000001D0 D371                   MOV.L       L777+20,R3 ; _GetKey
    000001D2 7FFC                   ADD         #-4,R15
    000001D4 430B                   JSR         @R3
    000001D6 6C43                   MOV         R4,R12
    000001D8 2F00                   MOV.B       R0,@R15
         Break.c   159    
         Break.c   160    for(x = 0; x < 80; x++)
    000001DA EE00                   MOV         #0,R14
    000001DC ED50                   MOV         #80,R13
    000001DE              L624:                             
         Break.c   161    {
         Break.c   162    if(KeyDown(x))
    000001DE BFAB                   BSR         _KeyDown
    000001E0 64E3                   MOV         R14,R4
    000001E2 600C                   EXTU.B      R0,R0
    000001E4 2008                   TST         R0,R0
    000001E6 8902                   BT          L625
         Break.c   163    {
         Break.c   164    *key = x;
    000001E8 6EEC                   EXTU.B      R14,R14
         Break.c   165    break;
    000001EA A004                   BRA         L623
    000001EC 2CE2                   MOV.L       R14,@R12
    000001EE              L625:                             
    000001EE 7E01                   ADD         #1,R14
    000001F0 62EC                   EXTU.B      R14,R2
    000001F2 32D3                   CMP/GE      R13,R2
    000001F4 8BF3                   BF          L624
    000001F6              L623:                             
         Break.c   166    }
         Break.c   167    }
         Break.c   168    return ret;
    000001F6 60F0                   MOV.B       @R15,R0
         Break.c   169    }
    000001F8 7F04                   ADD         #4,R15
    000001FA 4F26                   LDS.L       @R15+,PR
    000001FC 6CF6                   MOV.L       @R15+,R12
    000001FE 6DF6                   MOV.L       @R15+,R13
    00000200 000B                   RTS
    00000202 6EF6                   MOV.L       @R15+,R14
         Break.c   170    #endif
         Break.c   171    #endif
         Break.c   172    
         Break.c   173    ////////////////////////////////////////
         Break.c   174    
         Break.c   175    int isGameActive = 0;
         Break.c   176    
         Break.c   177    float max(float a, float b) {
    00000204              _max:                            ; function: max




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __gts
    00000204 4F22                   STS.L       PR,@-R15
         Break.c   178        return a > b ? a : b;
    00000206 6143                   MOV         R4,R1
    00000208 D364                   MOV.L       L777+24,R3 ; __gts
    0000020A 430B                   JSR         @R3
    0000020C 6053                   MOV         R5,R0
    0000020E 8800                   CMP/EQ      #0,R0
    00000210 8902                   BT          L628
    00000212 4F26                   LDS.L       @R15+,PR
    00000214 000B                   RTS
    00000216 6043                   MOV         R4,R0
    00000218              L628:                             
    00000218 6053                   MOV         R5,R0
         Break.c   179    }
    0000021A              L630:                             
    0000021A 4F26                   LDS.L       @R15+,PR
    0000021C 000B                   RTS
    0000021E 0009                   NOP
         Break.c   180    float min(float a, float b) {
    00000220              _min:                            ; function: min
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __lts
    00000220 4F22                   STS.L       PR,@-R15
         Break.c   181        return a < b ? a : b;
    00000222 6143                   MOV         R4,R1
    00000224 D35E                   MOV.L       L777+28,R3 ; __lts
    00000226 430B                   JSR         @R3
    00000228 6053                   MOV         R5,R0
    0000022A 8800                   CMP/EQ      #0,R0
    0000022C 8902                   BT          L631
    0000022E 4F26                   LDS.L       @R15+,PR
    00000230 000B                   RTS
    00000232 6043                   MOV         R4,R0
    00000234              L631:                             
    00000234 6053                   MOV         R5,R0
         Break.c   182    }
    00000236              L633:                             
    00000236 4F26                   LDS.L       @R15+,PR
    00000238 000B                   RTS
    0000023A 0009                   NOP
         Break.c   183    int round(float a) {
    0000023C              _round:                          ; function: round
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __adds, __stoi
    0000023C 4F22                   STS.L       PR,@-R15
         Break.c   184        return (int)(a + 0.5f);
    0000023E D059                   MOV.L       L777+32,R0 ; H'3F000000
    00000240 D359                   MOV.L       L777+36,R3 ; __adds
    00000242 430B                   JSR         @R3
    00000244 6143                   MOV         R4,R1
    00000246 D259                   MOV.L       L777+40,R2 ; __stoi
    00000248 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000024A 0009                   NOP
         Break.c   185    }
    0000024C 4F26                   LDS.L       @R15+,PR
    0000024E 000B                   RTS
    00000250 0009                   NOP
         Break.c   186    int floor(float a) {
    00000252              _floor:                          ; function: floor
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __stoi
    00000252 4F22                   STS.L       PR,@-R15
         Break.c   187        return (int)a;
    00000254 D355                   MOV.L       L777+40,R3 ; __stoi
    00000256 430B                   JSR         @R3
    00000258 6043                   MOV         R4,R0
         Break.c   188    }
    0000025A 4F26                   LDS.L       @R15+,PR
    0000025C 000B                   RTS
    0000025E 0009                   NOP
         Break.c   189    int ceil(float a) {
    00000260              _ceil:                           ; function: ceil
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __adds, __stoi
    00000260 4F22                   STS.L       PR,@-R15
         Break.c   190        return (int)(a + 1.0f);
    00000262 D053                   MOV.L       L777+44,R0 ; H'3F800000
    00000264 D250                   MOV.L       L777+36,R2 ; __adds
    00000266 420B                   JSR         @R2
    00000268 6143                   MOV         R4,R1
    0000026A D350                   MOV.L       L777+40,R3 ; __stoi
    0000026C 430B                   JSR         @R3
    0000026E 0009                   NOP
         Break.c   191    }
    00000270 4F26                   LDS.L       @R15+,PR
    00000272 000B                   RTS
    00000274 0009                   NOP
         Break.c   192    float fabs(float f) {
    00000276              _fabs:                           ; function: fabs
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __negs, __lts
         Break.c   193        return f < 0 ? -f : f;
    00000276 6143                   MOV         R4,R1
    00000278 D249                   MOV.L       L777+28,R2 ; __lts
    0000027A 4F22                   STS.L       PR,@-R15
    0000027C 420B                   JSR         @R2
    0000027E E000                   MOV         #0,R0
    00000280 8800                   CMP/EQ      #0,R0
    00000282 8905                   BT          L637
    00000284 D34B                   MOV.L       L777+48,R3 ; __negs
    00000286 430B                   JSR         @R3
    00000288 6043                   MOV         R4,R0
    0000028A 4F26                   LDS.L       @R15+,PR
    0000028C 000B                   RTS
    0000028E 0009                   NOP
    00000290              L637:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000290 6043                   MOV         R4,R0
         Break.c   194    }
    00000292              L639:                             
    00000292 4F26                   LDS.L       @R15+,PR
    00000294 000B                   RTS
    00000296 0009                   NOP
         Break.c   195    
         Break.c   196    typedef struct tag_Point {
         Break.c   197        float x, y;
         Break.c   198    } Point;
         Break.c   199    
         Break.c   200    typedef struct tag_IntPoint {
         Break.c   201        int x, y;
         Break.c   202    } IntPoint;
         Break.c   203    
         Break.c   204    // gets the X pos of line segment (x, y) -> (x+dx, y+dy) with line y=a
         Break.c   205    // yes the naming is confusing, but fuck you i guess
         Break.c   206    float intersectY(float x, float y, float dx, float dy, float a) {
    00000298              _intersectY:                     ; function: intersectY
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __divs
    00000298 4F22                   STS.L       PR,@-R15
         Break.c   207        return x + dx * (a-y) / dy;
    0000029A 51F1                   MOV.L       @(4,R15),R1
    0000029C D346                   MOV.L       L777+52,R3 ; __subs
    0000029E 430B                   JSR         @R3
    000002A0 6053                   MOV         R5,R0
    000002A2 D246                   MOV.L       L777+56,R2 ; __muls
    000002A4 420B                   JSR         @R2
    000002A6 6163                   MOV         R6,R1
    000002A8 D345                   MOV.L       L777+60,R3 ; __divs
    000002AA 6103                   MOV         R0,R1
    000002AC 430B                   JSR         @R3
    000002AE 6073                   MOV         R7,R0
    000002B0 D23D                   MOV.L       L777+36,R2 ; __adds
    000002B2 420B                   JSR         @R2
    000002B4 6143                   MOV         R4,R1
         Break.c   208    }
    000002B6 4F26                   LDS.L       @R15+,PR
    000002B8 000B                   RTS
    000002BA 0009                   NOP
         Break.c   209    // gets the Y pos of line segment (x, y) -> (x+dx, y+dy) with line x=a
         Break.c   210    float intersectX(float x, float y, float dx, float dy, float a) {
    000002BC              _intersectX:                     ; function: intersectX
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __divs
    000002BC 4F22                   STS.L       PR,@-R15
         Break.c   211        return y + dy * (a-x) / dx;
    000002BE 51F1                   MOV.L       @(4,R15),R1
    000002C0 D33D                   MOV.L       L777+52,R3 ; __subs
    000002C2 430B                   JSR         @R3
    000002C4 6043                   MOV         R4,R0
    000002C6 D23D                   MOV.L       L777+56,R2 ; __muls
    000002C8 420B                   JSR         @R2
    000002CA 6173                   MOV         R7,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002CC D33C                   MOV.L       L777+60,R3 ; __divs
    000002CE 6103                   MOV         R0,R1
    000002D0 430B                   JSR         @R3
    000002D2 6063                   MOV         R6,R0
    000002D4 D234                   MOV.L       L777+36,R2 ; __adds
    000002D6 420B                   JSR         @R2
    000002D8 6153                   MOV         R5,R1
         Break.c   212    }
    000002DA 4F26                   LDS.L       @R15+,PR
    000002DC 000B                   RTS
    000002DE 0009                   NOP
         Break.c   213    
         Break.c   214    // sqrt of float using Newton-Raphson method
         Break.c   215    float sqrtf(float x) {
    000002E0              _sqrtf:                          ; function: sqrtf
                                                           ; frame size=16
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls, __divs, __lts, __les
    000002E0 2FE6                   MOV.L       R14,@-R15
    000002E2 2FD6                   MOV.L       R13,@-R15
    000002E4 2FC6                   MOV.L       R12,@-R15
    000002E6 6D43                   MOV         R4,R13
         Break.c   216        float guess = x / 2.0f;
    000002E8 D036                   MOV.L       L777+64,R0 ; H'40000000
    000002EA 4F22                   STS.L       PR,@-R15
    000002EC D334                   MOV.L       L777+60,R3 ; __divs
    000002EE 430B                   JSR         @R3
    000002F0 6143                   MOV         R4,R1
    000002F2 6E03                   MOV         R0,R14
         Break.c   217        float epsilon = 0.00001f; // Tolerance level
    000002F4 DC34                   MOV.L       L777+68,R12; H'3727C5AC
         Break.c   218        if (x < 0) {
    000002F6 61D3                   MOV         R13,R1
    000002F8 D229                   MOV.L       L777+28,R2 ; __lts
    000002FA 420B                   JSR         @R2
    000002FC E000                   MOV         #0,R0
    000002FE 8800                   CMP/EQ      #0,R0
    00000300 890F                   BT          L644
         Break.c   219            return -1; // Return -1 for negative input as an error indicator
    00000302 D032                   MOV.L       L777+72,R0 ; H'BF800000
    00000304 A01D                   BRA         L643
    00000306 0009                   NOP
    00000308              L645:                             
         Break.c   220        }
         Break.c   221        while (fabs(guess * guess - x) >= epsilon) {
         Break.c   222            guess = (guess + x / guess) / 2.0f;
    00000308 D22D                   MOV.L       L777+60,R2 ; __divs
    0000030A 61D3                   MOV         R13,R1
    0000030C 420B                   JSR         @R2
    0000030E 60E3                   MOV         R14,R0
    00000310 D325                   MOV.L       L777+36,R3 ; __adds
    00000312 430B                   JSR         @R3
    00000314 61E3                   MOV         R14,R1
    00000316 6103                   MOV         R0,R1
    00000318 D229                   MOV.L       L777+60,R2 ; __divs
    0000031A D02A                   MOV.L       L777+64,R0 ; H'40000000
    0000031C 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000031E 0009                   NOP
    00000320 6E03                   MOV         R0,R14
    00000322              L644:                             
    00000322 61E3                   MOV         R14,R1
    00000324 D325                   MOV.L       L777+56,R3 ; __muls
    00000326 430B                   JSR         @R3
    00000328 60E3                   MOV         R14,R0
    0000032A 6103                   MOV         R0,R1
    0000032C D222                   MOV.L       L777+52,R2 ; __subs
    0000032E 420B                   JSR         @R2
    00000330 60D3                   MOV         R13,R0
    00000332 BFA0                   BSR         _fabs
    00000334 6403                   MOV         R0,R4
    00000336 D226                   MOV.L       L777+76,R2 ; __les
    00000338 420B                   JSR         @R2
    0000033A 61C3                   MOV         R12,R1
    0000033C 8800                   CMP/EQ      #0,R0
    0000033E 8BE3                   BF          L645
         Break.c   223        }
         Break.c   224        return guess;
    00000340 60E3                   MOV         R14,R0
         Break.c   225    }
    00000342              L643:                             
    00000342 4F26                   LDS.L       @R15+,PR
    00000344 6CF6                   MOV.L       @R15+,R12
    00000346 6DF6                   MOV.L       @R15+,R13
    00000348 000B                   RTS
    0000034A 6EF6                   MOV.L       @R15+,R14
         Break.c   226    
         Break.c   227    // distance between points
         Break.c   228    float dist(Point p, Point q) {
    0000034C              _dist:                           ; function: dist
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __adds, __subs, __muls
    0000034C 4F22                   STS.L       PR,@-R15
    0000034E 7FF8                   ADD         #-8,R15
         Break.c   229        return sqrtf((p.x - q.x) * (p.x - q.x) + (p.y - q.y) * (p.y - q.y));
    00000350 D319                   MOV.L       L777+52,R3 ; __subs
    00000352 51F3                   MOV.L       @(12,R15),R1
    00000354 430B                   JSR         @R3
    00000356 50F5                   MOV.L       @(20,R15),R0
    00000358 1F01                   MOV.L       R0,@(4,R15)
    0000035A D318                   MOV.L       L777+56,R3 ; __muls
    0000035C 430B                   JSR         @R3
    0000035E 6103                   MOV         R0,R1
    00000360 51F4                   MOV.L       @(16,R15),R1
    00000362 6403                   MOV         R0,R4
    00000364 D214                   MOV.L       L777+52,R2 ; __subs
    00000366 420B                   JSR         @R2
    00000368 50F6                   MOV.L       @(24,R15),R0
    0000036A 2F02                   MOV.L       R0,@R15
    0000036C D313                   MOV.L       L777+56,R3 ; __muls
    0000036E 430B                   JSR         @R3
    00000370 6103                   MOV         R0,R1
    00000372 D30D                   MOV.L       L777+36,R3 ; __adds
    00000374 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000376 6143                   MOV         R4,R1
    00000378 BFB2                   BSR         _sqrtf
    0000037A 6403                   MOV         R0,R4
         Break.c   230    }
    0000037C 7F08                   ADD         #8,R15
    0000037E 4F26                   LDS.L       @R15+,PR
    00000380 000B                   RTS
    00000382 0009                   NOP
    00000384              L777:                             
    00000384 A44B0000               .DATA.L     H'A44B0000
    00000388 02020000               .DATA.L     H'02020000
    0000038C <00000000>             .DATA.L     __modls
    00000390 <00000000>             .DATA.L     _memcpy
    00000394 <00000000>             .DATA.L     __divls
    00000398 <00000000>             .DATA.L     _GetKey
    0000039C <00000000>             .DATA.L     __gts
    000003A0 <00000000>             .DATA.L     __lts
    000003A4 3F000000               .DATA.L     H'3F000000
    000003A8 <00000000>             .DATA.L     __adds
    000003AC <00000000>             .DATA.L     __stoi
    000003B0 3F800000               .DATA.L     H'3F800000
    000003B4 <00000000>             .DATA.L     __negs
    000003B8 <00000000>             .DATA.L     __subs
    000003BC <00000000>             .DATA.L     __muls
    000003C0 <00000000>             .DATA.L     __divs
    000003C4 40000000               .DATA.L     H'40000000
    000003C8 3727C5AC               .DATA.L     H'3727C5AC
    000003CC BF800000               .DATA.L     H'BF800000
    000003D0 <00000000>             .DATA.L     __les
         Break.c   231    
         Break.c   232    int rSeed = 10;
         Break.c   233    
         Break.c   234    float randf() {
    000003D4              _randf:                          ; function: randf
                                                           ; frame size=8
                                                           ; used runtime library name:
                                                           ; __divs, __itos
    000003D4 4F22                   STS.L       PR,@-R15
    000003D6 4F12                   STS.L       MACL,@-R15
         Break.c   235        rSeed = rSeed * 1103515245 + 12345;
    000003D8 D43D                   MOV.L       L778+4,R4  ; _rSeed
    000003DA D33E                   MOV.L       L778+8,R3  ; H'41C64E6D
    000003DC 6242                   MOV.L       @R4,R2
    000003DE 0237                   MUL.L       R3,R2
    000003E0 9174                   MOV.W       L778,R1    ; H'3039
    000003E2 031A                   STS         MACL,R3
         Break.c   236        return (float)(rSeed & 0x7FFFFFFF) / (float)0x7FFFFFFF;
    000003E4 D23D                   MOV.L       L778+16,R2 ; __itos
    000003E6 331C                   ADD         R1,R3
    000003E8 2432                   MOV.L       R3,@R4
    000003EA D33B                   MOV.L       L778+12,R3 ; H'7FFFFFFF
    000003EC 6042                   MOV.L       @R4,R0
    000003EE 420B                   JSR         @R2
    000003F0 2039                   AND         R3,R0
    000003F2 6103                   MOV         R0,R1
    000003F4 D23B                   MOV.L       L778+24,R2 ; __divs
    000003F6 D03A                   MOV.L       L778+20,R0 ; H'4F000000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003F8 420B                   JSR         @R2
    000003FA 0009                   NOP
         Break.c   237    }
    000003FC 4F16                   LDS.L       @R15+,MACL
    000003FE 4F26                   LDS.L       @R15+,PR
    00000400 000B                   RTS
    00000402 0009                   NOP
         Break.c   238    
         Break.c   239    // checks if x is between a and b
         Break.c   240    int isBetween(float x, float a, float b) {
    00000404              _isBetween:                      ; function: isBetween
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __ges, __les
    00000404 4F22                   STS.L       PR,@-R15
         Break.c   241        if ((x >= a && x <= b) || (x >= b && x <= a)) {
    00000406 6143                   MOV         R4,R1
    00000408 D337                   MOV.L       L778+28,R3 ; __ges
    0000040A 430B                   JSR         @R3
    0000040C 6053                   MOV         R5,R0
    0000040E 8800                   CMP/EQ      #0,R0
    00000410 8905                   BT          L650
    00000412 6143                   MOV         R4,R1
    00000414 D235                   MOV.L       L778+32,R2 ; __les
    00000416 420B                   JSR         @R2
    00000418 6063                   MOV         R6,R0
    0000041A 8800                   CMP/EQ      #0,R0
    0000041C 8B0B                   BF          L649
    0000041E              L650:                             
    0000041E 6143                   MOV         R4,R1
    00000420 D331                   MOV.L       L778+28,R3 ; __ges
    00000422 430B                   JSR         @R3
    00000424 6063                   MOV         R6,R0
    00000426 8800                   CMP/EQ      #0,R0
    00000428 8908                   BT          L648
    0000042A 6143                   MOV         R4,R1
    0000042C D22F                   MOV.L       L778+32,R2 ; __les
    0000042E 420B                   JSR         @R2
    00000430 6053                   MOV         R5,R0
    00000432 8800                   CMP/EQ      #0,R0
    00000434 8902                   BT          L648
    00000436              L649:                             
         Break.c   242            return 1;
    00000436 4F26                   LDS.L       @R15+,PR
    00000438 000B                   RTS
    0000043A E001                   MOV         #1,R0
    0000043C              L648:                             
         Break.c   243        } else {
         Break.c   244            return 0;
    0000043C E000                   MOV         #0,R0
         Break.c   245        }
         Break.c   246    }
    0000043E              L651:                             
    0000043E 4F26                   LDS.L       @R15+,PR
    00000440 000B                   RTS
    00000442 0009                   NOP
         Break.c   247    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Break.c   248    #define FPS 30
         Break.c   249    #define OPS_PER_FRAME 6
         Break.c   250    
         Break.c   251    #define MIN_PX 0.0f
         Break.c   252    #define MAX_PX 72.0f
         Break.c   253    #define PADDLE_Y 53.0f
         Break.c   254    
         Break.c   255    // Nearest multiple of n starting with x
         Break.c   256    // greater if dir > 0, lesser if dir < 0
         Break.c   257    int nearestMultiple(int x, int n, int dir) {
    00000444              _nearestMultiple:                ; function: nearestMultiple
                                                           ; frame size=16
                                                           ; used runtime library name:
                                                           ; __divls, __itos
    00000444 2FE6                   MOV.L       R14,@-R15
    00000446 6143                   MOV         R4,R1
    00000448 D329                   MOV.L       L778+36,R3 ; __divls
    0000044A 2FD6                   MOV.L       R13,@-R15
    0000044C 4F22                   STS.L       PR,@-R15
    0000044E 6D53                   MOV         R5,R13
    00000450 4F12                   STS.L       MACL,@-R15
    00000452 430B                   JSR         @R3
    00000454 6053                   MOV         R5,R0
    00000456 D221                   MOV.L       L778+16,R2 ; __itos
    00000458 420B                   JSR         @R2
    0000045A 0009                   NOP
    0000045C 4615                   CMP/PL      R6
    0000045E 8F04                   BF/S        L653
    00000460 6E03                   MOV         R0,R14
         Break.c   258        if(dir > 0) {
         Break.c   259            return ceil(x/n)*n;
    00000462 BEFD                   BSR         _ceil
    00000464 64E3                   MOV         R14,R4
    00000466 A002                   BRA         L768
    00000468 0009                   NOP
    0000046A              L653:                             
         Break.c   260        } else {
         Break.c   261            return floor(x/n)*n;
    0000046A BEF2                   BSR         _floor
    0000046C 64E3                   MOV         R14,R4
    0000046E              L768:                             
    0000046E 00D7                   MUL.L       R13,R0
    00000470 001A                   STS         MACL,R0
         Break.c   262        }
         Break.c   263    }
    00000472 4F16                   LDS.L       @R15+,MACL
    00000474 4F26                   LDS.L       @R15+,PR
    00000476 6DF6                   MOV.L       @R15+,R13
    00000478 000B                   RTS
    0000047A 6EF6                   MOV.L       @R15+,R14
         Break.c   264    
         Break.c   265    int bricks[18][10];  // brick width 4, height 2
         Break.c   266    
         Break.c   267    // made because ball kept hitting the exact corner of a hole
         Break.c   268    // hit the brick behind it then deleted the entire wall
         Break.c   269    int isHittable(int x, int y) {
    0000047C              _isHittable:                     ; function: isHittable




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=4
    0000047C 7FFC                   ADD         #-4,R15
         Break.c   270        const int leftClear = x>0 && bricks[x-1][y]==0;
    0000047E 4415                   CMP/PL      R4
    00000480 8B10                   BF          L656
    00000482 6043                   MOV         R4,R0
    00000484 70FF                   ADD         #-1,R0
    00000486 6303                   MOV         R0,R3
    00000488 4008                   SHLL2       R0
    0000048A 303C                   ADD         R3,R0
    0000048C D319                   MOV.L       L778+40,R3 ; _bricks
    0000048E 4008                   SHLL2       R0
    00000490 4000                   SHLL        R0
    00000492 6653                   MOV         R5,R6
    00000494 4608                   SHLL2       R6
    00000496 330C                   ADD         R0,R3
    00000498 363C                   ADD         R3,R6
    0000049A 6262                   MOV.L       @R6,R2
    0000049C 2228                   TST         R2,R2
    0000049E 8B01                   BF          L656
    000004A0 A001                   BRA         L657
    000004A2 E601                   MOV         #1,R6
    000004A4              L656:                             
    000004A4 E600                   MOV         #0,R6
    000004A6              L657:                             
         Break.c   271        const int rightClear = x<17 && bricks[x+1][y]==0;
    000004A6 E111                   MOV         #17,R1
    000004A8 3413                   CMP/GE      R1,R4
    000004AA 8925                   BT          L658
    000004AC 6243                   MOV         R4,R2
    000004AE 6343                   MOV         R4,R3
    000004B0 4208                   SHLL2       R2
    000004B2 323C                   ADD         R3,R2
    000004B4 D30F                   MOV.L       L778+40,R3 ; _bricks
    000004B6 4208                   SHLL2       R2
    000004B8 4200                   SHLL        R2
    000004BA 6053                   MOV         R5,R0
    000004BC 4008                   SHLL2       R0
    000004BE 332C                   ADD         R2,R3
    000004C0 303C                   ADD         R3,R0
    000004C2 520A                   MOV.L       @(40,R0),R2
    000004C4 2228                   TST         R2,R2
    000004C6 8B17                   BF          L658
    000004C8 A017                   BRA         L659
    000004CA E201                   MOV         #1,R2
    000004CC              L778:                             
    000004CC 3039                   .DATA.W     H'3039
    000004CE 0000                   .DATA.W     0
    000004D0 <00000000>             .DATA.L     _rSeed
    000004D4 41C64E6D               .DATA.L     H'41C64E6D
    000004D8 7FFFFFFF               .DATA.L     H'7FFFFFFF
    000004DC <00000000>             .DATA.L     __itos
    000004E0 4F000000               .DATA.L     H'4F000000
    000004E4 <00000000>             .DATA.L     __divs
    000004E8 <00000000>             .DATA.L     __ges
    000004EC <00000000>             .DATA.L     __les
    000004F0 <00000000>             .DATA.L     __divls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004F4 <00000000>             .DATA.L     _bricks
    000004F8              L658:                             
    000004F8 E200                   MOV         #0,R2
    000004FA              L659:                             
         Break.c   272        const int topClear = y==9 || bricks[x][y+1]==0;
    000004FA 6053                   MOV         R5,R0
    000004FC 2F22                   MOV.L       R2,@R15
    000004FE 8809                   CMP/EQ      #9,R0
    00000500 890F                   BT          L660
    00000502 6743                   MOV         R4,R7
    00000504 6343                   MOV         R4,R3
    00000506 4708                   SHLL2       R7
    00000508 373C                   ADD         R3,R7
    0000050A 4708                   SHLL2       R7
    0000050C D393                   MOV.L       L779+2,R3  ; _bricks
    0000050E 6153                   MOV         R5,R1
    00000510 4700                   SHLL        R7
    00000512 4108                   SHLL2       R1
    00000514 373C                   ADD         R3,R7
    00000516 371C                   ADD         R1,R7
    00000518 5171                   MOV.L       @(4,R7),R1
    0000051A 2118                   TST         R1,R1
    0000051C 8901                   BT          L660
    0000051E A001                   BRA         L661
    00000520 E700                   MOV         #0,R7
    00000522              L660:                             
    00000522 E701                   MOV         #1,R7
    00000524              L661:                             
         Break.c   273        const int bottomClear = y==0 || bricks[x][y-1]==0;
    00000524 2558                   TST         R5,R5
    00000526 8910                   BT          L662
    00000528 6043                   MOV         R4,R0
    0000052A 6343                   MOV         R4,R3
    0000052C 4008                   SHLL2       R0
    0000052E 303C                   ADD         R3,R0
    00000530 D38A                   MOV.L       L779+2,R3  ; _bricks
    00000532 4008                   SHLL2       R0
    00000534 4000                   SHLL        R0
    00000536 6253                   MOV         R5,R2
    00000538 72FF                   ADD         #-1,R2
    0000053A 4208                   SHLL2       R2
    0000053C 330C                   ADD         R0,R3
    0000053E 323C                   ADD         R3,R2
    00000540 6122                   MOV.L       @R2,R1
    00000542 2118                   TST         R1,R1
    00000544 8901                   BT          L662
    00000546 A001                   BRA         L663
    00000548 E400                   MOV         #0,R4
    0000054A              L662:                             
    0000054A E401                   MOV         #1,R4
    0000054C              L663:                             
         Break.c   274        return leftClear || rightClear || topClear || bottomClear;
    0000054C 2668                   TST         R6,R6
    0000054E 8B09                   BF          L664
    00000550 61F2                   MOV.L       @R15,R1
    00000552 2118                   TST         R1,R1
    00000554 8B06                   BF          L664




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000556 2778                   TST         R7,R7
    00000558 8B04                   BF          L664
    0000055A 2448                   TST         R4,R4
    0000055C 8B02                   BF          L664
    0000055E E000                   MOV         #0,R0
    00000560 000B                   RTS
    00000562 7F04                   ADD         #4,R15
    00000564              L664:                             
    00000564 E001                   MOV         #1,R0
         Break.c   275    }
    00000566              L666:                             
    00000566 000B                   RTS
    00000568 7F04                   ADD         #4,R15
         Break.c   276    
         Break.c   277    // returns index of colliding brick travelling from p to n
         Break.c   278    // returns (-1, -1) if there is no brick
         Break.c   279    // puts the point of collision to "Collision"
         Break.c   280    // puts whether it hit the horizontal (0) or vertical (1) edge of the brick to "side"
         Break.c   281    
         Break.c   282    IntPoint getCollidingBrick(Point p, Point n, Point* Collision, int* side) {
    0000056A              _getCollidingBrick:              ; function: getCollidingBrick
                                                           ; frame size=96
                                                           ; used runtime library name:
                                                           ; __subs, __divs, __itos, __gts, __lts, __quick_evn_mvn
    0000056A 2FE6                   MOV.L       R14,@-R15
    0000056C 2FD6                   MOV.L       R13,@-R15
    0000056E 2FC6                   MOV.L       R12,@-R15
    00000570 2FB6                   MOV.L       R11,@-R15
    00000572 2FA6                   MOV.L       R10,@-R15
    00000574 2F96                   MOV.L       R9,@-R15
    00000576 2F86                   MOV.L       R8,@-R15
    00000578 4F22                   STS.L       PR,@-R15
    0000057A 7FD4                   ADD         #-44,R15
         Break.c   283        // get which brick n is in
         Break.c   284        int x = floor(n.x/4);
    0000057C D078                   MOV.L       L779+6,R0  ; H'40800000
    0000057E 6DF3                   MOV         R15,R13
    00000580 D378                   MOV.L       L779+10,R3 ; __divs
    00000582 7D58                   ADD         #88,R13
    00000584 1F42                   MOV.L       R4,@(8,R15)
    00000586 2F52                   MOV.L       R5,@R15
    00000588 430B                   JSR         @R3
    0000058A 61D2                   MOV.L       @R13,R1
    0000058C BE61                   BSR         _floor
    0000058E 6403                   MOV         R0,R4
         Break.c   285        int y = floor(n.y/2);
    00000590 D374                   MOV.L       L779+10,R3 ; __divs
    00000592 6B03                   MOV         R0,R11
    00000594 D074                   MOV.L       L779+14,R0 ; H'40000000
    00000596 430B                   JSR         @R3
    00000598 51D1                   MOV.L       @(4,R13),R1
    0000059A BE5A                   BSR         _floor
    0000059C 6403                   MOV         R0,R4
    0000059E 6C03                   MOV         R0,R12
         Break.c   286        float dx = n.x - p.x;
    000005A0 61D2                   MOV.L       @R13,R1
    000005A2 6EF3                   MOV         R15,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005A4 D371                   MOV.L       L779+18,R3 ; __subs
    000005A6 7E50                   ADD         #80,R14
    000005A8 430B                   JSR         @R3
    000005AA 60E2                   MOV.L       @R14,R0
         Break.c   287        float dy = n.y - p.y;
    000005AC 51D1                   MOV.L       @(4,R13),R1
    000005AE 6A03                   MOV         R0,R10
    000005B0 D26E                   MOV.L       L779+18,R2 ; __subs
    000005B2 420B                   JSR         @R2
    000005B4 50E1                   MOV.L       @(4,R14),R0
    000005B6 6903                   MOV         R0,R9
         Break.c   288        int brickTopY = y*2;
    000005B8 63C3                   MOV         R12,R3
    000005BA 4300                   SHLL        R3
    000005BC 1F33                   MOV.L       R3,@(12,R15)
         Break.c   289        int brickBottomY = y*2+2;
    000005BE 6233                   MOV         R3,R2
         Break.c   290        int brickLeftX = x*4;
         Break.c   291        int brickRightX = x*4+4; 
         Break.c   292       
         Break.c   293        Point xCol ; // collision of left / right side
         Break.c   294        Point yCol;  // collision of top / bottom side
         Break.c   295    
         Break.c   296        IntPoint returnVal = {-1,-1};
    000005C0 D36C                   MOV.L       L779+26,R3 ; __quick_evn_mvn
    000005C2 7202                   ADD         #2,R2
    000005C4 1F24                   MOV.L       R2,@(16,R15)
    000005C6 61B3                   MOV         R11,R1
    000005C8 D269                   MOV.L       L779+22,R2 ; L428
    000005CA 6DF3                   MOV         R15,R13
    000005CC 4108                   SHLL2       R1
    000005CE 6413                   MOV         R1,R4
    000005D0 1F11                   MOV.L       R1,@(4,R15)
    000005D2 7D14                   ADD         #20,R13
    000005D4 7404                   ADD         #4,R4
    000005D6 61D3                   MOV         R13,R1
    000005D8 430B                   JSR         @R3
    000005DA E008                   MOV         #8,R0
         Break.c   297    
         Break.c   298        if(x < 0 || x >= 18 || y < 0 || y >= 10) {
    000005DC 4B11                   CMP/PZ      R11
    000005DE 8901                   BT          L780
    000005E0 A0D3                   BRA         L574
    000005E2 0009                   NOP
    000005E4              L780:                             
    000005E4 E312                   MOV         #18,R3
    000005E6 3B33                   CMP/GE      R3,R11
    000005E8 8B01                   BF          L781
    000005EA A0CE                   BRA         L574
    000005EC 0009                   NOP
    000005EE              L781:                             
    000005EE 4C11                   CMP/PZ      R12
    000005F0 8901                   BT          L782
    000005F2 A0CA                   BRA         L574
    000005F4 0009                   NOP
    000005F6              L782:                             
    000005F6 E10A                   MOV         #10,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005F8 3C13                   CMP/GE      R1,R12
    000005FA 8B01                   BF          L783
    000005FC A0C5                   BRA         L574
    000005FE 0009                   NOP
    00000600              L783:                             
         Break.c   299            return returnVal;
         Break.c   300        }
         Break.c   301        if(!bricks[x][y]) {
    00000600 60B3                   MOV         R11,R0
    00000602 63B3                   MOV         R11,R3
    00000604 4008                   SHLL2       R0
    00000606 303C                   ADD         R3,R0
    00000608 D354                   MOV.L       L779+2,R3  ; _bricks
    0000060A 4008                   SHLL2       R0
    0000060C 4000                   SHLL        R0
    0000060E 62C3                   MOV         R12,R2
    00000610 4208                   SHLL2       R2
    00000612 330C                   ADD         R0,R3
    00000614 323C                   ADD         R3,R2
    00000616 6122                   MOV.L       @R2,R1
    00000618 2118                   TST         R1,R1
    0000061A 8B01                   BF          L784
    0000061C A0B5                   BRA         L574
    0000061E 0009                   NOP
    00000620              L784:                             
         Break.c   302            return returnVal;
         Break.c   303        }
         Break.c   304        returnVal.x = x;
    00000620 2DB2                   MOV.L       R11,@R13
         Break.c   305        returnVal.y = y;
         Break.c   306        // which side the ball hit?
         Break.c   307        if(dx > 0) {  // moving right; check left wall
    00000622 68F3                   MOV         R15,R8
    00000624 D354                   MOV.L       L779+30,R3 ; __gts
    00000626 61A3                   MOV         R10,R1
    00000628 1DC1                   MOV.L       R12,@(4,R13)
    0000062A 7824                   ADD         #36,R8
    0000062C 430B                   JSR         @R3
    0000062E E000                   MOV         #0,R0
    00000630 8800                   CMP/EQ      #0,R0
    00000632 890C                   BT          L671
         Break.c   308            xCol.x = brickLeftX;
    00000634 D251                   MOV.L       L779+34,R2 ; __itos
    00000636 420B                   JSR         @R2
    00000638 50F1                   MOV.L       @(4,R15),R0
    0000063A 6403                   MOV         R0,R4
    0000063C 2802                   MOV.L       R0,@R8
         Break.c   309            xCol.y = intersectX(p.x, p.y, dx, dy, brickLeftX);
    0000063E 6793                   MOV         R9,R7
    00000640 2F46                   MOV.L       R4,@-R15
    00000642 66A3                   MOV         R10,R6
    00000644 55E1                   MOV.L       @(4,R14),R5
    00000646 BE39                   BSR         _intersectX
    00000648 64E2                   MOV.L       @R14,R4
    0000064A A00B                   BRA         L769
    0000064C 0009                   NOP
    0000064E              L671:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Break.c   310        } else {  // moving left; check right wall
         Break.c   311            xCol.x = brickRightX;
    0000064E D34B                   MOV.L       L779+34,R3 ; __itos
    00000650 430B                   JSR         @R3
    00000652 6043                   MOV         R4,R0
    00000654 2802                   MOV.L       R0,@R8
         Break.c   312            xCol.y = intersectX(p.x, p.y, dx, dy, brickRightX);
    00000656 6793                   MOV         R9,R7
    00000658 6503                   MOV         R0,R5
    0000065A 66A3                   MOV         R10,R6
    0000065C 2F56                   MOV.L       R5,@-R15
    0000065E 55E1                   MOV.L       @(4,R14),R5
    00000660 BE2C                   BSR         _intersectX
    00000662 64E2                   MOV.L       @R14,R4
    00000664              L769:                             
         Break.c   313        }
         Break.c   314        if(dy < 0) {  // moving up; check bottom wall
    00000664 D346                   MOV.L       L779+38,R3 ; __lts
    00000666 7F04                   ADD         #4,R15
    00000668 1801                   MOV.L       R0,@(4,R8)
    0000066A 6193                   MOV         R9,R1
    0000066C 430B                   JSR         @R3
    0000066E E000                   MOV         #0,R0
    00000670 8800                   CMP/EQ      #0,R0
    00000672 890C                   BT          L673
         Break.c   315            yCol.y = brickBottomY;
    00000674 D241                   MOV.L       L779+34,R2 ; __itos
    00000676 420B                   JSR         @R2
    00000678 50F4                   MOV.L       @(16,R15),R0
    0000067A 6403                   MOV         R0,R4
    0000067C 1F08                   MOV.L       R0,@(32,R15)
         Break.c   316            yCol.x = intersectY(p.x, p.y, dx, dy, brickBottomY);
    0000067E 6793                   MOV         R9,R7
    00000680 2F46                   MOV.L       R4,@-R15
    00000682 66A3                   MOV         R10,R6
    00000684 55E1                   MOV.L       @(4,R14),R5
    00000686 BE07                   BSR         _intersectY
    00000688 64E2                   MOV.L       @R14,R4
    0000068A A00B                   BRA         L770
    0000068C 0009                   NOP
    0000068E              L673:                             
         Break.c   317        } else {  // moving down; check top wall
         Break.c   318            yCol.y = brickTopY;
    0000068E D23B                   MOV.L       L779+34,R2 ; __itos
    00000690 420B                   JSR         @R2
    00000692 50F3                   MOV.L       @(12,R15),R0
    00000694 1F08                   MOV.L       R0,@(32,R15)
         Break.c   319            yCol.x = intersectY(p.x, p.y, dx, dy, brickTopY);
    00000696 6793                   MOV         R9,R7
    00000698 6403                   MOV         R0,R4
    0000069A 66A3                   MOV         R10,R6
    0000069C 2F46                   MOV.L       R4,@-R15
    0000069E 55E1                   MOV.L       @(4,R14),R5
    000006A0 BDFA                   BSR         _intersectY
    000006A2 64E2                   MOV.L       @R14,R4
    000006A4              L770:                             
         Break.c   320        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Break.c   321        
         Break.c   322        // use the one that's closer to p
         Break.c   323        if(dist(p, xCol) < dist(p, yCol)) {
    000006A4 D333                   MOV.L       L779+26,R3 ; __quick_evn_mvn
    000006A6 7F04                   ADD         #4,R15
    000006A8 1F07                   MOV.L       R0,@(28,R15)
    000006AA 6283                   MOV         R8,R2
    000006AC E008                   MOV         #8,R0
    000006AE 3F08                   SUB         R0,R15
    000006B0 430B                   JSR         @R3
    000006B2 61F3                   MOV         R15,R1
    000006B4 D32F                   MOV.L       L779+26,R3 ; __quick_evn_mvn
    000006B6 62E3                   MOV         R14,R2
    000006B8 E008                   MOV         #8,R0
    000006BA 3F08                   SUB         R0,R15
    000006BC 430B                   JSR         @R3
    000006BE 61F3                   MOV         R15,R1
    000006C0 BE44                   BSR         _dist
    000006C2 0009                   NOP
    000006C4 D32B                   MOV.L       L779+26,R3 ; __quick_evn_mvn
    000006C6 7F10                   ADD         #16,R15
    000006C8 2F06                   MOV.L       R0,@-R15
    000006CA 62F3                   MOV         R15,R2
    000006CC 7220                   ADD         #32,R2
    000006CE E008                   MOV         #8,R0
    000006D0 3F08                   SUB         R0,R15
    000006D2 430B                   JSR         @R3
    000006D4 61F3                   MOV         R15,R1
    000006D6 62E3                   MOV         R14,R2
    000006D8 D326                   MOV.L       L779+26,R3 ; __quick_evn_mvn
    000006DA E008                   MOV         #8,R0
    000006DC 3F08                   SUB         R0,R15
    000006DE 430B                   JSR         @R3
    000006E0 61F3                   MOV         R15,R1
    000006E2 BE33                   BSR         _dist
    000006E4 0009                   NOP
    000006E6 7F10                   ADD         #16,R15
    000006E8 D325                   MOV.L       L779+38,R3 ; __lts
    000006EA 430B                   JSR         @R3
    000006EC 61F6                   MOV.L       @R15+,R1
    000006EE 8800                   CMP/EQ      #0,R0
    000006F0 8909                   BT          L675
         Break.c   324            *Collision = xCol;
    000006F2 6283                   MOV         R8,R2
    000006F4 D31F                   MOV.L       L779+26,R3 ; __quick_evn_mvn
    000006F6 51F2                   MOV.L       @(8,R15),R1
    000006F8 430B                   JSR         @R3
    000006FA E008                   MOV         #8,R0
         Break.c   325            *side = 0;
    000006FC 62F2                   MOV.L       @R15,R2
    000006FE E300                   MOV         #0,R3
    00000700 2232                   MOV.L       R3,@R2
    00000702 A009                   BRA         L676
    00000704 0009                   NOP
    00000706              L675:                             
         Break.c   326        } else {
         Break.c   327            *Collision = yCol;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000706 62F3                   MOV         R15,R2
    00000708 D31A                   MOV.L       L779+26,R3 ; __quick_evn_mvn
    0000070A 721C                   ADD         #28,R2
    0000070C 51F2                   MOV.L       @(8,R15),R1
    0000070E 430B                   JSR         @R3
    00000710 E008                   MOV         #8,R0
         Break.c   328            *side = 1;
    00000712 E301                   MOV         #1,R3
    00000714 62F2                   MOV.L       @R15,R2
    00000716 2232                   MOV.L       R3,@R2
    00000718              L676:                             
         Break.c   329        }
         Break.c   330    
         Break.c   331        // check if the brick is hittable
         Break.c   332        // if not, instead hit the one that was supposed to be hit
         Break.c   333        if(!isHittable(x, y)) {
    00000718 65C3                   MOV         R12,R5
    0000071A BEAF                   BSR         _isHittable
    0000071C 64B3                   MOV         R11,R4
    0000071E 2008                   TST         R0,R0
    00000720 8B33                   BF          L574
         Break.c   334            if(*side) {
    00000722 62F2                   MOV.L       @R15,R2
    00000724 6322                   MOV.L       @R2,R3
    00000726 2338                   TST         R3,R3
    00000728 890D                   BT          L678
         Break.c   335                if(dy > 0) {
    0000072A 6193                   MOV         R9,R1
    0000072C D312                   MOV.L       L779+30,R3 ; __gts
    0000072E 430B                   JSR         @R3
    00000730 E000                   MOV         #0,R0
    00000732 8800                   CMP/EQ      #0,R0
    00000734 8903                   BT          L679
         Break.c   336                    returnVal.y--;
    00000736 52D1                   MOV.L       @(4,R13),R2
    00000738 72FF                   ADD         #-1,R2
    0000073A A026                   BRA         L574
    0000073C 1D21                   MOV.L       R2,@(4,R13)
    0000073E              L679:                             
         Break.c   337                } else {
         Break.c   338                    returnVal.y++;
    0000073E 51D1                   MOV.L       @(4,R13),R1
    00000740 7101                   ADD         #1,R1
    00000742 A022                   BRA         L574
    00000744 1D11                   MOV.L       R1,@(4,R13)
    00000746              L678:                             
         Break.c   339                }
         Break.c   340            } else {
         Break.c   341                if(dx > 0) {
    00000746 61A3                   MOV         R10,R1
    00000748 D20B                   MOV.L       L779+30,R2 ; __gts
    0000074A 420B                   JSR         @R2
    0000074C E000                   MOV         #0,R0
    0000074E 8800                   CMP/EQ      #0,R0
    00000750 8918                   BT          L682
         Break.c   342                    returnVal.x--;
    00000752 63D2                   MOV.L       @R13,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000754 73FF                   ADD         #-1,R3
    00000756 A018                   BRA         L574
    00000758 2D32                   MOV.L       R3,@R13
    0000075A              L779:                             
    0000075A 0000                   .DATA.W     0
    0000075C <00000000>             .DATA.L     _bricks
    00000760 40800000               .DATA.L     H'40800000
    00000764 <00000000>             .DATA.L     __divs
    00000768 40000000               .DATA.L     H'40000000
    0000076C <00000000>             .DATA.L     __subs
    00000770 <00000000>             .DATA.L     L428
    00000774 <00000000>             .DATA.L     __quick_evn_mvn
    00000778 <00000000>             .DATA.L     __gts
    0000077C <00000000>             .DATA.L     __itos
    00000780 <00000000>             .DATA.L     __lts
    00000784              L682:                             
         Break.c   343                } else {
         Break.c   344                    returnVal.x++;
    00000784 61D2                   MOV.L       @R13,R1
    00000786 7101                   ADD         #1,R1
    00000788 2D12                   MOV.L       R1,@R13
    0000078A              L574:
    0000078A 61F3                   MOV         R15,R1
    0000078C D3A9                   MOV.L       L785,R3    ; __quick_evn_mvn
    0000078E 62D3                   MOV         R13,R2
    00000790 714C                   ADD         #76,R1
    00000792 6112                   MOV.L       @R1,R1
    00000794 430B                   JSR         @R3
    00000796 E008                   MOV         #8,R0
         Break.c   345                }
         Break.c   346            }
         Break.c   347        }
         Break.c   348    
         Break.c   349    
         Break.c   350        return returnVal;
         Break.c   351    
         Break.c   352    }
    00000798 7F2C                   ADD         #44,R15
    0000079A 4F26                   LDS.L       @R15+,PR
    0000079C 68F6                   MOV.L       @R15+,R8
    0000079E 69F6                   MOV.L       @R15+,R9
    000007A0 6AF6                   MOV.L       @R15+,R10
    000007A2 6BF6                   MOV.L       @R15+,R11
    000007A4 6CF6                   MOV.L       @R15+,R12
    000007A6 6DF6                   MOV.L       @R15+,R13
    000007A8 000B                   RTS
    000007AA 6EF6                   MOV.L       @R15+,R14
         Break.c   353    
         Break.c   354    void drawWalls() {
    000007AC              _drawWalls:                      ; function: drawWalls
                                                           ; frame size=24
    000007AC 2FE6                   MOV.L       R14,@-R15
         Break.c   355        int i;
         Break.c   356        for(i = 0; i < 5; i++) {
    000007AE EE00                   MOV         #0,R14
    000007B0 2FD6                   MOV.L       R13,@-R15
    000007B2 2FC6                   MOV.L       R12,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007B4 2FB6                   MOV.L       R11,@-R15
    000007B6 EB04                   MOV         #4,R11
    000007B8 DD9F                   MOV.L       L785+4,R13 ; _Bdisp_DrawLineVRAM
    000007BA 2FA6                   MOV.L       R10,@-R15
    000007BC 4F22                   STS.L       PR,@-R15
    000007BE EA05                   MOV         #5,R10
    000007C0              L684:                             
         Break.c   357            Bdisp_DrawLineVRAM(i, 4-i, i, 59);  // left wall
    000007C0 E73B                   MOV         #59,R7
    000007C2 66E3                   MOV         R14,R6
    000007C4 65B3                   MOV         R11,R5
    000007C6 35E8                   SUB         R14,R5
    000007C8 4D0B                   JSR         @R13
    000007CA 64E3                   MOV         R14,R4
         Break.c   358            Bdisp_DrawLineVRAM(5, i, 76, i);  // top wall
    000007CC 67E3                   MOV         R14,R7
    000007CE E64C                   MOV         #76,R6
    000007D0 65E3                   MOV         R14,R5
    000007D2 4D0B                   JSR         @R13
    000007D4 E405                   MOV         #5,R4
         Break.c   359            Bdisp_DrawLineVRAM(i+77, i, i+77, 59);  // right wall
    000007D6 E73B                   MOV         #59,R7
    000007D8 6CE3                   MOV         R14,R12
    000007DA 7C4D                   ADD         #77,R12
    000007DC 66C3                   MOV         R12,R6
    000007DE 65E3                   MOV         R14,R5
    000007E0 4D0B                   JSR         @R13
    000007E2 64C3                   MOV         R12,R4
    000007E4 7E01                   ADD         #1,R14
    000007E6 3EA3                   CMP/GE      R10,R14
    000007E8 8BEA                   BF          L684
         Break.c   360    
         Break.c   361        }
         Break.c   362    }
    000007EA 4F26                   LDS.L       @R15+,PR
    000007EC 6AF6                   MOV.L       @R15+,R10
    000007EE 6BF6                   MOV.L       @R15+,R11
    000007F0 6CF6                   MOV.L       @R15+,R12
    000007F2 6DF6                   MOV.L       @R15+,R13
    000007F4 000B                   RTS
    000007F6 6EF6                   MOV.L       @R15+,R14
         Break.c   363    
         Break.c   364    
         Break.c   365    // Reminder: call BEFORE drawing ball
         Break.c   366    void drawPaddle(float px) {
    000007F8              _drawPaddle:                     ; function: drawPaddle
                                                           ; frame size=8
    000007F8 2FE6                   MOV.L       R14,@-R15
    000007FA 4F22                   STS.L       PR,@-R15
         Break.c   367        // height 58
         Break.c   368        const int x = round(px) + 5;
    000007FC BD1E                   BSR         _round
    000007FE 0009                   NOP
         Break.c   369        Bdisp_ClearLineVRAM(5, 5+PADDLE_Y, 76, 5+PADDLE_Y);
    00000800 D28E                   MOV.L       L785+8,R2  ; _Bdisp_ClearLineVRAM
    00000802 6E03                   MOV         R0,R14
    00000804 7E05                   ADD         #5,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000806 E73A                   MOV         #58,R7
    00000808 E64C                   MOV         #76,R6
    0000080A 6573                   MOV         R7,R5
    0000080C 420B                   JSR         @R2
    0000080E E405                   MOV         #5,R4
         Break.c   370        Bdisp_DrawLineVRAM(x-4, 5+PADDLE_Y, x+3, 5+PADDLE_Y);
    00000810 4F26                   LDS.L       @R15+,PR
    00000812 E73A                   MOV         #58,R7
    00000814 D388                   MOV.L       L785+4,R3  ; _Bdisp_DrawLineVRAM
    00000816 66E3                   MOV         R14,R6
    00000818 7603                   ADD         #3,R6
    0000081A 6573                   MOV         R7,R5
    0000081C 64E3                   MOV         R14,R4
    0000081E 74FC                   ADD         #-4,R4
    00000820 432B                   JMP         @R3
    00000822 6EF6                   MOV.L       @R15+,R14
         Break.c   371    
         Break.c   372    }
         Break.c   373    
         Break.c   374    // bx, by is OLD POSITION of ball
         Break.c   375    void drawBall(Point bPos, Point nbPos) {
    00000824              _drawBall:                       ; function: drawBall
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __addd, __subs, __muls, __stod, __dtos
    00000824 2FE6                   MOV.L       R14,@-R15
    00000826 2FD6                   MOV.L       R13,@-R15
    00000828 4F22                   STS.L       PR,@-R15
    0000082A 7FEC                   ADD         #-20,R15
         Break.c   376        Point dPos;// = { nbPos.x - bPos.x, nbPos.y - bPos.y };
         Break.c   377        int x, y, nx, ny;
         Break.c   378        dPos.x = nbPos.x - bPos.x;
    0000082C D384                   MOV.L       L785+12,R3 ; __subs
    0000082E 64F3                   MOV         R15,R4
    00000830 740C                   ADD         #12,R4
    00000832 6DF3                   MOV         R15,R13
    00000834 7D28                   ADD         #40,R13
    00000836 6EF3                   MOV         R15,R14
    00000838 61D2                   MOV.L       @R13,R1
    0000083A 7E20                   ADD         #32,R14
    0000083C 430B                   JSR         @R3
    0000083E 60E2                   MOV.L       @R14,R0
    00000840 2402                   MOV.L       R0,@R4
         Break.c   379        dPos.y = nbPos.y - bPos.y;
    00000842 51D1                   MOV.L       @(4,R13),R1
    00000844 D27E                   MOV.L       L785+12,R2 ; __subs
    00000846 420B                   JSR         @R2
    00000848 50E1                   MOV.L       @(4,R14),R0
    0000084A 1401                   MOV.L       R0,@(4,R4)
         Break.c   380        bPos.x -= dPos.x*2; // offset so it's more visible
    0000084C D07D                   MOV.L       L785+16,R0 ; H'40000000
    0000084E D37E                   MOV.L       L785+20,R3 ; __muls
    00000850 430B                   JSR         @R3
    00000852 6142                   MOV.L       @R4,R1
    00000854 D27A                   MOV.L       L785+12,R2 ; __subs
    00000856 420B                   JSR         @R2
    00000858 61E2                   MOV.L       @R14,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000085A 2E02                   MOV.L       R0,@R14
         Break.c   381        bPos.y -= dPos.y*2;
    0000085C D079                   MOV.L       L785+16,R0 ; H'40000000
    0000085E D37A                   MOV.L       L785+20,R3 ; __muls
    00000860 430B                   JSR         @R3
    00000862 5141                   MOV.L       @(4,R4),R1
    00000864 D276                   MOV.L       L785+12,R2 ; __subs
    00000866 420B                   JSR         @R2
    00000868 51E1                   MOV.L       @(4,R14),R1
    0000086A 1E01                   MOV.L       R0,@(4,R14)
         Break.c   382    
         Break.c   383        x = round(bPos.x-0.5) + 5;
    0000086C 60E2                   MOV.L       @R14,R0
    0000086E 7FF0                   ADD         #-16,R15
    00000870 D376                   MOV.L       L785+24,R3 ; __stod
    00000872 430B                   JSR         @R3
    00000874 2FF6                   MOV.L       R15,@-R15
    00000876 E200                   MOV         #0,R2
    00000878 D176                   MOV.L       L785+32,R1 ; __addd
    0000087A 2F26                   MOV.L       R2,@-R15
    0000087C D274                   MOV.L       L785+28,R2 ; H'BFE00000
    0000087E 2F26                   MOV.L       R2,@-R15
    00000880 63F3                   MOV         R15,R3
    00000882 7310                   ADD         #16,R3
    00000884 410B                   JSR         @R1
    00000886 2F36                   MOV.L       R3,@-R15
    00000888 D273                   MOV.L       L785+36,R2 ; __dtos
    0000088A 420B                   JSR         @R2
    0000088C 0009                   NOP
    0000088E BCD5                   BSR         _round
    00000890 6403                   MOV         R0,R4
    00000892 7005                   ADD         #5,R0
         Break.c   384        y = round(bPos.y-0.5) + 5;
    00000894 D36D                   MOV.L       L785+24,R3 ; __stod
    00000896 2F02                   MOV.L       R0,@R15
    00000898 50E1                   MOV.L       @(4,R14),R0
    0000089A 7FF0                   ADD         #-16,R15
    0000089C 430B                   JSR         @R3
    0000089E 2FF6                   MOV.L       R15,@-R15
    000008A0 D16C                   MOV.L       L785+32,R1 ; __addd
    000008A2 E200                   MOV         #0,R2
    000008A4 2F26                   MOV.L       R2,@-R15
    000008A6 D26A                   MOV.L       L785+28,R2 ; H'BFE00000
    000008A8 2F26                   MOV.L       R2,@-R15
    000008AA 63F3                   MOV         R15,R3
    000008AC 7310                   ADD         #16,R3
    000008AE 410B                   JSR         @R1
    000008B0 2F36                   MOV.L       R3,@-R15
    000008B2 D269                   MOV.L       L785+36,R2 ; __dtos
    000008B4 420B                   JSR         @R2
    000008B6 0009                   NOP
    000008B8 BCC0                   BSR         _round
    000008BA 6403                   MOV         R0,R4
         Break.c   385        nx = round(nbPos.x-0.5) + 5;
    000008BC D363                   MOV.L       L785+24,R3 ; __stod
    000008BE 7005                   ADD         #5,R0
    000008C0 1F02                   MOV.L       R0,@(8,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008C2 60D2                   MOV.L       @R13,R0
    000008C4 7FF0                   ADD         #-16,R15
    000008C6 430B                   JSR         @R3
    000008C8 2FF6                   MOV.L       R15,@-R15
    000008CA E200                   MOV         #0,R2
    000008CC D161                   MOV.L       L785+32,R1 ; __addd
    000008CE 2F26                   MOV.L       R2,@-R15
    000008D0 D25F                   MOV.L       L785+28,R2 ; H'BFE00000
    000008D2 2F26                   MOV.L       R2,@-R15
    000008D4 63F3                   MOV         R15,R3
    000008D6 7310                   ADD         #16,R3
    000008D8 410B                   JSR         @R1
    000008DA 2F36                   MOV.L       R3,@-R15
    000008DC D25E                   MOV.L       L785+36,R2 ; __dtos
    000008DE 420B                   JSR         @R2
    000008E0 0009                   NOP
    000008E2 BCAB                   BSR         _round
    000008E4 6403                   MOV         R0,R4
    000008E6 7005                   ADD         #5,R0
         Break.c   386        ny = round(nbPos.y-0.5) + 5;
    000008E8 D358                   MOV.L       L785+24,R3 ; __stod
    000008EA 1F01                   MOV.L       R0,@(4,R15)
    000008EC 50D1                   MOV.L       @(4,R13),R0
    000008EE 7FF0                   ADD         #-16,R15
    000008F0 430B                   JSR         @R3
    000008F2 2FF6                   MOV.L       R15,@-R15
    000008F4 D157                   MOV.L       L785+32,R1 ; __addd
    000008F6 E200                   MOV         #0,R2
    000008F8 2F26                   MOV.L       R2,@-R15
    000008FA D255                   MOV.L       L785+28,R2 ; H'BFE00000
    000008FC 2F26                   MOV.L       R2,@-R15
    000008FE 63F3                   MOV         R15,R3
    00000900 7310                   ADD         #16,R3
    00000902 410B                   JSR         @R1
    00000904 2F36                   MOV.L       R3,@-R15
    00000906 D254                   MOV.L       L785+36,R2 ; __dtos
    00000908 420B                   JSR         @R2
    0000090A 0009                   NOP
    0000090C BC96                   BSR         _round
    0000090E 6403                   MOV         R0,R4
         Break.c   387        //Bdisp_SetPoint_VRAM(x, y, 0);
         Break.c   388        //Bdisp_SetPoint_VRAM(nx, ny, 1);
         Break.c   389        Bdisp_DrawLineVRAM(x, y, nx, ny);
    00000910 56F1                   MOV.L       @(4,R15),R6
    00000912 6703                   MOV         R0,R7
    00000914 55F2                   MOV.L       @(8,R15),R5
    00000916 7705                   ADD         #5,R7
    00000918 D347                   MOV.L       L785+4,R3  ; _Bdisp_DrawLineVRAM
    0000091A 430B                   JSR         @R3
    0000091C 64F2                   MOV.L       @R15,R4
         Break.c   390    }
    0000091E 7F14                   ADD         #20,R15
    00000920 4F26                   LDS.L       @R15+,PR
    00000922 6DF6                   MOV.L       @R15+,R13
    00000924 000B                   RTS
    00000926 6EF6                   MOV.L       @R15+,R14
         Break.c   391    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Break.c   392    
         Break.c   393    void drawBricks() {
    00000928              _drawBricks:                     ; function: drawBricks
                                                           ; frame size=44
    00000928 2FE6                   MOV.L       R14,@-R15
    0000092A 2FD6                   MOV.L       R13,@-R15
    0000092C 2FC6                   MOV.L       R12,@-R15
    0000092E 2FB6                   MOV.L       R11,@-R15
    00000930 2FA6                   MOV.L       R10,@-R15
         Break.c   394        int i, j;
         Break.c   395        for(i = 0; i < 18; i++) {
    00000932 EA00                   MOV         #0,R10
    00000934 2F96                   MOV.L       R9,@-R15
    00000936 6CA3                   MOV         R10,R12
    00000938 2F86                   MOV.L       R8,@-R15
    0000093A 4F22                   STS.L       PR,@-R15
    0000093C D83E                   MOV.L       L785+4,R8  ; _Bdisp_DrawLineVRAM
    0000093E 7FF4                   ADD         #-12,R15
    00000940              L685:                             
    00000940 D246                   MOV.L       L785+40,R2 ; _bricks
    00000942 6BC3                   MOV         R12,R11
         Break.c   396            for(j = 0; j < 10; j++) {
    00000944 69A3                   MOV         R10,R9
    00000946 6EA3                   MOV         R10,R14
    00000948 6DC3                   MOV         R12,R13
    0000094A 63C3                   MOV         R12,R3
    0000094C 4D08                   SHLL2       R13
    0000094E 3D3C                   ADD         R3,R13
    00000950 4D08                   SHLL2       R13
    00000952 4D00                   SHLL        R13
    00000954 3D2C                   ADD         R2,R13
    00000956 4B08                   SHLL2       R11
    00000958              L686:                             
         Break.c   397                if(bricks[i][j]) {
    00000958 63D2                   MOV.L       @R13,R3
    0000095A 2338                   TST         R3,R3
    0000095C 8911                   BT          L687
         Break.c   398                    Bdisp_DrawLineVRAM(i*4+5, j*2+5, i*4+8, j*2+5);
    0000095E 67E3                   MOV         R14,R7
    00000960 7705                   ADD         #5,R7
    00000962 66B3                   MOV         R11,R6
    00000964 2F72                   MOV.L       R7,@R15
    00000966 64B3                   MOV         R11,R4
    00000968 7608                   ADD         #8,R6
    0000096A 7405                   ADD         #5,R4
    0000096C 1F61                   MOV.L       R6,@(4,R15)
    0000096E 65F2                   MOV.L       @R15,R5
    00000970 480B                   JSR         @R8
    00000972 1F42                   MOV.L       R4,@(8,R15)
         Break.c   399                    Bdisp_DrawLineVRAM(i*4+5, j*2+6, i*4+8, j*2+6);
    00000974 67E3                   MOV         R14,R7
    00000976 7706                   ADD         #6,R7
    00000978 2F72                   MOV.L       R7,@R15
    0000097A 6573                   MOV         R7,R5
    0000097C 56F1                   MOV.L       @(4,R15),R6
    0000097E 480B                   JSR         @R8
    00000980 54F2                   MOV.L       @(8,R15),R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000982              L687:                             
    00000982 7901                   ADD         #1,R9
    00000984 7E02                   ADD         #2,R14
    00000986 E30A                   MOV         #10,R3
    00000988 3933                   CMP/GE      R3,R9
    0000098A 8FE5                   BF/S        L686
    0000098C 7D04                   ADD         #4,R13
    0000098E 7C01                   ADD         #1,R12
    00000990 E312                   MOV         #18,R3
    00000992 3C33                   CMP/GE      R3,R12
    00000994 8BD4                   BF          L685
         Break.c   400                }
         Break.c   401            }
         Break.c   402        }
         Break.c   403    }
    00000996 7F0C                   ADD         #12,R15
    00000998 4F26                   LDS.L       @R15+,PR
    0000099A 68F6                   MOV.L       @R15+,R8
    0000099C 69F6                   MOV.L       @R15+,R9
    0000099E 6AF6                   MOV.L       @R15+,R10
    000009A0 6BF6                   MOV.L       @R15+,R11
    000009A2 6CF6                   MOV.L       @R15+,R12
    000009A4 6DF6                   MOV.L       @R15+,R13
    000009A6 000B                   RTS
    000009A8 6EF6                   MOV.L       @R15+,R14
         Break.c   404    
         Break.c   405    void itoa(int n, char* buffer) {
    000009AA              _itoa:                           ; function: itoa
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __divls, __modls
         Break.c   406        int i = 0; 
         Break.c   407        int j = 0;
         Break.c   408        int isNegative = 0;
         Break.c   409    
         Break.c   410        if(n == 0) {
    000009AA 2448                   TST         R4,R4
    000009AC 2FE6                   MOV.L       R14,@-R15
    000009AE 2FD6                   MOV.L       R13,@-R15
    000009B0 4F22                   STS.L       PR,@-R15
    000009B2 ED00                   MOV         #0,R13
    000009B4 67D3                   MOV         R13,R7
    000009B6 8F05                   BF/S        L688
    000009B8 6ED3                   MOV         R13,R14
         Break.c   411            buffer[0] = '0';
    000009BA E230                   MOV         #48,R2
    000009BC 2520                   MOV.B       R2,@R5
         Break.c   412            buffer[1] = 0;
    000009BE 60D3                   MOV         R13,R0
         Break.c   413            return;
    000009C0 A034                   BRA         L689
    000009C2 8051                   MOV.B       R0,@(1,R5)
    000009C4              L688:                             
         Break.c   414        }
         Break.c   415    
         Break.c   416        if(n < 0) {
    000009C4 4411                   CMP/PZ      R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009C6 8D02                   BT/S        L690
         Break.c   417            isNegative = 1;
         Break.c   418            n = -n;
         Break.c   419        }
         Break.c   420    
         Break.c   421        while(n > 0) {
    000009C8 E60A                   MOV         #10,R6
    000009CA EE01                   MOV         #1,R14
    000009CC 644B                   NEG         R4,R4
    000009CE              L690:                             
    000009CE 4415                   CMP/PL      R4
    000009D0 8B0F                   BF          L691
    000009D2              L692:                             
         Break.c   422            buffer[i++] = '0' + n % 10;
    000009D2 6373                   MOV         R7,R3
    000009D4 D222                   MOV.L       L785+44,R2 ; __modls
    000009D6 6143                   MOV         R4,R1
    000009D8 7701                   ADD         #1,R7
    000009DA 335C                   ADD         R5,R3
    000009DC 420B                   JSR         @R2
    000009DE 6063                   MOV         R6,R0
    000009E0 7030                   ADD         #48,R0
    000009E2 2300                   MOV.B       R0,@R3
         Break.c   423            n /= 10;
    000009E4 D31F                   MOV.L       L785+48,R3 ; __divls
    000009E6 6063                   MOV         R6,R0
    000009E8 430B                   JSR         @R3
    000009EA 6143                   MOV         R4,R1
    000009EC 6403                   MOV         R0,R4
    000009EE 4415                   CMP/PL      R4
    000009F0 89EF                   BT          L692
    000009F2              L691:                             
         Break.c   424        }
         Break.c   425    
         Break.c   426        if(isNegative) {
    000009F2 2EE8                   TST         R14,R14
    000009F4 8903                   BT          L693
         Break.c   427            buffer[i++] = '-';
    000009F6 6073                   MOV         R7,R0
    000009F8 7701                   ADD         #1,R7
    000009FA E32D                   MOV         #45,R3
    000009FC 0534                   MOV.B       R3,@(R0,R5)
    000009FE              L693:                             
         Break.c   428        }
         Break.c   429    
         Break.c   430        buffer[i] = 0;
    000009FE 6073                   MOV         R7,R0
    00000A00 05D4                   MOV.B       R13,@(R0,R5)
    00000A02 6603                   MOV         R0,R6
    00000A04 76FF                   ADD         #-1,R6
    00000A06 365C                   ADD         R5,R6
    00000A08 6453                   MOV         R5,R4
    00000A0A 6503                   MOV         R0,R5
    00000A0C E300                   MOV         #0,R3
    00000A0E 3357                   CMP/GT      R5,R3
    00000A10 353E                   ADDC        R3,R5
    00000A12 4521                   SHAR        R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Break.c   431    
         Break.c   432        for(j = 0; j < i/2; j++) {
    00000A14 4515                   CMP/PL      R5
    00000A16 8F09                   BF/S        L689
    00000A18 6ED3                   MOV         R13,R14
    00000A1A              L695:                             
    00000A1A 7E01                   ADD         #1,R14
         Break.c   433            char temp = buffer[j];
    00000A1C 6740                   MOV.B       @R4,R7
    00000A1E 3E53                   CMP/GE      R5,R14
         Break.c   434            buffer[j] = buffer[i-j-1];
    00000A20 6360                   MOV.B       @R6,R3
    00000A22 2430                   MOV.B       R3,@R4
         Break.c   435            buffer[i-j-1] = temp;
    00000A24 2670                   MOV.B       R7,@R6
    00000A26 76FF                   ADD         #-1,R6
    00000A28 8FF7                   BF/S        L695
    00000A2A 7401                   ADD         #1,R4
    00000A2C              L689:                             
         Break.c   436        }
         Break.c   437    }
    00000A2C 4F26                   LDS.L       @R15+,PR
    00000A2E 6DF6                   MOV.L       @R15+,R13
    00000A30 000B                   RTS
    00000A32 6EF6                   MOV.L       @R15+,R14
    00000A34              L785:                             
    00000A34 <00000000>             .DATA.L     __quick_evn_mvn
    00000A38 <00000000>             .DATA.L     _Bdisp_DrawLineVRAM
    00000A3C <00000000>             .DATA.L     _Bdisp_ClearLineVRAM
    00000A40 <00000000>             .DATA.L     __subs
    00000A44 40000000               .DATA.L     H'40000000
    00000A48 <00000000>             .DATA.L     __muls
    00000A4C <00000000>             .DATA.L     __stod
    00000A50 BFE00000               .DATA.L     H'BFE00000
    00000A54 <00000000>             .DATA.L     __addd
    00000A58 <00000000>             .DATA.L     __dtos
    00000A5C <00000000>             .DATA.L     _bricks
    00000A60 <00000000>             .DATA.L     __modls
    00000A64 <00000000>             .DATA.L     __divls
         Break.c   438    
         Break.c   439    
         Break.c   440    float px;  // paddle width 8
         Break.c   441    int pSpeedMode;  // ranging from 1 to 5, prevent floating point errors
         Break.c   442    float pSpeeds[6] = {0, 0.10, 0.15, 0.25, 0.4, 0.6};
         Break.c   443    float pSpeed;
         Break.c   444    int bricksHit = 0; // speed increases for 4th 8th 12th hit (3 times)
         Break.c   445    float bSpeedMultiplier = 1.0f;
         Break.c   446    int lives;
         Break.c   447    int score;
         Break.c   448    int respawnFrames = 0;  // -1 meaning alive
         Break.c   449    
         Break.c   450    Point bPos;
         Break.c   451    Point bVel;
         Break.c   452    
         Break.c   453    
         Break.c   454    void drawUI() {
    00000A68              _drawUI:                         ; function: drawUI




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=24
    00000A68 2FE6                   MOV.L       R14,@-R15
         Break.c   455        // lives
         Break.c   456        int i;
         Break.c   457        char str[10];
         Break.c   458        PrintMini(95, 9, "LIVES", 0);
    00000A6A E700                   MOV         #0,R7
    00000A6C D688                   MOV.L       L786+6,R6  ; L496
    00000A6E E509                   MOV         #9,R5
    00000A70 2FD6                   MOV.L       R13,@-R15
    00000A72 4F22                   STS.L       PR,@-R15
    00000A74 DE85                   MOV.L       L786+2,R14 ; _PrintMini
    00000A76 7FF4                   ADD         #-12,R15
    00000A78 4E0B                   JSR         @R14
    00000A7A E45F                   MOV         #95,R4
         Break.c   459        itoa(lives, str);
    00000A7C D385                   MOV.L       L786+10,R3 ; _lives
    00000A7E 6DF3                   MOV         R15,R13
    00000A80 65D3                   MOV         R13,R5
    00000A82 BF92                   BSR         _itoa
    00000A84 6432                   MOV.L       @R3,R4
         Break.c   460        PrintMini(95, 15, str, 0);
    00000A86 E700                   MOV         #0,R7
    00000A88 66D3                   MOV         R13,R6
    00000A8A E50F                   MOV         #15,R5
    00000A8C 4E0B                   JSR         @R14
    00000A8E E45F                   MOV         #95,R4
         Break.c   461        // score
         Break.c   462        PrintMini(95, 26, "SCORE", 0);
    00000A90 D681                   MOV.L       L786+14,R6 ; L497
    00000A92 E51A                   MOV         #26,R5
    00000A94 E700                   MOV         #0,R7
    00000A96 4E0B                   JSR         @R14
    00000A98 E45F                   MOV         #95,R4
         Break.c   463        itoa(score, str);
    00000A9A 65D3                   MOV         R13,R5
    00000A9C D37F                   MOV.L       L786+18,R3 ; _score
    00000A9E BF84                   BSR         _itoa
    00000AA0 6432                   MOV.L       @R3,R4
         Break.c   464        PrintMini(95, 32, str, 0);
    00000AA2 E700                   MOV         #0,R7
    00000AA4 66D3                   MOV         R13,R6
    00000AA6 E520                   MOV         #32,R5
    00000AA8 4E0B                   JSR         @R14
    00000AAA E45F                   MOV         #95,R4
         Break.c   465        // speed
         Break.c   466        PrintMini(95, 43, "SPEED", 0);
    00000AAC D67C                   MOV.L       L786+22,R6 ; L498
    00000AAE E52B                   MOV         #43,R5
    00000AB0 E700                   MOV         #0,R7
    00000AB2 4E0B                   JSR         @R14
    00000AB4 E45F                   MOV         #95,R4
         Break.c   467        itoa(pSpeedMode, str);
    00000AB6 65D3                   MOV         R13,R5
    00000AB8 D37A                   MOV.L       L786+26,R3 ; _pSpeedMode
    00000ABA BF76                   BSR         _itoa
    00000ABC 6432                   MOV.L       @R3,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Break.c   468        PrintMini(95, 49, str, 0);
    00000ABE E700                   MOV         #0,R7
    00000AC0 66D3                   MOV         R13,R6
    00000AC2 E531                   MOV         #49,R5
    00000AC4 4E0B                   JSR         @R14
    00000AC6 E45F                   MOV         #95,R4
         Break.c   469    
         Break.c   470    }
    00000AC8 7F0C                   ADD         #12,R15
    00000ACA 4F26                   LDS.L       @R15+,PR
    00000ACC 6DF6                   MOV.L       @R15+,R13
    00000ACE 000B                   RTS
    00000AD0 6EF6                   MOV.L       @R15+,R14
         Break.c   471    
         Break.c   472    
         Break.c   473    // board size 72x55 (+extends 4 downwards)
         Break.c   474    
         Break.c   475    void titleScreen();
         Break.c   476    
         Break.c   477    void frame() {
    00000AD2              _frame:                          ; function: frame
                                                           ; frame size=104
                                                           ; used runtime library name:
                                                           ; __adds, __addd, __subs, __muls, __divs, __negs, __stod, __dtos, __stoi,
                        +                                   __itos, __nes, __gts, __lts, __ltd, __ges, __les, __quick_evn_mvn
    00000AD2 2FE6                   MOV.L       R14,@-R15
    00000AD4 2FD6                   MOV.L       R13,@-R15
    00000AD6 2FC6                   MOV.L       R12,@-R15
    00000AD8 2FB6                   MOV.L       R11,@-R15
    00000ADA 2FA6                   MOV.L       R10,@-R15
    00000ADC 2F96                   MOV.L       R9,@-R15
    00000ADE 2F86                   MOV.L       R8,@-R15
    00000AE0 4F22                   STS.L       PR,@-R15
    00000AE2 7FD4                   ADD         #-44,R15
    00000AE4 D970                   MOV.L       L786+30,R9 ; _bricksHit
    00000AE6 68F3                   MOV         R15,R8
    00000AE8 DA70                   MOV.L       L786+34,R10; _bPos
    00000AEA 6DF3                   MOV         R15,R13
    00000AEC DE72                   MOV.L       L786+46,R14; _bVel
    00000AEE 780C                   ADD         #12,R8
    00000AF0 DB6F                   MOV.L       L786+38,R11; _px
    00000AF2 7D24                   ADD         #36,R13
         Break.c   478    
         Break.c   479        Point nbPos; // = { bPos.x + bVel.x, bPos.y + bVel.y };
         Break.c   480        static int changeSpeedKeyDown = 0;
         Break.c   481        Point collisionPoint;
         Break.c   482        IntPoint collisionIndex;
         Break.c   483        int collisionSide;
         Break.c   484        int i = 0;
         Break.c   485        Point bPosGraphic; // = { bPos.x, bPos.y };
         Break.c   486        bPosGraphic.x = bPos.x;
    00000AF4 63A2                   MOV.L       @R10,R3
    00000AF6 DC6F                   MOV.L       L786+42,R12; _bSpeedMultiplier
    00000AF8 2832                   MOV.L       R3,@R8
         Break.c   487        bPosGraphic.y = bPos.y;
         Break.c   488    
         Break.c   489        isGameActive = 1;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AFA E301                   MOV         #1,R3
    00000AFC D16F                   MOV.L       L786+50,R1 ; _isGameActive
    00000AFE 52A1                   MOV.L       @(4,R10),R2
    00000B00 1821                   MOV.L       R2,@(4,R8)
         Break.c   490    
         Break.c   491        Bdisp_AllClr_VRAM();
    00000B02 D26F                   MOV.L       L786+54,R2 ; _Bdisp_AllClr_VRAM
    00000B04 420B                   JSR         @R2
    00000B06 2132                   MOV.L       R3,@R1
         Break.c   492    
         Break.c   493        if(respawnFrames > 0) {
    00000B08 D26E                   MOV.L       L786+58,R2 ; _respawnFrames
    00000B0A 6022                   MOV.L       @R2,R0
    00000B0C 4015                   CMP/PL      R0
    00000B0E 8B07                   BF          L696
         Break.c   494            // if dead just lock into perpetual "respawn"
         Break.c   495            if(lives) --respawnFrames;
    00000B10 D360                   MOV.L       L786+10,R3 ; _lives
    00000B12 6132                   MOV.L       @R3,R1
    00000B14 2118                   TST         R1,R1
    00000B16 8949                   BT          L698
    00000B18 6122                   MOV.L       @R2,R1
    00000B1A 71FF                   ADD         #-1,R1
    00000B1C A046                   BRA         L698
    00000B1E 2212                   MOV.L       R1,@R2
    00000B20              L696:                             
         Break.c   496        }
         Break.c   497        else if(respawnFrames==0) {
    00000B20 2008                   TST         R0,R0
    00000B22 8B43                   BF          L698
         Break.c   498            bricksHit = 0;
         Break.c   499            bSpeedMultiplier = 1.0f;
    00000B24 D168                   MOV.L       L786+62,R1 ; H'3F800000
    00000B26 E300                   MOV         #0,R3
    00000B28 2932                   MOV.L       R3,@R9
    00000B2A 2C12                   MOV.L       R1,@R12
         Break.c   500            bPos.x = 35.5+randf(); bPos.y = 29.5+randf();
    00000B2C BC52                   BSR         _randf
    00000B2E 7FF8                   ADD         #-8,R15
    00000B30 D266                   MOV.L       L786+66,R2 ; __stod
    00000B32 7FF8                   ADD         #-8,R15
    00000B34 420B                   JSR         @R2
    00000B36 2FF6                   MOV.L       R15,@-R15
    00000B38 D166                   MOV.L       L786+74,R1 ; __addd
    00000B3A E300                   MOV         #0,R3
    00000B3C 2F36                   MOV.L       R3,@-R15
    00000B3E D364                   MOV.L       L786+70,R3 ; H'4041C000
    00000B40 2F36                   MOV.L       R3,@-R15
    00000B42 62F3                   MOV         R15,R2
    00000B44 7210                   ADD         #16,R2
    00000B46 410B                   JSR         @R1
    00000B48 2F26                   MOV.L       R2,@-R15
    00000B4A D363                   MOV.L       L786+78,R3 ; __dtos
    00000B4C 430B                   JSR         @R3
    00000B4E 0009                   NOP
    00000B50 2A02                   MOV.L       R0,@R10
    00000B52 BC3F                   BSR         _randf




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B54 7FF8                   ADD         #-8,R15
    00000B56 7FF8                   ADD         #-8,R15
    00000B58 D35C                   MOV.L       L786+66,R3 ; __stod
    00000B5A 430B                   JSR         @R3
    00000B5C 2FF6                   MOV.L       R15,@-R15
    00000B5E E200                   MOV         #0,R2
    00000B60 D15C                   MOV.L       L786+74,R1 ; __addd
    00000B62 2F26                   MOV.L       R2,@-R15
    00000B64 D25D                   MOV.L       L786+82,R2 ; H'403D8000
    00000B66 2F26                   MOV.L       R2,@-R15
    00000B68 63F3                   MOV         R15,R3
    00000B6A 7310                   ADD         #16,R3
    00000B6C 410B                   JSR         @R1
    00000B6E 2F36                   MOV.L       R3,@-R15
    00000B70 D259                   MOV.L       L786+78,R2 ; __dtos
    00000B72 420B                   JSR         @R2
    00000B74 0009                   NOP
         Break.c   501            nbPos = bPos;
    00000B76 61D3                   MOV         R13,R1
    00000B78 D359                   MOV.L       L786+86,R3 ; __quick_evn_mvn
    00000B7A 62A3                   MOV         R10,R2
    00000B7C 1A01                   MOV.L       R0,@(4,R10)
    00000B7E 430B                   JSR         @R3
    00000B80 E008                   MOV         #8,R0
         Break.c   502            bPosGraphic = bPos;
    00000B82 6183                   MOV         R8,R1
    00000B84 D356                   MOV.L       L786+86,R3 ; __quick_evn_mvn
    00000B86 62A3                   MOV         R10,R2
    00000B88 430B                   JSR         @R3
    00000B8A E008                   MOV         #8,R0
         Break.c   503            bVel.x = -0.1f+randf()*0.2f;  bVel.y = 0.10f;
    00000B8C BC22                   BSR         _randf
    00000B8E 0009                   NOP
    00000B90 D154                   MOV.L       L786+90,R1 ; H'3E4CCCCD
    00000B92 D355                   MOV.L       L786+94,R3 ; __muls
    00000B94 430B                   JSR         @R3
    00000B96 0009                   NOP
    00000B98 D154                   MOV.L       L786+98,R1 ; H'BDCCCCCD
    00000B9A D255                   MOV.L       L786+102,R2; __adds
    00000B9C 420B                   JSR         @R2
    00000B9E 0009                   NOP
    00000BA0 2E02                   MOV.L       R0,@R14
         Break.c   504            respawnFrames = -1;
    00000BA2 E2FF                   MOV         #-1,R2
    00000BA4 D147                   MOV.L       L786+58,R1 ; _respawnFrames
    00000BA6 D353                   MOV.L       L786+106,R3; H'3DCCCCCD
    00000BA8 1E31                   MOV.L       R3,@(4,R14)
    00000BAA 2122                   MOV.L       R2,@R1
    00000BAC              L698:                             
         Break.c   505        }
         Break.c   506        for(i = 0; i<OPS_PER_FRAME; ++i) {
    00000BAC E300                   MOV         #0,R3
    00000BAE 1F32                   MOV.L       R3,@(8,R15)
    00000BB0              L701:                             
         Break.c   507            if(KeyDown(KEY_CTRL_MENU) || KeyDown(KEY_CTRL_EXIT) || (KeyDown(KEY_CTRL_EXE) && lives == 0)) {
    00000BB0 BAC2                   BSR         _KeyDown
    00000BB2 E430                   MOV         #48,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BB4 600C                   EXTU.B      R0,R0
    00000BB6 2008                   TST         R0,R0
    00000BB8 8B0D                   BF          L703
    00000BBA BABD                   BSR         _KeyDown
    00000BBC E42F                   MOV         #47,R4
    00000BBE 600C                   EXTU.B      R0,R0
    00000BC0 2008                   TST         R0,R0
    00000BC2 8B08                   BF          L703
    00000BC4 BAB8                   BSR         _KeyDown
    00000BC6 E41F                   MOV         #31,R4
    00000BC8 600C                   EXTU.B      R0,R0
    00000BCA 2008                   TST         R0,R0
    00000BCC 8918                   BT          L702
    00000BCE D231                   MOV.L       L786+10,R2 ; _lives
    00000BD0 6322                   MOV.L       @R2,R3
    00000BD2 2338                   TST         R3,R3
    00000BD4 8B14                   BF          L702
    00000BD6              L703:                             
         Break.c   508                Bdisp_AllClr_DDVRAM();
    00000BD6 D348                   MOV.L       L786+110,R3; _Bdisp_AllClr_DDVRAM
    00000BD8 430B                   JSR         @R3
    00000BDA 0009                   NOP
         Break.c   509                locate(1,1);
    00000BDC D247                   MOV.L       L786+114,R2; _locate
    00000BDE E501                   MOV         #1,R5
    00000BE0 420B                   JSR         @R2
    00000BE2 6453                   MOV         R5,R4
         Break.c   510                Print("Press any key");
    00000BE4 D446                   MOV.L       L786+118,R4; L513
    00000BE6 D347                   MOV.L       L786+122,R3; _Print
    00000BE8 430B                   JSR         @R3
    00000BEA 0009                   NOP
         Break.c   511                KillTimer(ID_USER_TIMER1);
    00000BEC D246                   MOV.L       L786+126,R2; _KillTimer
    00000BEE 420B                   JSR         @R2
    00000BF0 E401                   MOV         #1,R4
         Break.c   512                Bdisp_PutDisp_DD();
    00000BF2 D346                   MOV.L       L786+130,R3; _Bdisp_PutDisp_DD
    00000BF4 430B                   JSR         @R3
    00000BF6 0009                   NOP
         Break.c   513                isGameActive = 0;
    00000BF8 D330                   MOV.L       L786+50,R3 ; _isGameActive
    00000BFA E200                   MOV         #0,R2
         Break.c   514                return;
    00000BFC A2CE                   BRA         L704
    00000BFE 2322                   MOV.L       R2,@R3
    00000C00              L702:                             
         Break.c   515            } 
         Break.c   516            if(respawnFrames == -1) {
    00000C00 D130                   MOV.L       L786+58,R1 ; _respawnFrames
    00000C02 6012                   MOV.L       @R1,R0
    00000C04 88FF                   CMP/EQ      #-1,R0
    00000C06 8B09                   BF          L705
         Break.c   517                nbPos.x = bPos.x + bVel.x;
    00000C08 61A2                   MOV.L       @R10,R1
    00000C0A D239                   MOV.L       L786+102,R2; __adds
    00000C0C 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C0E 60E2                   MOV.L       @R14,R0
    00000C10 2D02                   MOV.L       R0,@R13
         Break.c   518                nbPos.y = bPos.y + bVel.y;
    00000C12 51A1                   MOV.L       @(4,R10),R1
    00000C14 D336                   MOV.L       L786+102,R3; __adds
    00000C16 430B                   JSR         @R3
    00000C18 50E1                   MOV.L       @(4,R14),R0
    00000C1A 1D01                   MOV.L       R0,@(4,R13)
    00000C1C              L705:                             
         Break.c   519            }
         Break.c   520    
         Break.c   521            // change speed
         Break.c   522            if(KeyDown(KEY_CHAR_8) && !changeSpeedKeyDown) {
    00000C1C BA8C                   BSR         _KeyDown
    00000C1E E440                   MOV         #64,R4
    00000C20 600C                   EXTU.B      R0,R0
    00000C22 2008                   TST         R0,R0
    00000C24 8910                   BT          L706
    00000C26 D33A                   MOV.L       L786+134,R3; __$changeSpeedKeyDown$503
    00000C28 6232                   MOV.L       @R3,R2
    00000C2A 2228                   TST         R2,R2
    00000C2C 8B0C                   BF          L706
         Break.c   523                pSpeedMode = min(5, pSpeedMode + 1);
    00000C2E D31D                   MOV.L       L786+26,R3 ; _pSpeedMode
    00000C30 D238                   MOV.L       L786+138,R2; __itos
    00000C32 6032                   MOV.L       @R3,R0
    00000C34 420B                   JSR         @R2
    00000C36 7001                   ADD         #1,R0
    00000C38 D437                   MOV.L       L786+142,R4; H'40A00000
    00000C3A BAF1                   BSR         _min
    00000C3C 6503                   MOV         R0,R5
    00000C3E D337                   MOV.L       L786+146,R3; __stoi
    00000C40 430B                   JSR         @R3
    00000C42 0009                   NOP
    00000C44 A014                   BRA         L771
    00000C46 0009                   NOP
    00000C48              L706:                             
         Break.c   524                pSpeed = pSpeeds[pSpeedMode];
         Break.c   525                changeSpeedKeyDown = 1;
         Break.c   526            }
         Break.c   527            else if(KeyDown(KEY_CHAR_7) && !changeSpeedKeyDown) {
    00000C48 BA76                   BSR         _KeyDown
    00000C4A E44A                   MOV         #74,R4
    00000C4C 600C                   EXTU.B      R0,R0
    00000C4E 2008                   TST         R0,R0
    00000C50 896A                   BT          L708
    00000C52 D22F                   MOV.L       L786+134,R2; __$changeSpeedKeyDown$503
    00000C54 6322                   MOV.L       @R2,R3
    00000C56 2338                   TST         R3,R3
    00000C58 8B66                   BF          L708
         Break.c   528                pSpeedMode = max(1, pSpeedMode - 1);
    00000C5A D312                   MOV.L       L786+26,R3 ; _pSpeedMode
    00000C5C D22D                   MOV.L       L786+138,R2; __itos
    00000C5E 6032                   MOV.L       @R3,R0
    00000C60 420B                   JSR         @R2
    00000C62 70FF                   ADD         #-1,R0
    00000C64 D418                   MOV.L       L786+62,R4 ; H'3F800000




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C66 BACD                   BSR         _max
    00000C68 6503                   MOV         R0,R5
    00000C6A D32C                   MOV.L       L786+146,R3; __stoi
    00000C6C 430B                   JSR         @R3
    00000C6E 0009                   NOP
    00000C70              L771:                             
    00000C70 D20C                   MOV.L       L786+26,R2 ; _pSpeedMode
    00000C72 2202                   MOV.L       R0,@R2
         Break.c   529                pSpeed = pSpeeds[pSpeedMode];
    00000C74 D42A                   MOV.L       L786+150,R4; _pSpeeds
    00000C76 6323                   MOV         R2,R3
    00000C78 D12A                   MOV.L       L786+154,R1; _pSpeed
    00000C7A 6032                   MOV.L       @R3,R0
    00000C7C 4008                   SHLL2       R0
         Break.c   530                changeSpeedKeyDown = 1;
    00000C7E E301                   MOV         #1,R3
    00000C80 024E                   MOV.L       @(R0,R4),R2
    00000C82 2122                   MOV.L       R2,@R1
    00000C84 D022                   MOV.L       L786+134,R0; __$changeSpeedKeyDown$503
    00000C86 A05C                   BRA         L707
    00000C88 2032                   MOV.L       R3,@R0
    00000C8A              L786:                             
    00000C8A 0000                   .DATA.W     0
    00000C8C <00000000>             .DATA.L     _PrintMini
    00000C90 <00000000>             .DATA.L     L496
    00000C94 <00000000>             .DATA.L     _lives
    00000C98 <00000000>             .DATA.L     L497
    00000C9C <00000000>             .DATA.L     _score
    00000CA0 <00000000>             .DATA.L     L498
    00000CA4 <00000000>             .DATA.L     _pSpeedMode
    00000CA8 <00000000>             .DATA.L     _bricksHit
    00000CAC <00000000>             .DATA.L     _bPos
    00000CB0 <00000000>             .DATA.L     _px
    00000CB4 <00000000>             .DATA.L     _bSpeedMultiplier
    00000CB8 <00000000>             .DATA.L     _bVel
    00000CBC <00000000>             .DATA.L     _isGameActive
    00000CC0 <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000CC4 <00000000>             .DATA.L     _respawnFrames
    00000CC8 3F800000               .DATA.L     H'3F800000
    00000CCC <00000000>             .DATA.L     __stod
    00000CD0 4041C000               .DATA.L     H'4041C000
    00000CD4 <00000000>             .DATA.L     __addd
    00000CD8 <00000000>             .DATA.L     __dtos
    00000CDC 403D8000               .DATA.L     H'403D8000
    00000CE0 <00000000>             .DATA.L     __quick_evn_mvn
    00000CE4 3E4CCCCD               .DATA.L     H'3E4CCCCD
    00000CE8 <00000000>             .DATA.L     __muls
    00000CEC BDCCCCCD               .DATA.L     H'BDCCCCCD
    00000CF0 <00000000>             .DATA.L     __adds
    00000CF4 3DCCCCCD               .DATA.L     H'3DCCCCCD
    00000CF8 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00000CFC <00000000>             .DATA.L     _locate
    00000D00 <00000000>             .DATA.L     L513
    00000D04 <00000000>             .DATA.L     _Print
    00000D08 <00000000>             .DATA.L     _KillTimer
    00000D0C <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00000D10 <00000000>             .DATA.L     __$changeSpeedKeyDown$503




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D14 <00000000>             .DATA.L     __itos
    00000D18 40A00000               .DATA.L     H'40A00000
    00000D1C <00000000>             .DATA.L     __stoi
    00000D20 <00000000>             .DATA.L     _pSpeeds
    00000D24 <00000000>             .DATA.L     _pSpeed
    00000D28              L708:                             
         Break.c   531            }
         Break.c   532            else if(!KeyDown(KEY_CHAR_8) && !KeyDown(KEY_CHAR_7)) {
    00000D28 BA06                   BSR         _KeyDown
    00000D2A E440                   MOV         #64,R4
    00000D2C 600C                   EXTU.B      R0,R0
    00000D2E 2008                   TST         R0,R0
    00000D30 8B07                   BF          L707
    00000D32 BA01                   BSR         _KeyDown
    00000D34 E44A                   MOV         #74,R4
    00000D36 600C                   EXTU.B      R0,R0
    00000D38 2008                   TST         R0,R0
    00000D3A 8B02                   BF          L707
         Break.c   533                changeSpeedKeyDown = 0;
    00000D3C D27C                   MOV.L       L787,R2    ; __$changeSpeedKeyDown$503
    00000D3E E300                   MOV         #0,R3
    00000D40 2232                   MOV.L       R3,@R2
    00000D42              L707:                             
         Break.c   534            }
         Break.c   535    
         Break.c   536            if(KeyDown(KEY_CTRL_LEFT)) {
    00000D42 B9F9                   BSR         _KeyDown
    00000D44 E426                   MOV         #38,R4
    00000D46 600C                   EXTU.B      R0,R0
    00000D48 2008                   TST         R0,R0
    00000D4A 8908                   BT          L711
         Break.c   537                px = max(MIN_PX, px - pSpeed);
    00000D4C 61B2                   MOV.L       @R11,R1
    00000D4E D279                   MOV.L       L787+4,R2  ; _pSpeed
    00000D50 D379                   MOV.L       L787+8,R3  ; __subs
    00000D52 430B                   JSR         @R3
    00000D54 6022                   MOV.L       @R2,R0
    00000D56 6503                   MOV         R0,R5
    00000D58 BA54                   BSR         _max
    00000D5A E400                   MOV         #0,R4
    00000D5C 2B02                   MOV.L       R0,@R11
    00000D5E              L711:                             
         Break.c   538            }
         Break.c   539            if(KeyDown(KEY_CTRL_RIGHT)) {
    00000D5E B9EB                   BSR         _KeyDown
    00000D60 E41B                   MOV         #27,R4
    00000D62 600C                   EXTU.B      R0,R0
    00000D64 2008                   TST         R0,R0
    00000D66 8908                   BT          L712
         Break.c   540                px = min(MAX_PX, px + pSpeed);
    00000D68 61B2                   MOV.L       @R11,R1
    00000D6A D372                   MOV.L       L787+4,R3  ; _pSpeed
    00000D6C D273                   MOV.L       L787+12,R2 ; __adds
    00000D6E 420B                   JSR         @R2
    00000D70 6032                   MOV.L       @R3,R0
    00000D72 D473                   MOV.L       L787+16,R4 ; H'42900000
    00000D74 BA54                   BSR         _min




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D76 6503                   MOV         R0,R5
    00000D78 2B02                   MOV.L       R0,@R11
    00000D7A              L712:                             
         Break.c   541            }
         Break.c   542    
         Break.c   543            if(respawnFrames == -1) {
    00000D7A D372                   MOV.L       L787+20,R3 ; _respawnFrames
    00000D7C 6032                   MOV.L       @R3,R0
    00000D7E 88FF                   CMP/EQ      #-1,R0
    00000D80 8901                   BT          L788
    00000D82 A1E0                   BRA         L713
    00000D84 0009                   NOP
    00000D86              L788:                             
         Break.c   544    
         Break.c   545                collisionIndex = getCollidingBrick(bPos, nbPos, &collisionPoint, &collisionSide);
    00000D86 62D3                   MOV         R13,R2
    00000D88 D36F                   MOV.L       L787+24,R3 ; __quick_evn_mvn
    00000D8A E008                   MOV         #8,R0
    00000D8C 3F08                   SUB         R0,R15
    00000D8E 430B                   JSR         @R3
    00000D90 61F3                   MOV         R15,R1
    00000D92 62A3                   MOV         R10,R2
    00000D94 D36C                   MOV.L       L787+24,R3 ; __quick_evn_mvn
    00000D96 E008                   MOV         #8,R0
    00000D98 3F08                   SUB         R0,R15
    00000D9A 430B                   JSR         @R3
    00000D9C 61F3                   MOV         R15,R1
    00000D9E 65F3                   MOV         R15,R5
    00000DA0 7514                   ADD         #20,R5
    00000DA2 64F3                   MOV         R15,R4
    00000DA4 742C                   ADD         #44,R4
    00000DA6 62F3                   MOV         R15,R2
    00000DA8 7224                   ADD         #36,R2
    00000DAA BBDE                   BSR         _getCollidingBrick
    00000DAC 2F26                   MOV.L       R2,@-R15
    00000DAE 7F14                   ADD         #20,R15
    00000DB0 D266                   MOV.L       L787+28,R2 ; __les
    00000DB2 55A1                   MOV.L       @(4,R10),R5
    00000DB4 51D1                   MOV.L       @(4,R13),R1
    00000DB6 420B                   JSR         @R2
    00000DB8 E000                   MOV         #0,R0
    00000DBA 8800                   CMP/EQ      #0,R0
    00000DBC 8914                   BT          L714
         Break.c   546    
         Break.c   547                if(nbPos.y <= 0) {  // top wall
         Break.c   548                    nbPos.x = intersectY(bPos.x, bPos.y, bVel.x, bVel.y, 0);
    00000DBE E300                   MOV         #0,R3
    00000DC0 2F36                   MOV.L       R3,@-R15
    00000DC2 57E1                   MOV.L       @(4,R14),R7
    00000DC4 66E2                   MOV.L       @R14,R6
    00000DC6 BA67                   BSR         _intersectY
    00000DC8 64A2                   MOV.L       @R10,R4
    00000DCA 7F04                   ADD         #4,R15
         Break.c   549                    nbPos.y = 0;
         Break.c   550                    bVel.y = -bVel.y;
    00000DCC D260                   MOV.L       L787+32,R2 ; __negs
    00000DCE E300                   MOV         #0,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DD0 2D02                   MOV.L       R0,@R13
    00000DD2 1D31                   MOV.L       R3,@(4,R13)
    00000DD4 420B                   JSR         @R2
    00000DD6 50E1                   MOV.L       @(4,R14),R0
    00000DD8 1E01                   MOV.L       R0,@(4,R14)
         Break.c   551                    bPosGraphic = nbPos;
         Break.c   552                }
         Break.c   553                else if(nbPos.y >= PADDLE_Y && bPos.y < PADDLE_Y) {  // passes thorugh paddle
         Break.c   554                    float ix = intersectY(bPos.x, bPos.y, bVel.x, bVel.y, PADDLE_Y);
         Break.c   555                    
         Break.c   556                    // divide into 5 segments: -5~-3, -3~-1, -1~1, 1~3, 3~5
         Break.c   557                    if(isBetween(ix, px-5, px-3)) {  // leftmost
         Break.c   558                        bVel.x = -0.18f * bSpeedMultiplier;
         Break.c   559                        bVel.y = -0.06f * bSpeedMultiplier;
         Break.c   560                    } else if(isBetween(ix, px-3, px-1)) {
         Break.c   561                        bVel.x = -0.12f * bSpeedMultiplier;
         Break.c   562                        bVel.y = -0.12f * bSpeedMultiplier;
         Break.c   563                    } else if(isBetween(ix, px-1, px+1)) {
         Break.c   564                        if(bVel.x == 0) {  // going straight, bounce up
         Break.c   565                            if(randf() < 0.5) {
         Break.c   566                                bVel.x = -0.08f * bSpeedMultiplier;
         Break.c   567                                bVel.y = -0.16f * bSpeedMultiplier;
         Break.c   568                            } else {
         Break.c   569                                bVel.x = 0.08f * bSpeedMultiplier;
         Break.c   570                                bVel.y = -0.16f * bSpeedMultiplier;
         Break.c   571                            }
         Break.c   572                        }
         Break.c   573                        else if(bVel.x > 0) {  // going right, bounce right
         Break.c   574                            bVel.x = 0.08f * bSpeedMultiplier;
         Break.c   575                            bVel.y = -0.16f * bSpeedMultiplier;
         Break.c   576                        } else {  // going left, bounce left
         Break.c   577                            bVel.x = -0.08f * bSpeedMultiplier;
         Break.c   578                            bVel.y = -0.16f * bSpeedMultiplier;
         Break.c   579                        }
         Break.c   580                    } else if(isBetween(ix, px+1, px+3)) {
         Break.c   581                        bVel.x = 0.12f * bSpeedMultiplier;
         Break.c   582                        bVel.y = -0.12f * bSpeedMultiplier;
         Break.c   583                    } else if(isBetween(ix, px+3, px+5)) {
         Break.c   584                        bVel.x = 0.18f * bSpeedMultiplier;
         Break.c   585                        bVel.y = -0.06f * bSpeedMultiplier;
         Break.c   586                    }
         Break.c   587                }
         Break.c   588                else if(nbPos.y >= 58) {  // bottom wall
         Break.c   589                    nbPos.x = intersectY(bPos.x, bPos.y, bVel.x, bVel.y, 58);
         Break.c   590                    nbPos.y = 58;
         Break.c   591                    bVel.x = 0;
         Break.c   592                    bVel.y = 0;
         Break.c   593                    bPosGraphic = nbPos;
         Break.c   594                    respawnFrames = FPS*2;
         Break.c   595                    lives--;
         Break.c   596                    break;
         Break.c   597                }
         Break.c   598                else if(nbPos.x <= 0) { // left wall
         Break.c   599                    nbPos.x = 0;
         Break.c   600                    nbPos.y = intersectX(bPos.x, bPos.y, bVel.x, bVel.y, 0);
         Break.c   601                    bVel.x = -bVel.x;
         Break.c   602                    bPosGraphic = nbPos;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DDA 6183                   MOV         R8,R1
    00000DDC D35A                   MOV.L       L787+24,R3 ; __quick_evn_mvn
    00000DDE 62D3                   MOV         R13,R2
    00000DE0 430B                   JSR         @R3
    00000DE2 E008                   MOV         #8,R0
    00000DE4 A13D                   BRA         L715
    00000DE6 0009                   NOP
    00000DE8              L714:                             
    00000DE8 54D1                   MOV.L       @(4,R13),R4
    00000DEA D05A                   MOV.L       L787+36,R0 ; H'42540000
    00000DEC D25A                   MOV.L       L787+40,R2 ; __ges
    00000DEE 420B                   JSR         @R2
    00000DF0 6143                   MOV         R4,R1
    00000DF2 8800                   CMP/EQ      #0,R0
    00000DF4 8B01                   BF          L789
    00000DF6 A0ED                   BRA         L716
    00000DF8 0009                   NOP
    00000DFA              L789:                             
    00000DFA D056                   MOV.L       L787+36,R0 ; H'42540000
    00000DFC D357                   MOV.L       L787+44,R3 ; __lts
    00000DFE 430B                   JSR         @R3
    00000E00 6153                   MOV         R5,R1
    00000E02 8800                   CMP/EQ      #0,R0
    00000E04 8B01                   BF          L790
    00000E06 A0E5                   BRA         L716
    00000E08 0009                   NOP
    00000E0A              L790:                             
    00000E0A D252                   MOV.L       L787+36,R2 ; H'42540000
    00000E0C 2F26                   MOV.L       R2,@-R15
    00000E0E 57E1                   MOV.L       @(4,R14),R7
    00000E10 66E2                   MOV.L       @R14,R6
    00000E12 BA41                   BSR         _intersectY
    00000E14 64A2                   MOV.L       @R10,R4
    00000E16 7F04                   ADD         #4,R15
    00000E18 D348                   MOV.L       L787+12,R3 ; __adds
    00000E1A 2F02                   MOV.L       R0,@R15
    00000E1C D050                   MOV.L       L787+48,R0 ; H'C0400000
    00000E1E 430B                   JSR         @R3
    00000E20 61B2                   MOV.L       @R11,R1
    00000E22 6603                   MOV         R0,R6
    00000E24 D245                   MOV.L       L787+12,R2 ; __adds
    00000E26 D04F                   MOV.L       L787+52,R0 ; H'C0A00000
    00000E28 420B                   JSR         @R2
    00000E2A 61B2                   MOV.L       @R11,R1
    00000E2C 6503                   MOV         R0,R5
    00000E2E BAE9                   BSR         _isBetween
    00000E30 64F2                   MOV.L       @R15,R4
    00000E32 2008                   TST         R0,R0
    00000E34 8908                   BT          L717
    00000E36 D04C                   MOV.L       L787+56,R0 ; H'3E3851EC
    00000E38 D34C                   MOV.L       L787+60,R3 ; __muls
    00000E3A 430B                   JSR         @R3
    00000E3C 61C2                   MOV.L       @R12,R1
    00000E3E D244                   MOV.L       L787+32,R2 ; __negs
    00000E40 420B                   JSR         @R2
    00000E42 0009                   NOP
    00000E44 A0BC                   BRA         L773




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E46 0009                   NOP
    00000E48              L717:                             
    00000E48 D049                   MOV.L       L787+64,R0 ; H'BF800000
    00000E4A D33C                   MOV.L       L787+12,R3 ; __adds
    00000E4C 430B                   JSR         @R3
    00000E4E 61B2                   MOV.L       @R11,R1
    00000E50 D23A                   MOV.L       L787+12,R2 ; __adds
    00000E52 6603                   MOV         R0,R6
    00000E54 D042                   MOV.L       L787+48,R0 ; H'C0400000
    00000E56 420B                   JSR         @R2
    00000E58 61B2                   MOV.L       @R11,R1
    00000E5A 6503                   MOV         R0,R5
    00000E5C BAD2                   BSR         _isBetween
    00000E5E 64F2                   MOV.L       @R15,R4
    00000E60 2008                   TST         R0,R0
    00000E62 8908                   BT          L719
    00000E64 D043                   MOV.L       L787+68,R0 ; H'3DF5C28F
    00000E66 D341                   MOV.L       L787+60,R3 ; __muls
    00000E68 430B                   JSR         @R3
    00000E6A 61C2                   MOV.L       @R12,R1
    00000E6C D238                   MOV.L       L787+32,R2 ; __negs
    00000E6E 420B                   JSR         @R2
    00000E70 0009                   NOP
    00000E72 A053                   BRA         L772
    00000E74 0009                   NOP
    00000E76              L719:                             
    00000E76 D040                   MOV.L       L787+72,R0 ; H'3F800000
    00000E78 D330                   MOV.L       L787+12,R3 ; __adds
    00000E7A 430B                   JSR         @R3
    00000E7C 61B2                   MOV.L       @R11,R1
    00000E7E 6603                   MOV         R0,R6
    00000E80 D22E                   MOV.L       L787+12,R2 ; __adds
    00000E82 D03B                   MOV.L       L787+64,R0 ; H'BF800000
    00000E84 420B                   JSR         @R2
    00000E86 61B2                   MOV.L       @R11,R1
    00000E88 6503                   MOV         R0,R5
    00000E8A BABB                   BSR         _isBetween
    00000E8C 64F2                   MOV.L       @R15,R4
    00000E8E 2008                   TST         R0,R0
    00000E90 8932                   BT          L721
    00000E92 61E2                   MOV.L       @R14,R1
    00000E94 D339                   MOV.L       L787+76,R3 ; __nes
    00000E96 430B                   JSR         @R3
    00000E98 E000                   MOV         #0,R0
    00000E9A 8800                   CMP/EQ      #0,R0
    00000E9C 8B0F                   BF          L722
    00000E9E BA99                   BSR         _randf
    00000EA0 0009                   NOP
    00000EA2 7FF8                   ADD         #-8,R15
    00000EA4 D336                   MOV.L       L787+80,R3 ; __stod
    00000EA6 430B                   JSR         @R3
    00000EA8 2FF6                   MOV.L       R15,@-R15
    00000EAA E200                   MOV         #0,R2
    00000EAC D336                   MOV.L       L787+88,R3 ; __ltd
    00000EAE 2F26                   MOV.L       R2,@-R15
    00000EB0 D234                   MOV.L       L787+84,R2 ; H'3FE00000
    00000EB2 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000EB4 2F26                   MOV.L       R2,@-R15
    00000EB6 8800                   CMP/EQ      #0,R0
    00000EB8 8B0D                   BF          L578
    00000EBA A006                   BRA         L577
    00000EBC 0009                   NOP
    00000EBE              L722:                             
    00000EBE 61E2                   MOV.L       @R14,R1
    00000EC0 D332                   MOV.L       L787+92,R3 ; __gts
    00000EC2 430B                   JSR         @R3
    00000EC4 E000                   MOV         #0,R0
    00000EC6 8800                   CMP/EQ      #0,R0
    00000EC8 8905                   BT          L578
    00000ECA              L577:
    00000ECA D031                   MOV.L       L787+96,R0 ; H'3DA3D70A
    00000ECC D227                   MOV.L       L787+60,R2 ; __muls
    00000ECE 420B                   JSR         @R2
    00000ED0 61C2                   MOV.L       @R12,R1
    00000ED2 A008                   BRA         L580
    00000ED4 2E02                   MOV.L       R0,@R14
    00000ED6              L578:
    00000ED6 D02E                   MOV.L       L787+96,R0 ; H'3DA3D70A
    00000ED8 D324                   MOV.L       L787+60,R3 ; __muls
    00000EDA 430B                   JSR         @R3
    00000EDC 61C2                   MOV.L       @R12,R1
    00000EDE D21C                   MOV.L       L787+32,R2 ; __negs
    00000EE0 420B                   JSR         @R2
    00000EE2 0009                   NOP
    00000EE4 2E02                   MOV.L       R0,@R14
    00000EE6              L580:
    00000EE6 D02B                   MOV.L       L787+100,R0; H'3E23D70A
    00000EE8 D320                   MOV.L       L787+60,R3 ; __muls
    00000EEA 430B                   JSR         @R3
    00000EEC 61C2                   MOV.L       @R12,R1
    00000EEE D218                   MOV.L       L787+32,R2 ; __negs
    00000EF0 420B                   JSR         @R2
    00000EF2 0009                   NOP
    00000EF4 A0B5                   BRA         L715
    00000EF6 1E01                   MOV.L       R0,@(4,R14)
    00000EF8              L721:                             
    00000EF8 D027                   MOV.L       L787+104,R0; H'40400000
    00000EFA D210                   MOV.L       L787+12,R2 ; __adds
    00000EFC 420B                   JSR         @R2
    00000EFE 61B2                   MOV.L       @R11,R1
    00000F00 D30E                   MOV.L       L787+12,R3 ; __adds
    00000F02 6603                   MOV         R0,R6
    00000F04 D01C                   MOV.L       L787+72,R0 ; H'3F800000
    00000F06 430B                   JSR         @R3
    00000F08 61B2                   MOV.L       @R11,R1
    00000F0A 6503                   MOV         R0,R5
    00000F0C BA7A                   BSR         _isBetween
    00000F0E 64F2                   MOV.L       @R15,R4
    00000F10 2008                   TST         R0,R0
    00000F12 8943                   BT          L729
    00000F14 D017                   MOV.L       L787+68,R0 ; H'3DF5C28F
    00000F16 D315                   MOV.L       L787+60,R3 ; __muls
    00000F18 430B                   JSR         @R3
    00000F1A 61C2                   MOV.L       @R12,R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F1C              L772:                             
    00000F1C 2E02                   MOV.L       R0,@R14
    00000F1E D015                   MOV.L       L787+68,R0 ; H'3DF5C28F
    00000F20 D212                   MOV.L       L787+60,R2 ; __muls
    00000F22 420B                   JSR         @R2
    00000F24 61C2                   MOV.L       @R12,R1
    00000F26 D30A                   MOV.L       L787+32,R3 ; __negs
    00000F28 430B                   JSR         @R3
    00000F2A 0009                   NOP
    00000F2C A099                   BRA         L715
    00000F2E 1E01                   MOV.L       R0,@(4,R14)
    00000F30              L787:                             
    00000F30 <00000000>             .DATA.L     __$changeSpeedKeyDown$503
    00000F34 <00000000>             .DATA.L     _pSpeed
    00000F38 <00000000>             .DATA.L     __subs
    00000F3C <00000000>             .DATA.L     __adds
    00000F40 42900000               .DATA.L     H'42900000
    00000F44 <00000000>             .DATA.L     _respawnFrames
    00000F48 <00000000>             .DATA.L     __quick_evn_mvn
    00000F4C <00000000>             .DATA.L     __les
    00000F50 <00000000>             .DATA.L     __negs
    00000F54 42540000               .DATA.L     H'42540000
    00000F58 <00000000>             .DATA.L     __ges
    00000F5C <00000000>             .DATA.L     __lts
    00000F60 C0400000               .DATA.L     H'C0400000
    00000F64 C0A00000               .DATA.L     H'C0A00000
    00000F68 3E3851EC               .DATA.L     H'3E3851EC
    00000F6C <00000000>             .DATA.L     __muls
    00000F70 BF800000               .DATA.L     H'BF800000
    00000F74 3DF5C28F               .DATA.L     H'3DF5C28F
    00000F78 3F800000               .DATA.L     H'3F800000
    00000F7C <00000000>             .DATA.L     __nes
    00000F80 <00000000>             .DATA.L     __stod
    00000F84 3FE00000               .DATA.L     H'3FE00000
    00000F88 <00000000>             .DATA.L     __ltd
    00000F8C <00000000>             .DATA.L     __gts
    00000F90 3DA3D70A               .DATA.L     H'3DA3D70A
    00000F94 3E23D70A               .DATA.L     H'3E23D70A
    00000F98 40400000               .DATA.L     H'40400000
    00000F9C              L729:                             
    00000F9C D084                   MOV.L       L791,R0    ; H'40A00000
    00000F9E D385                   MOV.L       L791+4,R3  ; __adds
    00000FA0 430B                   JSR         @R3
    00000FA2 61B2                   MOV.L       @R11,R1
    00000FA4 D283                   MOV.L       L791+4,R2  ; __adds
    00000FA6 6603                   MOV         R0,R6
    00000FA8 D083                   MOV.L       L791+8,R0  ; H'40400000
    00000FAA 420B                   JSR         @R2
    00000FAC 61B2                   MOV.L       @R11,R1
    00000FAE 6503                   MOV         R0,R5
    00000FB0 BA28                   BSR         _isBetween
    00000FB2 64F2                   MOV.L       @R15,R4
    00000FB4 2008                   TST         R0,R0
    00000FB6 8954                   BT          L715
    00000FB8 D080                   MOV.L       L791+12,R0 ; H'3E3851EC
    00000FBA D381                   MOV.L       L791+16,R3 ; __muls
    00000FBC 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FBE 61C2                   MOV.L       @R12,R1
    00000FC0              L773:                             
    00000FC0 2E02                   MOV.L       R0,@R14
    00000FC2 D080                   MOV.L       L791+20,R0 ; H'3D75C28F
    00000FC4 D27E                   MOV.L       L791+16,R2 ; __muls
    00000FC6 420B                   JSR         @R2
    00000FC8 61C2                   MOV.L       @R12,R1
    00000FCA D37F                   MOV.L       L791+24,R3 ; __negs
    00000FCC 430B                   JSR         @R3
    00000FCE 0009                   NOP
    00000FD0 A047                   BRA         L715
    00000FD2 1E01                   MOV.L       R0,@(4,R14)
    00000FD4              L716:                             
    00000FD4 D07D                   MOV.L       L791+28,R0 ; H'42680000
    00000FD6 D37E                   MOV.L       L791+32,R3 ; __ges
    00000FD8 430B                   JSR         @R3
    00000FDA 6143                   MOV         R4,R1
    00000FDC 8800                   CMP/EQ      #0,R0
    00000FDE 891B                   BT          L733
    00000FE0 D27A                   MOV.L       L791+28,R2 ; H'42680000
    00000FE2 2F26                   MOV.L       R2,@-R15
    00000FE4 57E1                   MOV.L       @(4,R14),R7
    00000FE6 66E2                   MOV.L       @R14,R6
    00000FE8 B956                   BSR         _intersectY
    00000FEA 64A2                   MOV.L       @R10,R4
    00000FEC D277                   MOV.L       L791+28,R2 ; H'42680000
    00000FEE E300                   MOV         #0,R3
    00000FF0 7F04                   ADD         #4,R15
    00000FF2 6183                   MOV         R8,R1
    00000FF4 2D02                   MOV.L       R0,@R13
    00000FF6 1D21                   MOV.L       R2,@(4,R13)
    00000FF8 2E32                   MOV.L       R3,@R14
    00000FFA 6233                   MOV         R3,R2
    00000FFC 1E31                   MOV.L       R3,@(4,R14)
    00000FFE 62D3                   MOV         R13,R2
    00001000 D374                   MOV.L       L791+36,R3 ; __quick_evn_mvn
    00001002 430B                   JSR         @R3
    00001004 E008                   MOV         #8,R0
    00001006 E43C                   MOV         #60,R4
    00001008 D273                   MOV.L       L791+40,R2 ; _respawnFrames
    0000100A 2242                   MOV.L       R4,@R2
    0000100C D373                   MOV.L       L791+44,R3 ; _lives
    0000100E 6132                   MOV.L       @R3,R1
    00001010 71FF                   ADD         #-1,R1
    00001012 2312                   MOV.L       R1,@R3
    00001014 A09F                   BRA         L700
    00001016 0009                   NOP
    00001018              L733:                             
    00001018 64D2                   MOV.L       @R13,R4
    0000101A 6143                   MOV         R4,R1
    0000101C D370                   MOV.L       L791+48,R3 ; __les
    0000101E 430B                   JSR         @R3
    00001020 E000                   MOV         #0,R0
    00001022 8800                   CMP/EQ      #0,R0
    00001024 8903                   BT          L736
    00001026 E200                   MOV         #0,R2
    00001028 6323                   MOV         R2,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000102A A009                   BRA         L774
    0000102C 2D22                   MOV.L       R2,@R13
    0000102E              L736:                             
         Break.c   603                }
         Break.c   604                else if(nbPos.x >= 72) {  // right wall
    0000102E D06D                   MOV.L       L791+52,R0 ; H'42900000
    00001030 D367                   MOV.L       L791+32,R3 ; __ges
    00001032 430B                   JSR         @R3
    00001034 6143                   MOV         R4,R1
    00001036 8800                   CMP/EQ      #0,R0
    00001038 8913                   BT          L715
         Break.c   605                    nbPos.x = 72;
    0000103A D26A                   MOV.L       L791+52,R2 ; H'42900000
    0000103C 2D22                   MOV.L       R2,@R13
         Break.c   606                    nbPos.y = intersectX(bPos.x, bPos.y, bVel.x, bVel.y, 72);
    0000103E 6323                   MOV         R2,R3
    00001040              L774:                             
    00001040 2F26                   MOV.L       R2,@-R15
    00001042 57E1                   MOV.L       @(4,R14),R7
    00001044 66E2                   MOV.L       @R14,R6
    00001046 55A1                   MOV.L       @(4,R10),R5
    00001048 B938                   BSR         _intersectX
    0000104A 64A2                   MOV.L       @R10,R4
         Break.c   607                    bVel.x = -bVel.x;
    0000104C D35E                   MOV.L       L791+24,R3 ; __negs
    0000104E 7F04                   ADD         #4,R15
    00001050 1D01                   MOV.L       R0,@(4,R13)
    00001052 430B                   JSR         @R3
    00001054 60E2                   MOV.L       @R14,R0
         Break.c   608                    bPosGraphic = nbPos;
    00001056 6183                   MOV         R8,R1
    00001058 D35E                   MOV.L       L791+36,R3 ; __quick_evn_mvn
    0000105A 62D3                   MOV         R13,R2
    0000105C 2E02                   MOV.L       R0,@R14
    0000105E 430B                   JSR         @R3
    00001060 E008                   MOV         #8,R0
    00001062              L715:                             
    00001062 54F5                   MOV.L       @(20,R15),R4
    00001064 6043                   MOV         R4,R0
    00001066 88FF                   CMP/EQ      #-1,R0
    00001068 8968                   BT          L739
         Break.c   609                }
         Break.c   610    
         Break.c   611                if(collisionIndex.x != -1) {  // brick collision
         Break.c   612                    bricks[collisionIndex.x][collisionIndex.y] = 0;
    0000106A 6043                   MOV         R4,R0
    0000106C 52F6                   MOV.L       @(24,R15),R2
    0000106E 6343                   MOV         R4,R3
    00001070 D55D                   MOV.L       L791+56,R5 ; _bricks
    00001072 4008                   SHLL2       R0
    00001074 303C                   ADD         R3,R0
    00001076 4008                   SHLL2       R0
    00001078 4000                   SHLL        R0
    0000107A 305C                   ADD         R5,R0
    0000107C 4208                   SHLL2       R2
    0000107E E300                   MOV         #0,R3
    00001080 0236                   MOV.L       R3,@(R0,R2)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Break.c   613                    if(collisionSide) {
    00001082 52F1                   MOV.L       @(4,R15),R2
    00001084 2228                   TST         R2,R2
    00001086 8904                   BT          L740
         Break.c   614                        bVel.y = -bVel.y;
    00001088 D24F                   MOV.L       L791+24,R2 ; __negs
    0000108A 420B                   JSR         @R2
    0000108C 50E1                   MOV.L       @(4,R14),R0
    0000108E A004                   BRA         L741
    00001090 1E01                   MOV.L       R0,@(4,R14)
    00001092              L740:                             
         Break.c   615                    } else {
         Break.c   616                        bVel.x = -bVel.x;
    00001092 D24D                   MOV.L       L791+24,R2 ; __negs
    00001094 420B                   JSR         @R2
    00001096 60E2                   MOV.L       @R14,R0
    00001098 2E02                   MOV.L       R0,@R14
    0000109A              L741:                             
         Break.c   617                    }
         Break.c   618                    nbPos = collisionPoint;
    0000109A 61D3                   MOV         R13,R1
    0000109C D34D                   MOV.L       L791+36,R3 ; __quick_evn_mvn
    0000109E 62F3                   MOV         R15,R2
    000010A0 721C                   ADD         #28,R2
    000010A2 430B                   JSR         @R3
    000010A4 E008                   MOV         #8,R0
         Break.c   619                    bPosGraphic = nbPos;
    000010A6 6183                   MOV         R8,R1
    000010A8 D34A                   MOV.L       L791+36,R3 ; __quick_evn_mvn
    000010AA 62D3                   MOV         R13,R2
    000010AC 430B                   JSR         @R3
    000010AE E008                   MOV         #8,R0
         Break.c   620                    bricksHit++;
    000010B0 6292                   MOV.L       @R9,R2
    000010B2 7201                   ADD         #1,R2
         Break.c   621                    if(bricksHit == 4 || bricksHit == 8 || bricksHit == 12) {
    000010B4 6023                   MOV         R2,R0
    000010B6 8804                   CMP/EQ      #4,R0
    000010B8 8D06                   BT/S        L743
    000010BA 2922                   MOV.L       R2,@R9
    000010BC 6092                   MOV.L       @R9,R0
    000010BE 8808                   CMP/EQ      #8,R0
    000010C0 8902                   BT          L743
    000010C2 6092                   MOV.L       @R9,R0
    000010C4 880C                   CMP/EQ      #12,R0
    000010C6 8B10                   BF          L742
    000010C8              L743:                             
         Break.c   622                        bVel.x *= (bSpeedMultiplier + 0.1f) / bSpeedMultiplier;
    000010C8 D048                   MOV.L       L791+60,R0 ; H'3DCCCCCD
    000010CA D23A                   MOV.L       L791+4,R2  ; __adds
    000010CC 420B                   JSR         @R2
    000010CE 61C2                   MOV.L       @R12,R1
    000010D0 D347                   MOV.L       L791+64,R3 ; __divs
    000010D2 6103                   MOV         R0,R1
    000010D4 430B                   JSR         @R3
    000010D6 60C2                   MOV.L       @R12,R0
    000010D8 D239                   MOV.L       L791+16,R2 ; __muls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010DA 420B                   JSR         @R2
    000010DC 61E2                   MOV.L       @R14,R1
    000010DE 2E02                   MOV.L       R0,@R14
         Break.c   623                        bSpeedMultiplier += 0.1f;
    000010E0 D042                   MOV.L       L791+60,R0 ; H'3DCCCCCD
    000010E2 D334                   MOV.L       L791+4,R3  ; __adds
    000010E4 430B                   JSR         @R3
    000010E6 61C2                   MOV.L       @R12,R1
    000010E8 2C02                   MOV.L       R0,@R12
    000010EA              L742:                             
    000010EA D442                   MOV.L       L791+68,R4 ; _score
    000010EC 52F6                   MOV.L       @(24,R15),R2
    000010EE 2F22                   MOV.L       R2,@R15
    000010F0 6023                   MOV         R2,R0
    000010F2 8804                   CMP/EQ      #4,R0
    000010F4 8902                   BT          L745
    000010F6 60F2                   MOV.L       @R15,R0
    000010F8 8805                   CMP/EQ      #5,R0
    000010FA 8B02                   BF          L744
    000010FC              L745:                             
         Break.c   624                    }
         Break.c   625                    if(collisionIndex.y == 4 || collisionIndex.y == 5) {
         Break.c   626                        score += 7;
    000010FC 6242                   MOV.L       @R4,R2
    000010FE A008                   BRA         L775
    00001100 7207                   ADD         #7,R2
    00001102              L744:                             
         Break.c   627                    } else if(collisionIndex.y == 6 || collisionIndex.y == 7) {
    00001102 60F2                   MOV.L       @R15,R0
    00001104 8806                   CMP/EQ      #6,R0
    00001106 8902                   BT          L748
    00001108 60F2                   MOV.L       @R15,R0
    0000110A 8807                   CMP/EQ      #7,R0
    0000110C 8B03                   BF          L747
    0000110E              L748:                             
         Break.c   628                        score += 4;
    0000110E 6242                   MOV.L       @R4,R2
    00001110 7204                   ADD         #4,R2
    00001112              L775:                             
    00001112 A003                   BRA         L746
    00001114 2422                   MOV.L       R2,@R4
    00001116              L747:                             
         Break.c   629                    } else {
         Break.c   630                        score += 1;
    00001116 6142                   MOV.L       @R4,R1
    00001118 7101                   ADD         #1,R1
    0000111A 2412                   MOV.L       R1,@R4
    0000111C              L746:                             
         Break.c   631                    }
         Break.c   632    
         Break.c   633                    if(collisionIndex.y <= 6) {
    0000111C 52F6                   MOV.L       @(24,R15),R2
    0000111E E306                   MOV         #6,R3
    00001120 3237                   CMP/GT      R3,R2
    00001122 890B                   BT          L739
         Break.c   634                        // max speed when hitting top 3 rows
         Break.c   635                        bVel.x *= (1.3f) / bSpeedMultiplier;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001124 D134                   MOV.L       L791+72,R1 ; H'3FA66666
    00001126 D232                   MOV.L       L791+64,R2 ; __divs
    00001128 420B                   JSR         @R2
    0000112A 60C2                   MOV.L       @R12,R0
    0000112C D224                   MOV.L       L791+16,R2 ; __muls
    0000112E 420B                   JSR         @R2
    00001130 61E2                   MOV.L       @R14,R1
         Break.c   636                        bSpeedMultiplier = 1.3f;
         Break.c   637                        bricksHit = 99;
    00001132 E463                   MOV         #99,R4
    00001134 2E02                   MOV.L       R0,@R14
    00001136 D230                   MOV.L       L791+72,R2 ; H'3FA66666
    00001138 2C22                   MOV.L       R2,@R12
    0000113A 2942                   MOV.L       R4,@R9
    0000113C              L739:                             
         Break.c   638                    }
         Break.c   639                }
         Break.c   640    
         Break.c   641                bPos = nbPos;
    0000113C D325                   MOV.L       L791+36,R3 ; __quick_evn_mvn
    0000113E 61A3                   MOV         R10,R1
    00001140 62D3                   MOV         R13,R2
    00001142 430B                   JSR         @R3
    00001144 E008                   MOV         #8,R0
    00001146              L713:                             
    00001146 E306                   MOV         #6,R3
    00001148 52F2                   MOV.L       @(8,R15),R2
    0000114A 7201                   ADD         #1,R2
    0000114C 3233                   CMP/GE      R3,R2
    0000114E 8D02                   BT/S        L792
    00001150 1F22                   MOV.L       R2,@(8,R15)
    00001152 AD2D                   BRA         L701
    00001154 0009                   NOP
    00001156              L792:                             
    00001156              L700:                             
         Break.c   642            }
         Break.c   643        }
         Break.c   644        if(respawnFrames==-1) drawBall(bPosGraphic, nbPos);
    00001156 D220                   MOV.L       L791+40,R2 ; _respawnFrames
    00001158 6022                   MOV.L       @R2,R0
    0000115A 88FF                   CMP/EQ      #-1,R0
    0000115C 8B0E                   BF          L751
    0000115E 62D3                   MOV         R13,R2
    00001160 D31C                   MOV.L       L791+36,R3 ; __quick_evn_mvn
    00001162 E008                   MOV         #8,R0
    00001164 3F08                   SUB         R0,R15
    00001166 430B                   JSR         @R3
    00001168 61F3                   MOV         R15,R1
    0000116A 6283                   MOV         R8,R2
    0000116C D319                   MOV.L       L791+36,R3 ; __quick_evn_mvn
    0000116E E008                   MOV         #8,R0
    00001170 3F08                   SUB         R0,R15
    00001172 430B                   JSR         @R3
    00001174 61F3                   MOV         R15,R1
    00001176 BB55                   BSR         _drawBall
    00001178 0009                   NOP
    0000117A 7F10                   ADD         #16,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000117C              L751:                             
         Break.c   645        drawPaddle(px);
    0000117C BB3C                   BSR         _drawPaddle
    0000117E 64B2                   MOV.L       @R11,R4
         Break.c   646        drawWalls();
    00001180 BB14                   BSR         _drawWalls
    00001182 0009                   NOP
         Break.c   647        drawBricks();
    00001184 BBD0                   BSR         _drawBricks
    00001186 0009                   NOP
         Break.c   648        drawUI();
    00001188 BC6E                   BSR         _drawUI
    0000118A 0009                   NOP
         Break.c   649        Bdisp_PutDisp_DD();
    0000118C D31B                   MOV.L       L791+76,R3 ; _Bdisp_PutDisp_DD
    0000118E 430B                   JSR         @R3
    00001190 0009                   NOP
         Break.c   650    
         Break.c   651        SetTimer(ID_USER_TIMER1, 1000/FPS, frame);
    00001192 E521                   MOV         #33,R5
    00001194 D21B                   MOV.L       L791+84,R2 ; _SetTimer
    00001196 D61A                   MOV.L       L791+80,R6 ; _frame
    00001198 420B                   JSR         @R2
    0000119A E401                   MOV         #1,R4
         Break.c   652    }
    0000119C              L704:                             
    0000119C 7F2C                   ADD         #44,R15
    0000119E 4F26                   LDS.L       @R15+,PR
    000011A0 68F6                   MOV.L       @R15+,R8
    000011A2 69F6                   MOV.L       @R15+,R9
    000011A4 6AF6                   MOV.L       @R15+,R10
    000011A6 6BF6                   MOV.L       @R15+,R11
    000011A8 6CF6                   MOV.L       @R15+,R12
    000011AA 6DF6                   MOV.L       @R15+,R13
    000011AC 000B                   RTS
    000011AE 6EF6                   MOV.L       @R15+,R14
    000011B0              L791:                             
    000011B0 40A00000               .DATA.L     H'40A00000
    000011B4 <00000000>             .DATA.L     __adds
    000011B8 40400000               .DATA.L     H'40400000
    000011BC 3E3851EC               .DATA.L     H'3E3851EC
    000011C0 <00000000>             .DATA.L     __muls
    000011C4 3D75C28F               .DATA.L     H'3D75C28F
    000011C8 <00000000>             .DATA.L     __negs
    000011CC 42680000               .DATA.L     H'42680000
    000011D0 <00000000>             .DATA.L     __ges
    000011D4 <00000000>             .DATA.L     __quick_evn_mvn
    000011D8 <00000000>             .DATA.L     _respawnFrames
    000011DC <00000000>             .DATA.L     _lives
    000011E0 <00000000>             .DATA.L     __les
    000011E4 42900000               .DATA.L     H'42900000
    000011E8 <00000000>             .DATA.L     _bricks
    000011EC 3DCCCCCD               .DATA.L     H'3DCCCCCD
    000011F0 <00000000>             .DATA.L     __divs
    000011F4 <00000000>             .DATA.L     _score
    000011F8 3FA66666               .DATA.L     H'3FA66666
    000011FC <00000000>             .DATA.L     _Bdisp_PutDisp_DD




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001200 <00000000>             .DATA.L     _frame
    00001204 <00000000>             .DATA.L     _SetTimer
         Break.c   653    
         Break.c   654    
         Break.c   655    void titleScreen() {
    00001208              _titleScreen:                    ; function: titleScreen
                                                           ; frame size=44
                                                           ; used runtime library name:
                                                           ; __addd, __muls, __stod, __dtos
    00001208 2FE6                   MOV.L       R14,@-R15
    0000120A 2FD6                   MOV.L       R13,@-R15
    0000120C 4F22                   STS.L       PR,@-R15
    0000120E 7FFC                   ADD         #-4,R15
         Break.c   656        unsigned int key;
         Break.c   657        int i, j;
         Break.c   658    
         Break.c   659        Bdisp_AllClr_DDVRAM();
    00001210 D31A                   MOV.L       L793+2,R3  ; _Bdisp_AllClr_DDVRAM
    00001212 430B                   JSR         @R3
    00001214 0009                   NOP
         Break.c   660        locate(3,2);
    00001216 E502                   MOV         #2,R5
    00001218 DE19                   MOV.L       L793+6,R14 ; _locate
    0000121A 4E0B                   JSR         @R14
    0000121C E403                   MOV         #3,R4
         Break.c   661        Print("BREAKOUT");
    0000121E DD19                   MOV.L       L793+10,R13; _Print
    00001220 D419                   MOV.L       L793+14,R4 ; L549
    00001222 4D0B                   JSR         @R13
    00001224 0009                   NOP
         Break.c   662        locate(3,4);
    00001226 E504                   MOV         #4,R5
    00001228 4E0B                   JSR         @R14
    0000122A E403                   MOV         #3,R4
         Break.c   663        Print("Move: Left/Right");
    0000122C D417                   MOV.L       L793+18,R4 ; L550
    0000122E 4D0B                   JSR         @R13
    00001230 0009                   NOP
         Break.c   664        locate(3,5);
    00001232 E505                   MOV         #5,R5
    00001234 4E0B                   JSR         @R14
    00001236 E403                   MOV         #3,R4
         Break.c   665        Print("Change speed: 7/8");
    00001238 D415                   MOV.L       L793+22,R4 ; L551
    0000123A 4D0B                   JSR         @R13
    0000123C 0009                   NOP
         Break.c   666        locate(3,7);
    0000123E E507                   MOV         #7,R5
    00001240 4E0B                   JSR         @R14
    00001242 E403                   MOV         #3,R4
         Break.c   667        Print("EXE to start");
    00001244 D413                   MOV.L       L793+26,R4 ; L552
    00001246 4D0B                   JSR         @R13
    00001248 0009                   NOP
         Break.c   668    
         Break.c   669        Bdisp_PutDisp_DD();
    0000124A D213                   MOV.L       L793+30,R2 ; _Bdisp_PutDisp_DD




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000124C 420B                   JSR         @R2
    0000124E 0009                   NOP
    00001250 D412                   MOV.L       L793+34,R4 ; _bricks
    00001252 ED04                   MOV         #4,R13
    00001254 9011                   MOV.W       L793,R0    ; H'02D0
    00001256 EE0A                   MOV         #10,R14
    00001258 6543                   MOV         R4,R5
    0000125A E701                   MOV         #1,R7
    0000125C 304C                   ADD         R4,R0
         Break.c   670    
         Break.c   671        for(i = 0; i < 18; i++) {
    0000125E              L752:                             
         Break.c   672            for(j = 4; j < 10; j++) {
    0000125E 66D3                   MOV         R13,R6
    00001260 6453                   MOV         R5,R4
    00001262 7410                   ADD         #16,R4
    00001264              L753:                             
         Break.c   673                bricks[i][j] = 1;
    00001264 2472                   MOV.L       R7,@R4
    00001266 7601                   ADD         #1,R6
    00001268 36E3                   CMP/GE      R14,R6
    0000126A 8FFB                   BF/S        L753
    0000126C 7404                   ADD         #4,R4
    0000126E 7528                   ADD         #40,R5
    00001270 3502                   CMP/HS      R0,R5
    00001272 8BF4                   BF          L752
    00001274 DE0A                   MOV.L       L793+38,R14; _rSeed
         Break.c   674            }
         Break.c   675        }
         Break.c   676    
         Break.c   677        while(KeyDown(KEY_CTRL_EXE)) {
    00001276 A018                   BRA         L754
    00001278 0009                   NOP
    0000127A              L793:                             
    0000127A 02D0                   .DATA.W     H'02D0
    0000127C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001280 <00000000>             .DATA.L     _locate
    00001284 <00000000>             .DATA.L     _Print
    00001288 <00000000>             .DATA.L     L549
    0000128C <00000000>             .DATA.L     L550
    00001290 <00000000>             .DATA.L     L551
    00001294 <00000000>             .DATA.L     L552
    00001298 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    0000129C <00000000>             .DATA.L     _bricks
    000012A0 <00000000>             .DATA.L     _rSeed
    000012A4              L755:                             
         Break.c   678            ++rSeed;
    000012A4 62E2                   MOV.L       @R14,R2
    000012A6 7201                   ADD         #1,R2
    000012A8 2E22                   MOV.L       R2,@R14
    000012AA              L754:                             
    000012AA D345                   MOV.L       L794+2,R3  ; _KeyDown
    000012AC 430B                   JSR         @R3
    000012AE E41F                   MOV         #31,R4
    000012B0 600C                   EXTU.B      R0,R0
    000012B2 2008                   TST         R0,R0
    000012B4 8BF6                   BF          L755




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000012B6              L757:                             
         Break.c   679        }
         Break.c   680    
         Break.c   681        // while(!KeyDown(KEY_CTRL_EXE) && !KeyDown(KEY_CTRL_MENU)) {
         Break.c   682        //     ++rSeed;
         Break.c   683        // }
         Break.c   684        while(1) {
         Break.c   685            GetKeyMod(&key);
    000012B6 D243                   MOV.L       L794+6,R2  ; _GetKeyMod
    000012B8 420B                   JSR         @R2
    000012BA 64F3                   MOV         R15,R4
         Break.c   686            if(key == KEY_CTRL_EXE || key == KEY_CTRL_MENU) {
    000012BC 60F2                   MOV.L       @R15,R0
    000012BE 881F                   CMP/EQ      #31,R0
    000012C0 8902                   BT          L760
    000012C2 60F2                   MOV.L       @R15,R0
    000012C4 8830                   CMP/EQ      #48,R0
    000012C6 8BF6                   BF          L757
    000012C8              L760:                             
         Break.c   687                break;
         Break.c   688            }
         Break.c   689        }
         Break.c   690    
         Break.c   691        px = 36.0f;
    000012C8 D33F                   MOV.L       L794+10,R3 ; H'42100000
         Break.c   692        pSpeedMode = 3;
    000012CA E103                   MOV         #3,R1
    000012CC D040                   MOV.L       L794+18,R0 ; _pSpeedMode
    000012CE D23F                   MOV.L       L794+14,R2 ; _px
    000012D0 2232                   MOV.L       R3,@R2
    000012D2 2012                   MOV.L       R1,@R0
         Break.c   693        pSpeed = 0.25f;
    000012D4 D33F                   MOV.L       L794+22,R3 ; H'3E800000
    000012D6 D140                   MOV.L       L794+26,R1 ; _pSpeed
    000012D8 2132                   MOV.L       R3,@R1
         Break.c   694    
         Break.c   695        bPos.x = 35.5+randf(); bPos.y = 29.5+randf();
    000012DA B87B                   BSR         _randf
    000012DC 7FF8                   ADD         #-8,R15
    000012DE 7FF8                   ADD         #-8,R15
    000012E0 D33E                   MOV.L       L794+30,R3 ; __stod
    000012E2 430B                   JSR         @R3
    000012E4 2FF6                   MOV.L       R15,@-R15
    000012E6 E200                   MOV         #0,R2
    000012E8 D13E                   MOV.L       L794+38,R1 ; __addd
    000012EA 2F26                   MOV.L       R2,@-R15
    000012EC D23C                   MOV.L       L794+34,R2 ; H'4041C000
    000012EE 2F26                   MOV.L       R2,@-R15
    000012F0 63F3                   MOV         R15,R3
    000012F2 7310                   ADD         #16,R3
    000012F4 410B                   JSR         @R1
    000012F6 2F36                   MOV.L       R3,@-R15
    000012F8 D23B                   MOV.L       L794+42,R2 ; __dtos
    000012FA 420B                   JSR         @R2
    000012FC 0009                   NOP
    000012FE D33B                   MOV.L       L794+46,R3 ; _bPos
    00001300 2302                   MOV.L       R0,@R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001302 B867                   BSR         _randf
    00001304 7FF8                   ADD         #-8,R15
    00001306 7FF8                   ADD         #-8,R15
    00001308 D134                   MOV.L       L794+30,R1 ; __stod
    0000130A 410B                   JSR         @R1
    0000130C 2FF6                   MOV.L       R15,@-R15
    0000130E E300                   MOV         #0,R3
    00001310 D134                   MOV.L       L794+38,R1 ; __addd
    00001312 2F36                   MOV.L       R3,@-R15
    00001314 D336                   MOV.L       L794+50,R3 ; H'403D8000
    00001316 2F36                   MOV.L       R3,@-R15
    00001318 62F3                   MOV         R15,R2
    0000131A 7210                   ADD         #16,R2
    0000131C 410B                   JSR         @R1
    0000131E 2F26                   MOV.L       R2,@-R15
    00001320 D331                   MOV.L       L794+42,R3 ; __dtos
    00001322 430B                   JSR         @R3
    00001324 0009                   NOP
    00001326 D233                   MOV.L       L794+54,R2 ; H'00000004+_bPos
    00001328 2202                   MOV.L       R0,@R2
         Break.c   696        bVel.x = -0.1+randf()*0.2f;  bVel.y = 0.05f; // DO NOT RAISE OVER 2
    0000132A B853                   BSR         _randf
    0000132C 7FF8                   ADD         #-8,R15
    0000132E D132                   MOV.L       L794+58,R1 ; H'3E4CCCCD
    00001330 D332                   MOV.L       L794+62,R3 ; __muls
    00001332 430B                   JSR         @R3
    00001334 0009                   NOP
    00001336 7FF8                   ADD         #-8,R15
    00001338 D228                   MOV.L       L794+30,R2 ; __stod
    0000133A 420B                   JSR         @R2
    0000133C 2FF6                   MOV.L       R15,@-R15
    0000133E D330                   MOV.L       L794+66,R3 ; H'9999999A
    00001340 D128                   MOV.L       L794+38,R1 ; __addd
    00001342 2F36                   MOV.L       R3,@-R15
    00001344 D32F                   MOV.L       L794+70,R3 ; H'BFB99999
    00001346 2F36                   MOV.L       R3,@-R15
    00001348 62F3                   MOV         R15,R2
    0000134A 7210                   ADD         #16,R2
    0000134C 410B                   JSR         @R1
    0000134E 2F26                   MOV.L       R2,@-R15
    00001350 D325                   MOV.L       L794+42,R3 ; __dtos
    00001352 430B                   JSR         @R3
    00001354 0009                   NOP
         Break.c   697        bricksHit = 0; // speed increases for 4th 8th 12th hit (3 times)
    00001356 E400                   MOV         #0,R4
    00001358 D22B                   MOV.L       L794+74,R2 ; _bVel
    0000135A 2202                   MOV.L       R0,@R2
    0000135C D32B                   MOV.L       L794+78,R3 ; H'3D4CCCCD
    0000135E D12C                   MOV.L       L794+82,R1 ; H'00000004+_bVel
         Break.c   698        bSpeedMultiplier = 1.0f;
    00001360 D22D                   MOV.L       L794+90,R2 ; H'3F800000
    00001362 2132                   MOV.L       R3,@R1
    00001364 D32B                   MOV.L       L794+86,R3 ; _bricksHit
         Break.c   699        lives = 5;
    00001366 E105                   MOV         #5,R1
    00001368 D02C                   MOV.L       L794+94,R0 ; _bSpeedMultiplier
    0000136A 2342                   MOV.L       R4,@R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000136C 2022                   MOV.L       R2,@R0
         Break.c   700        respawnFrames = FPS;
    0000136E E31E                   MOV         #30,R3
    00001370 D22B                   MOV.L       L794+98,R2 ; _lives
    00001372 2212                   MOV.L       R1,@R2
    00001374 D12B                   MOV.L       L794+102,R1; _respawnFrames
    00001376 2132                   MOV.L       R3,@R1
         Break.c   701        score = 0;
    00001378 D02B                   MOV.L       L794+106,R0; _score
         Break.c   702    
         Break.c   703        frame();
    0000137A BBAA                   BSR         _frame
    0000137C 2042                   MOV.L       R4,@R0
         Break.c   704    
         Break.c   705        return;
         Break.c   706    }
    0000137E 7F04                   ADD         #4,R15
    00001380 4F26                   LDS.L       @R15+,PR
    00001382 6DF6                   MOV.L       @R15+,R13
    00001384 000B                   RTS
    00001386 6EF6                   MOV.L       @R15+,R14
         Break.c   707    
         Break.c   708    
         Break.c   709    //****************************************************************************
         Break.c   710    //  AddIn_main (Sample program main function)
         Break.c   711    //
         Break.c   712    //  param   :   isAppli   : 1 = This application is launched by MAIN MENU.
         Break.c   713    //                        : 0 = This application is launched by a strip in eACT application.
         Break.c   714    //
         Break.c   715    //              OptionNum : Strip number (0~3)
         Break.c   716    //                         (This parameter is only used when isAppli parameter is 0.)
         Break.c   717    //
         Break.c   718    //  retval  :   1 = No error / 0 = Error
         Break.c   719    //
         Break.c   720    //****************************************************************************
         Break.c   721    
         Break.c   722    void randomTick() {
    00001388              _randomTick:                     ; function: randomTick
                                                           ; frame size=4
    00001388 4F22                   STS.L       PR,@-R15
         Break.c   723        randf();
    0000138A B823                   BSR         _randf
    0000138C 0009                   NOP
         Break.c   724        SetTimer(ID_USER_TIMER5, 100, randomTick);
    0000138E E564                   MOV         #100,R5
    00001390 D227                   MOV.L       L794+114,R2; _SetTimer
    00001392 E405                   MOV         #5,R4
    00001394 D625                   MOV.L       L794+110,R6; _randomTick
    00001396 422B                   JMP         @R2
    00001398 4F26                   LDS.L       @R15+,PR
         Break.c   725    }
         Break.c   726    
         Break.c   727    int AddIn_main(int isAppli, unsigned short OptionNum)
    0000139A              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=4
    0000139A 7FFC                   ADD         #-4,R15
         Break.c   728    {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Break.c   729        unsigned int key = 0;
    0000139C E300                   MOV         #0,R3
         Break.c   730    
         Break.c   731        randomTick();
    0000139E BFF3                   BSR         _randomTick
    000013A0 2F32                   MOV.L       R3,@R15
         Break.c   732        titleScreen();
    000013A2 BF31                   BSR         _titleScreen
    000013A4 0009                   NOP
    000013A6 ED01                   MOV         #1,R13
    000013A8 DE23                   MOV.L       L794+122,R14; _isGameActive
    000013AA DC22                   MOV.L       L794+118,R12; _GetKey
         Break.c   733    
         Break.c   734        while(1){
    000013AC              L763:                             
         Break.c   735            GetKey(&key);
    000013AC 4C0B                   JSR         @R12
    000013AE 64F3                   MOV         R15,R4
         Break.c   736            if(!isGameActive) {
    000013B0 62E2                   MOV.L       @R14,R2
    000013B2 2228                   TST         R2,R2
    000013B4 8BFA                   BF          L763
         Break.c   737                isGameActive = 1;
         Break.c   738                titleScreen();
    000013B6 BF27                   BSR         _titleScreen
    000013B8 2ED2                   MOV.L       R13,@R14
    000013BA AFF7                   BRA         L763
    000013BC 0009                   NOP
    000013BE              L794:                             
    000013BE 0000                   .DATA.W     0
    000013C0 <00000000>             .DATA.L     _KeyDown
    000013C4 <00000000>             .DATA.L     _GetKeyMod
    000013C8 42100000               .DATA.L     H'42100000
    000013CC <00000000>             .DATA.L     _px
    000013D0 <00000000>             .DATA.L     _pSpeedMode
    000013D4 3E800000               .DATA.L     H'3E800000
    000013D8 <00000000>             .DATA.L     _pSpeed
    000013DC <00000000>             .DATA.L     __stod
    000013E0 4041C000               .DATA.L     H'4041C000
    000013E4 <00000000>             .DATA.L     __addd
    000013E8 <00000000>             .DATA.L     __dtos
    000013EC <00000000>             .DATA.L     _bPos
    000013F0 403D8000               .DATA.L     H'403D8000
    000013F4 <00000004>             .DATA.L     H'00000004+_bPos
    000013F8 3E4CCCCD               .DATA.L     H'3E4CCCCD
    000013FC <00000000>             .DATA.L     __muls
    00001400 9999999A               .DATA.L     H'9999999A
    00001404 BFB99999               .DATA.L     H'BFB99999
    00001408 <00000000>             .DATA.L     _bVel
    0000140C 3D4CCCCD               .DATA.L     H'3D4CCCCD
    00001410 <00000004>             .DATA.L     H'00000004+_bVel
    00001414 <00000000>             .DATA.L     _bricksHit
    00001418 3F800000               .DATA.L     H'3F800000
    0000141C <00000000>             .DATA.L     _bSpeedMultiplier
    00001420 <00000000>             .DATA.L     _lives
    00001424 <00000000>             .DATA.L     _respawnFrames
    00001428 <00000000>             .DATA.L     _score




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000142C <00000000>             .DATA.L     _randomTick
    00001430 <00000000>             .DATA.L     _SetTimer
    00001434 <00000000>             .DATA.L     _GetKey
    00001438 <00000000>             .DATA.L     _isGameActive
         Break.c   739            }
         Break.c   740        }
         Break.c   741    
         Break.c   742        return 1;
         Break.c   743    }
         Break.c   744    
         Break.c   745    
         Break.c   746    //****************************************************************************
         Break.c   747    //**************                                              ****************
         Break.c   748    //**************                 Notice!                      ****************
         Break.c   749    //**************                                              ****************
         Break.c   750    //**************  Please do not change the following source.  ****************
         Break.c   751    //**************                                              ****************
         Break.c   752    //****************************************************************************
         Break.c   753    
         Break.c   754    
         Break.c   755    #pragma section _BR_Size
         Break.c   756    unsigned long BR_Size;
         Break.c   757    #pragma section
         Break.c   758    
         Break.c   759    
         Break.c   760    #pragma section _TOP
         Break.c   761    
         Break.c   762    //****************************************************************************
         Break.c   763    //  InitializeSystem
         Break.c   764    //
         Break.c   765    //  param   :   isAppli   : 1 = Application / 0 = eActivity
         Break.c   766    //              OptionNum : Option Number (only eActivity)
         Break.c   767    //
         Break.c   768    //  retval  :   1 = No error / 0 = Error
         Break.c   769    //
         Break.c   770    //****************************************************************************
         Break.c   771    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
         Break.c   772    {
         Break.c   773        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L795+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L795:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
         Break.c   774    }
         Break.c   775    
         Break.c   776    #pragma section
         Break.c   777    
C   00000000              _sc0015:                         ; static: sc0015
    00000000 D201D00242             .DATA.L     H'D201D002,H'422B0009,H'80010070,H'00000015
             2B00098001   
             0070000000   
             15           
    00000010              L428:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000010 FFFFFFFFFF             .DATA.L     H'FFFFFFFF,H'FFFFFFFF
             FFFFFF       
    00000018              L496:
    00000018 4C49564553             .SDATA      "LIVES"
    0000001D 00                     .DATA.B     H'00
    0000001E 00000002               .RES.W      1
    00000020              L497:
    00000020 53434F5245             .SDATA      "SCORE"
    00000025 00                     .DATA.B     H'00
    00000026 00000002               .RES.W      1
    00000028              L498:
    00000028 5350454544             .SDATA      "SPEED"
    0000002D 00                     .DATA.B     H'00
    0000002E 00000002               .RES.W      1
    00000030              L513:
    00000030 5072657373             .SDATA      "Press any key"
             20616E7920   
             6B6579       
    0000003D 00                     .DATA.B     H'00
    0000003E 00000002               .RES.W      1
    00000040              L549:
    00000040 425245414B             .SDATA      "BREAKOUT"
             4F5554       
    00000048 00                     .DATA.B     H'00
    00000049 00000001               .RES.B      1
    0000004A 00000002               .RES.W      1
    0000004C              L550:
    0000004C 4D6F76653A             .SDATA      "Move: Left/Right"
             204C656674   
             2F52696768   
             74           
    0000005C 00                     .DATA.B     H'00
    0000005D 00000001               .RES.B      1
    0000005E 00000002               .RES.W      1
    00000060              L551:
    00000060 4368616E67             .SDATA      "Change speed: 7/8"
             6520737065   
             65643A2037   
             2F38         
    00000071 00                     .DATA.B     H'00
    00000072 00000002               .RES.W      1
    00000074              L552:
    00000074 4558452074             .SDATA      "EXE to start"
             6F20737461   
             7274         
    00000080 00                     .DATA.B     H'00
D   00000000              _isGameActive:                   ; static: isGameActive
    00000000 00000000               .DATA.L     H'00000000
    00000004              _rSeed:                          ; static: rSeed
    00000004 0000000A               .DATA.L     H'0000000A
    00000008              _pSpeeds:                        ; static: pSpeeds
    00000008 000000003D             .DATA.L     H'00000000,H'3DCCCCCD,H'3E19999A,H'3E800000,H'3ECCCCCD,H'3F19999A
             CCCCCD3E19   
             999A3E8000   
             003ECCCCCD   
             3F19999A     
    00000020              _bricksHit:                      ; static: bricksHit




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000020 00000000               .DATA.L     H'00000000
    00000024              _bSpeedMultiplier:               ; static: bSpeedMultiplier
    00000024 3F800000               .DATA.L     H'3F800000
    00000028              _respawnFrames:                  ; static: respawnFrames
    00000028 00000000               .DATA.L     H'00000000
    0000002C              __$changeSpeedKeyDown$503:       ; static: changeSpeedKeyDown
    0000002C 00000000               .DATA.L     H'00000000
B   00000000              _bricks:                         ; static: bricks
    00000000 000002D0               .RES.L      180
    000002D0              _px:                             ; static: px
    000002D0 00000004               .RES.L      1
    000002D4              _pSpeedMode:                     ; static: pSpeedMode
    000002D4 00000004               .RES.L      1
    000002D8              _pSpeed:                         ; static: pSpeed
    000002D8 00000004               .RES.L      1
    000002DC              _lives:                          ; static: lives
    000002DC 00000004               .RES.L      1
    000002E0              _score:                          ; static: score
    000002E0 00000004               .RES.L      1
    000002E4              _bPos:                           ; static: bPos
    000002E4 00000008               .RES.L      2
    000002EC              _bVel:                           ; static: bVel
    000002EC 00000008               .RES.L      2
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1




































SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 21:03:04  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        13




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      777



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               0000143C Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               00000081 Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000030 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               000002F4 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 000017F1 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           32
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          47
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           214






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\hojooni\AppData\Local\Temp\hmk1A61.tmp 

