SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Users\hojooni\OneDrive\¹®¼­\CASIO\fx-9860G SDK\SNAKE\Snake.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Snake.c     1    /*****************************************************************/
         Snake.c     2    /*                                                               */
         Snake.c     3    /*   CASIO fx-9860G SDK Library                                  */
         Snake.c     4    /*                                                               */
         Snake.c     5    /*   File name : [ProjectName].c                                 */
         Snake.c     6    /*                                                               */
         Snake.c     7    /*   Copyright (c) 2006 CASIO COMPUTER CO., LTD.                 */
         Snake.c     8    /*                                                               */
         Snake.c     9    /*****************************************************************/
         Snake.c    10    
         Snake.c    11    #include "fxlib.h"
         Snake.c    12    #include "timer.h"
         Snake.c    13    
         Snake.c    14    #define WIDTH (17)  // 25
         Snake.c    15    #define HEIGHT (15)  // 21
         Snake.c    16    #define SNAKE (1)
         Snake.c    17    #define FOOD (-1)
         Snake.c    18    #define EMPTY (0)
         Snake.c    19    #define SPEED_LO (0)
         Snake.c    20    #define SPEED_MD (1)
         Snake.c    21    #define SPEED_HI (2)
         Snake.c    22    #define UP (0)
         Snake.c    23    #define RIGHT (1)
         Snake.c    24    #define DOWN (2)
         Snake.c    25    #define LEFT (3)
         Snake.c    26    
         Snake.c    27    GRAPHDATA filledGraph = {4, 4, (unsigned char*) "\xF0\xF0\xF0\xF0"};
         Snake.c    28    
         Snake.c    29    int board[WIDTH][HEIGHT];
         Snake.c    30    int snakePos[WIDTH*HEIGHT][2];
         Snake.c    31    int snakeLen = 3;
         Snake.c    32    int headX = WIDTH / 3;
         Snake.c    33    int headY = HEIGHT / 2;
         Snake.c    34    int dir = RIGHT;
         Snake.c    35    int speed = SPEED_MD;
         Snake.c    36    int dead = 0;
         Snake.c    37    unsigned int rSeed = 0;
         Snake.c    38    
         Snake.c    39    void titleScreen() {
P   00000000              _titleScreen:                    ; function: titleScreen
                                                           ; frame size=4
         Snake.c    40        unsigned int key;
         Snake.c    41        Bdisp_AllClr_VRAM();
    00000000 D332                   MOV.L       L572+4,R3  ; _Bdisp_AllClr_VRAM
    00000002 7FFC                   ADD         #-4,R15
    00000004 430B                   JSR         @R3
    00000006 0009                   NOP
         Snake.c    42        locate(3, 2);
    00000008 DD31                   MOV.L       L572+8,R13 ; _locate
    0000000A E502                   MOV         #2,R5
    0000000C 4D0B                   JSR         @R13
    0000000E E403                   MOV         #3,R4
         Snake.c    43        Print("SNAKE");
    00000010 DE30                   MOV.L       L572+12,R14; _Print




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000012 D431                   MOV.L       L572+16,R4 ; L311
    00000014 4E0B                   JSR         @R14
    00000016 0009                   NOP
         Snake.c    44        locate(3, 4);
    00000018 E504                   MOV         #4,R5
    0000001A 4D0B                   JSR         @R13
    0000001C E403                   MOV         #3,R4
         Snake.c    45        Print("Select speed");
    0000001E D42F                   MOV.L       L572+20,R4 ; L312
    00000020 4E0B                   JSR         @R14
    00000022 0009                   NOP
         Snake.c    46        locate(3, 5);
    00000024 E505                   MOV         #5,R5
    00000026 4D0B                   JSR         @R13
    00000028 E403                   MOV         #3,R4
         Snake.c    47        Print("1: Low");
    0000002A D42D                   MOV.L       L572+24,R4 ; L313
    0000002C 4E0B                   JSR         @R14
    0000002E 0009                   NOP
         Snake.c    48        locate(3, 6);
    00000030 E506                   MOV         #6,R5
    00000032 4D0B                   JSR         @R13
    00000034 E403                   MOV         #3,R4
         Snake.c    49        Print("2: Medium");
    00000036 D42B                   MOV.L       L572+28,R4 ; L314
    00000038 4E0B                   JSR         @R14
    0000003A 0009                   NOP
         Snake.c    50        locate(3, 7);
    0000003C E507                   MOV         #7,R5
    0000003E 4D0B                   JSR         @R13
    00000040 E403                   MOV         #3,R4
         Snake.c    51        Print("3: High");
    00000042 D429                   MOV.L       L572+32,R4 ; L315
    00000044 4E0B                   JSR         @R14
    00000046 0009                   NOP
         Snake.c    52        while(1) {
    00000048              L486:                             
         Snake.c    53            GetKey(&key);
    00000048 DE28                   MOV.L       L572+36,R14; _GetKey
    0000004A 4E0B                   JSR         @R14
    0000004C 64F3                   MOV         R15,R4
         Snake.c    54            switch(key) {
    0000004E D428                   MOV.L       L572+40,R4 ; _speed
    00000050 60F2                   MOV.L       @R15,R0
    00000052 8831                   CMP/EQ      #49,R0
    00000054 8905                   BT          L447
    00000056 8832                   CMP/EQ      #50,R0
    00000058 8905                   BT          L448
    0000005A 8833                   CMP/EQ      #51,R0
    0000005C 8906                   BT          L449
    0000005E AFF3                   BRA         L486
    00000060 0009                   NOP
    00000062              L447:                            ; case label 
    00000062 A001                   BRA         L566
         Snake.c    55                case KEY_CHAR_1:
         Snake.c    56                    speed = SPEED_LO;
    00000064 E500                   MOV         #0,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000066              L448:                            ; case label 
         Snake.c    57                    initGame();
         Snake.c    58                    break;
         Snake.c    59                case KEY_CHAR_2:
         Snake.c    60                    speed = SPEED_MD;
    00000066 E501                   MOV         #1,R5
    00000068              L566:                             
    00000068 A002                   BRA         L428
    0000006A 2452                   MOV.L       R5,@R4
    0000006C              L449:                            ; case label 
         Snake.c    61                    initGame();
         Snake.c    62                    break;
         Snake.c    63                case KEY_CHAR_3:
         Snake.c    64                    speed = SPEED_HI;
    0000006C E502                   MOV         #2,R5
    0000006E 2452                   MOV.L       R5,@R4
    00000070              L428:
         Snake.c    65                    initGame();
    00000070 B002                   BSR         _initGame
    00000072 0009                   NOP
    00000074 AFE8                   BRA         L486
    00000076 0009                   NOP
         Snake.c    66                    break;
         Snake.c    67            }
         Snake.c    68        }
         Snake.c    69    }
         Snake.c    70    
         Snake.c    71    int initGame() {
    00000078              _initGame:                       ; function: initGame
                                                           ; frame size=36
    00000078 2FE6                   MOV.L       R14,@-R15
    0000007A EE00                   MOV         #0,R14
         Snake.c    72        int i, j;
         Snake.c    73        int key;
         Snake.c    74        srand(rSeed);
    0000007C D31F                   MOV.L       L572+52,R3 ; _rSeed
    0000007E 2FD6                   MOV.L       R13,@-R15
    00000080 2FC6                   MOV.L       R12,@-R15
    00000082 EC01                   MOV         #1,R12
    00000084 DD1C                   MOV.L       L572+48,R13; _dir
    00000086 2FB6                   MOV.L       R11,@-R15
    00000088 2FA6                   MOV.L       R10,@-R15
    0000008A 4F22                   STS.L       PR,@-R15
    0000008C 4F12                   STS.L       MACL,@-R15
    0000008E 7FF8                   ADD         #-8,R15
    00000090 DB18                   MOV.L       L572+44,R11; _dead
    00000092 D21B                   MOV.L       L572+56,R2 ; _srand
    00000094 420B                   JSR         @R2
    00000096 6432                   MOV.L       @R3,R4
    00000098 D71A                   MOV.L       L572+60,R7 ; _board
    0000009A 6573                   MOV         R7,R5
    0000009C 9014                   MOV.W       L572,R0    ; H'03FC
    0000009E 307C                   ADD         R7,R0
         Snake.c    75        for (i = 0; i < WIDTH; i++) {
    000000A0 A009                   BRA         L488
    000000A2 EA0F                   MOV         #15,R10
    000000A4              L489:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Snake.c    76            for (j = 0; j < HEIGHT; j++) {
    000000A4 66E3                   MOV         R14,R6
    000000A6 A003                   BRA         L490
    000000A8 6453                   MOV         R5,R4
    000000AA              L491:                             
    000000AA 7601                   ADD         #1,R6
         Snake.c    77                board[i][j] = EMPTY;
    000000AC 24E2                   MOV.L       R14,@R4
    000000AE 7404                   ADD         #4,R4
    000000B0              L490:                             
    000000B0 36A3                   CMP/GE      R10,R6
    000000B2 8BFA                   BF          L491
    000000B4 753C                   ADD         #60,R5
    000000B6              L488:                             
    000000B6 3502                   CMP/HS      R0,R5
    000000B8 8BF4                   BF          L489
    000000BA D613                   MOV.L       L572+64,R6 ; _snakePos
    000000BC 9305                   MOV.W       L572+2,R3  ; H'07F8
    000000BE 6563                   MOV         R6,R5
    000000C0 1F61                   MOV.L       R6,@(4,R15)
    000000C2 6463                   MOV         R6,R4
         Snake.c    78            }
         Snake.c    79        }
         Snake.c    80        for(i = 0; i < WIDTH*HEIGHT; ++i) {
    000000C4 A026                   BRA         L492
    000000C6 353C                   ADD         R3,R5
    000000C8              L572:                             
    000000C8 03FC                   .DATA.W     H'03FC
    000000CA 07F8                   .DATA.W     H'07F8
    000000CC <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    000000D0 <00000000>             .DATA.L     _locate
    000000D4 <00000000>             .DATA.L     _Print
    000000D8 <00000000>             .DATA.L     L311
    000000DC <00000000>             .DATA.L     L312
    000000E0 <00000000>             .DATA.L     L313
    000000E4 <00000000>             .DATA.L     L314
    000000E8 <00000000>             .DATA.L     L315
    000000EC <00000000>             .DATA.L     _GetKey
    000000F0 <00000000>             .DATA.L     _speed
    000000F4 <00000000>             .DATA.L     _dead
    000000F8 <00000000>             .DATA.L     _dir
    000000FC <00000000>             .DATA.L     _rSeed
    00000100 <00000000>             .DATA.L     _srand
    00000104 <00000000>             .DATA.L     _board
    00000108 <00000000>             .DATA.L     _snakePos
    0000010C              L493:                             
         Snake.c    81            snakePos[i][0] = 0;
    0000010C 6A43                   MOV         R4,R10
    0000010E 7408                   ADD         #8,R4
    00000110 2AE2                   MOV.L       R14,@R10
         Snake.c    82            snakePos[i][1] = 0;
    00000112 1AE1                   MOV.L       R14,@(4,R10)
    00000114              L492:                             
    00000114 3452                   CMP/HS      R5,R4
    00000116 8BF9                   BF          L493
         Snake.c    83        }
         Snake.c    84        headX = WIDTH / 3;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000118 D536                   MOV.L       L573+14,R5 ; _headX
    0000011A E205                   MOV         #5,R2
         Snake.c    85        headY = HEIGHT / 2;
    0000011C D436                   MOV.L       L573+18,R4 ; _headY
    0000011E E307                   MOV         #7,R3
         Snake.c    86        dir = RIGHT;
         Snake.c    87        board[headX][headY] = SNAKE;
    00000120 9061                   MOV.W       L573,R0    ; H'0148
         Snake.c    88        board[headX-1][headY] = SNAKE;
         Snake.c    89        board[headX-2][headY] = SNAKE;
         Snake.c    90        snakeLen = 3;
    00000122 E103                   MOV         #3,R1
    00000124 2522                   MOV.L       R2,@R5
         Snake.c    91        snakePos[0][0] = headX;
    00000126 6A63                   MOV         R6,R10
    00000128 2432                   MOV.L       R3,@R4
    0000012A E33C                   MOV         #60,R3
    0000012C 2DC2                   MOV.L       R12,@R13
    0000012E 1F71                   MOV.L       R7,@(4,R15)
    00000130 07C6                   MOV.L       R12,@(R0,R7)
    00000132 6052                   MOV.L       @R5,R0
    00000134 6242                   MOV.L       @R4,R2
    00000136 70FF                   ADD         #-1,R0
    00000138 0037                   MUL.L       R3,R0
    0000013A 4208                   SHLL2       R2
    0000013C 001A                   STS         MACL,R0
    0000013E 307C                   ADD         R7,R0
    00000140 02C6                   MOV.L       R12,@(R0,R2)
    00000142 6052                   MOV.L       @R5,R0
    00000144 6242                   MOV.L       @R4,R2
    00000146 70FE                   ADD         #-2,R0
    00000148 0037                   MUL.L       R3,R0
    0000014A 4208                   SHLL2       R2
    0000014C 001A                   STS         MACL,R0
    0000014E 307C                   ADD         R7,R0
    00000150 02C6                   MOV.L       R12,@(R0,R2)
    00000152 D22A                   MOV.L       L573+22,R2 ; _snakeLen
    00000154 2212                   MOV.L       R1,@R2
    00000156 6152                   MOV.L       @R5,R1
    00000158 2612                   MOV.L       R1,@R6
         Snake.c    92        snakePos[0][1] = headY;
         Snake.c    93        snakePos[1][0] = headX-1;
         Snake.c    94        snakePos[1][1] = headY;
         Snake.c    95        snakePos[2][0] = headX-2;
         Snake.c    96        snakePos[2][1] = headY;
         Snake.c    97    
         Snake.c    98        dead = 0;
         Snake.c    99        board[WIDTH*2/3][HEIGHT/2] = FOOD;
    0000015A E3FF                   MOV         #-1,R3
    0000015C 6042                   MOV.L       @R4,R0
    0000015E 66A3                   MOV         R10,R6
    00000160 1A01                   MOV.L       R0,@(4,R10)
    00000162 7608                   ADD         #8,R6
    00000164 6152                   MOV.L       @R5,R1
    00000166 71FF                   ADD         #-1,R1
    00000168 2612                   MOV.L       R1,@R6
    0000016A 6042                   MOV.L       @R4,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000016C 1601                   MOV.L       R0,@(4,R6)
    0000016E 66A3                   MOV         R10,R6
    00000170 6152                   MOV.L       @R5,R1
    00000172 7610                   ADD         #16,R6
    00000174 71FE                   ADD         #-2,R1
    00000176 2612                   MOV.L       R1,@R6
    00000178 6042                   MOV.L       @R4,R0
    0000017A 1601                   MOV.L       R0,@(4,R6)
    0000017C 2BE2                   MOV.L       R14,@R11
    0000017E 51F1                   MOV.L       @(4,R15),R1
    00000180 9032                   MOV.W       L573+2,R0  ; H'02B0
         Snake.c   100        drawScreen();
    00000182 B1FF                   BSR         _drawScreen
    00000184 0136                   MOV.L       R3,@(R0,R1)
         Snake.c   101        while(1) {
    00000186              L495:                             
         Snake.c   102            GetKey(&key);
    00000186 DA1E                   MOV.L       L573+26,R10; _GetKey
    00000188 4A0B                   JSR         @R10
    0000018A 64F3                   MOV         R15,R4
         Snake.c   103            switch (key) {
    0000018C DA1D                   MOV.L       L573+30,R10; _KillTimer
    0000018E 60F2                   MOV.L       @R15,R0
    00000190 912B                   MOV.W       L573+4,R1  ; H'7542
    00000192 3010                   CMP/EQ      R1,R0
    00000194 890D                   BT          L450
    00000196 9129                   MOV.W       L573+6,R1  ; H'7547
    00000198 3010                   CMP/EQ      R1,R0
    0000019A 890C                   BT          L451
    0000019C 9127                   MOV.W       L573+8,R1  ; H'7545
    0000019E 3010                   CMP/EQ      R1,R0
    000001A0 890C                   BT          L452
    000001A2 9125                   MOV.W       L573+10,R1 ; H'7532
    000001A4 3010                   CMP/EQ      R1,R0
    000001A6 8911                   BT          L567
    000001A8 9123                   MOV.W       L573+12,R1 ; H'7534
    000001AA 3010                   CMP/EQ      R1,R0
    000001AC 890B                   BT          L454
    000001AE AFEA                   BRA         L495
    000001B0 0009                   NOP
    000001B2              L450:                            ; case label 
    000001B2 A004                   BRA         L431
         Snake.c   104                case KEY_CTRL_UP:
         Snake.c   105                    dir = UP;
    000001B4 2DE2                   MOV.L       R14,@R13
    000001B6              L451:                            ; case label 
         Snake.c   106                    game();
         Snake.c   107                    break;
         Snake.c   108                case KEY_CTRL_DOWN:
         Snake.c   109                    dir = DOWN;
    000001B6 E402                   MOV         #2,R4
    000001B8 A001                   BRA         L431
    000001BA 2D42                   MOV.L       R4,@R13
    000001BC              L452:                            ; case label 
         Snake.c   110                    game();
         Snake.c   111                    break;
         Snake.c   112                // case KEY_CTRL_LEFT:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Snake.c   113                //     dir = LEFT;
         Snake.c   114                //     break;
         Snake.c   115                case KEY_CTRL_RIGHT:
         Snake.c   116                    dir = RIGHT;
    000001BC 2DC2                   MOV.L       R12,@R13
    000001BE              L431:
         Snake.c   117                    game();
    000001BE B0C1                   BSR         _game
    000001C0 0009                   NOP
         Snake.c   118                    break;
    000001C2 AFE0                   BRA         L495
    000001C4 0009                   NOP
    000001C6              L454:                            ; case label 
         Snake.c   119                case KEY_CTRL_EXIT:
         Snake.c   120                    KillTimer(ID_USER_TIMER1);
         Snake.c   121                    titleScreen();
         Snake.c   122                    return;
         Snake.c   123                case KEY_CTRL_EXE:
         Snake.c   124                    if(dead) {
    000001C6 63B2                   MOV.L       @R11,R3
    000001C8 2338                   TST         R3,R3
    000001CA 89DC                   BT          L495
    000001CC              L567:                             
    000001CC 4A0B                   JSR         @R10
    000001CE E401                   MOV         #1,R4
         Snake.c   125                        KillTimer(ID_USER_TIMER1);
         Snake.c   126                        titleScreen();
    000001D0 BF16                   BSR         _titleScreen
    000001D2 0009                   NOP
         Snake.c   127                        return;
         Snake.c   128                    }
         Snake.c   129            }
         Snake.c   130        }
         Snake.c   131    }
    000001D4 7F08                   ADD         #8,R15
    000001D6 4F16                   LDS.L       @R15+,MACL
    000001D8 4F26                   LDS.L       @R15+,PR
    000001DA 6AF6                   MOV.L       @R15+,R10
    000001DC 6BF6                   MOV.L       @R15+,R11
    000001DE 6CF6                   MOV.L       @R15+,R12
    000001E0 6DF6                   MOV.L       @R15+,R13
    000001E2 000B                   RTS
    000001E4 6EF6                   MOV.L       @R15+,R14
    000001E6              L573:                             
    000001E6 0148                   .DATA.W     H'0148
    000001E8 02B0                   .DATA.W     H'02B0
    000001EA 7542                   .DATA.W     H'7542
    000001EC 7547                   .DATA.W     H'7547
    000001EE 7545                   .DATA.W     H'7545
    000001F0 7532                   .DATA.W     H'7532
    000001F2 7534                   .DATA.W     H'7534
    000001F4 <00000000>             .DATA.L     _headX
    000001F8 <00000000>             .DATA.L     _headY
    000001FC <00000000>             .DATA.L     _snakeLen
    00000200 <00000000>             .DATA.L     _GetKey
    00000204 <00000000>             .DATA.L     _KillTimer
         Snake.c   132    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Snake.c   133    int placeFood() {
    00000208              _placeFood:                      ; function: placeFood
                                                           ; frame size=2072
                                                           ; used runtime library name:
                                                           ; __modls
    00000208 2FE6                   MOV.L       R14,@-R15
         Snake.c   134        int emptyCells[WIDTH*HEIGHT][2];
         Snake.c   135        int emptyCount = 0;
    0000020A E600                   MOV         #0,R6
    0000020C 9088                   MOV.W       L574,R0    ; H'F808
    0000020E 6E63                   MOV         R6,R14
    00000210 2FD6                   MOV.L       R13,@-R15
         Snake.c   136        int x, y;
         Snake.c   137        int i, j;
         Snake.c   138        int randIndex;
         Snake.c   139        for(i = 0; i < WIDTH; ++i) {
    00000212 6563                   MOV         R6,R5
    00000214 2FB6                   MOV.L       R11,@-R15
    00000216 ED3C                   MOV         #60,R13
    00000218 2FA6                   MOV.L       R10,@-R15
    0000021A 2F96                   MOV.L       R9,@-R15
    0000021C 2F86                   MOV.L       R8,@-R15
    0000021E E90F                   MOV         #15,R9
    00000220 DB40                   MOV.L       L574+4,R11 ; _board
    00000222 E811                   MOV         #17,R8
    00000224 4F22                   STS.L       PR,@-R15
    00000226 4F12                   STS.L       MACL,@-R15
    00000228 3F0C                   ADD         R0,R15
    0000022A 6AF3                   MOV         R15,R10
    0000022C              L499:                             
    0000022C 05D7                   MUL.L       R13,R5
         Snake.c   140            for(j = 0; j < HEIGHT; ++j) {
    0000022E 6463                   MOV         R6,R4
    00000230 011A                   STS         MACL,R1
    00000232 31BC                   ADD         R11,R1
    00000234              L500:                             
         Snake.c   141                if(board[i][j] == EMPTY) {
    00000234 6043                   MOV         R4,R0
    00000236 4008                   SHLL2       R0
    00000238 031E                   MOV.L       @(R0,R1),R3
    0000023A 2338                   TST         R3,R3
    0000023C 8B06                   BF          L501
         Snake.c   142                    emptyCells[emptyCount][0] = i;
    0000023E 67E3                   MOV         R14,R7
    00000240 4708                   SHLL2       R7
    00000242 4700                   SHLL        R7
    00000244 37AC                   ADD         R10,R7
         Snake.c   143                    emptyCells[emptyCount][1] = j;
         Snake.c   144                    emptyCount++;
    00000246 7E01                   ADD         #1,R14
    00000248 2752                   MOV.L       R5,@R7
    0000024A 1741                   MOV.L       R4,@(4,R7)
    0000024C              L501:                             
    0000024C 7401                   ADD         #1,R4
    0000024E 3493                   CMP/GE      R9,R4
    00000250 8BF0                   BF          L500
    00000252 7501                   ADD         #1,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000254 3583                   CMP/GE      R8,R5
    00000256 8BE9                   BF          L499
         Snake.c   145                }
         Snake.c   146            }
         Snake.c   147        }
         Snake.c   148        if(emptyCount == 0) {
    00000258 2EE8                   TST         R14,R14
    0000025A 8B03                   BF          L502
         Snake.c   149            dead = 1;
    0000025C D332                   MOV.L       L574+8,R3  ; _dead
    0000025E E201                   MOV         #1,R2
         Snake.c   150            return;
    00000260 A013                   BRA         L503
    00000262 2322                   MOV.L       R2,@R3
    00000264              L502:                             
         Snake.c   151        }
         Snake.c   152        randIndex = rand() % emptyCount;
    00000264 D131                   MOV.L       L574+12,R1 ; _rand
    00000266 410B                   JSR         @R1
    00000268 0009                   NOP
    0000026A 6103                   MOV         R0,R1
    0000026C D330                   MOV.L       L574+16,R3 ; __modls
    0000026E 430B                   JSR         @R3
    00000270 60E3                   MOV         R14,R0
    00000272 6503                   MOV         R0,R5
         Snake.c   153        x = emptyCells[randIndex][0];
    00000274 4508                   SHLL2       R5
    00000276 4500                   SHLL        R5
    00000278 35AC                   ADD         R10,R5
         Snake.c   154        y = emptyCells[randIndex][1];
         Snake.c   155        board[x][y] = FOOD;
    0000027A E3FF                   MOV         #-1,R3
    0000027C 6452                   MOV.L       @R5,R4
    0000027E 5551                   MOV.L       @(4,R5),R5
    00000280 04D7                   MUL.L       R13,R4
    00000282 4508                   SHLL2       R5
    00000284 001A                   STS         MACL,R0
    00000286 30BC                   ADD         R11,R0
    00000288 0536                   MOV.L       R3,@(R0,R5)
         Snake.c   156    }
    0000028A              L503:                             
    0000028A 914A                   MOV.W       L574+2,R1  ; H'07F8
    0000028C 3F1C                   ADD         R1,R15
    0000028E 4F16                   LDS.L       @R15+,MACL
    00000290 4F26                   LDS.L       @R15+,PR
    00000292 68F6                   MOV.L       @R15+,R8
    00000294 69F6                   MOV.L       @R15+,R9
    00000296 6AF6                   MOV.L       @R15+,R10
    00000298 6BF6                   MOV.L       @R15+,R11
    0000029A 6DF6                   MOV.L       @R15+,R13
    0000029C 000B                   RTS
    0000029E 6EF6                   MOV.L       @R15+,R14
         Snake.c   157    
         Snake.c   158    int snakeCellGraph(int x, int y) {
    000002A0              _snakeCellGraph:                 ; function: snakeCellGraph
                                                           ; frame size=4
    000002A0 4F12                   STS.L       MACL,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002A2 6153                   MOV         R5,R1
    000002A4 D61F                   MOV.L       L574+4,R6  ; _board
    000002A6 E03C                   MOV         #60,R0
    000002A8 0407                   MUL.L       R0,R4
    000002AA 4108                   SHLL2       R1
    000002AC 001A                   STS         MACL,R0
    000002AE 306C                   ADD         R6,R0
    000002B0 001E                   MOV.L       @(R0,R1),R0
    000002B2 8801                   CMP/EQ      #1,R0
    000002B4 8F3E                   BF/S        L504
         Snake.c   159        int i = 15;
    000002B6 E70F                   MOV         #15,R7
         Snake.c   160        if(board[x][y] == SNAKE) {
         Snake.c   161            if(y>0 && board[x][y-1] == SNAKE) {
    000002B8 4515                   CMP/PL      R5
    000002BA 8B0A                   BF          L505
    000002BC E03C                   MOV         #60,R0
    000002BE 6353                   MOV         R5,R3
    000002C0 0407                   MUL.L       R0,R4
    000002C2 73FF                   ADD         #-1,R3
    000002C4 001A                   STS         MACL,R0
    000002C6 306C                   ADD         R6,R0
    000002C8 4308                   SHLL2       R3
    000002CA 003E                   MOV.L       @(R0,R3),R0
    000002CC 8801                   CMP/EQ      #1,R0
    000002CE 8B00                   BF          L505
         Snake.c   162                i -= 1;
    000002D0 E70E                   MOV         #14,R7
    000002D2              L505:                             
         Snake.c   163            }
         Snake.c   164            if(x<WIDTH-1 && board[x+1][y] == SNAKE) {
    000002D2 E210                   MOV         #16,R2
    000002D4 3423                   CMP/GE      R2,R4
    000002D6 8908                   BT          L506
    000002D8 E03C                   MOV         #60,R0
    000002DA 0407                   MUL.L       R0,R4
    000002DC 001A                   STS         MACL,R0
    000002DE 306C                   ADD         R6,R0
    000002E0 301C                   ADD         R1,R0
    000002E2 500F                   MOV.L       @(60,R0),R0
    000002E4 8801                   CMP/EQ      #1,R0
    000002E6 8B00                   BF          L506
         Snake.c   165                i -= 2;
    000002E8 77FE                   ADD         #-2,R7
    000002EA              L506:                             
         Snake.c   166            }
         Snake.c   167            if(y<HEIGHT-1 && board[x][y+1] == SNAKE) {
    000002EA E20E                   MOV         #14,R2
    000002EC 3523                   CMP/GE      R2,R5
    000002EE 8908                   BT          L507
    000002F0 E03C                   MOV         #60,R0
    000002F2 0407                   MUL.L       R0,R4
    000002F4 001A                   STS         MACL,R0
    000002F6 306C                   ADD         R6,R0
    000002F8 301C                   ADD         R1,R0
    000002FA 5001                   MOV.L       @(4,R0),R0
    000002FC 8801                   CMP/EQ      #1,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002FE 8B00                   BF          L507
         Snake.c   168                i -= 4;
    00000300 77FC                   ADD         #-4,R7
    00000302              L507:                             
         Snake.c   169            }
         Snake.c   170            if(x>0 && board[x-1][y] == SNAKE) {
    00000302 4415                   CMP/PL      R4
    00000304 8B09                   BF          L508
    00000306 6043                   MOV         R4,R0
    00000308 70FF                   ADD         #-1,R0
    0000030A E33C                   MOV         #60,R3
    0000030C 0037                   MUL.L       R3,R0
    0000030E 001A                   STS         MACL,R0
    00000310 306C                   ADD         R6,R0
    00000312 001E                   MOV.L       @(R0,R1),R0
    00000314 8801                   CMP/EQ      #1,R0
    00000316 8B00                   BF          L508
         Snake.c   171                i -= 8;
    00000318 77F8                   ADD         #-8,R7
    0000031A              L508:                             
         Snake.c   172            }
         Snake.c   173            return i;
    0000031A 6073                   MOV         R7,R0
    0000031C 000B                   RTS
    0000031E 4F16                   LDS.L       @R15+,MACL
    00000320              L574:                             
    00000320 F808                   .DATA.W     H'F808
    00000322 07F8                   .DATA.W     H'07F8
    00000324 <00000000>             .DATA.L     _board
    00000328 <00000000>             .DATA.L     _dead
    0000032C <00000000>             .DATA.L     _rand
    00000330 <00000000>             .DATA.L     __modls
    00000334              L504:                             
         Snake.c   174        }
         Snake.c   175        else if(board[x][y] == FOOD) {
    00000334 88FF                   CMP/EQ      #-1,R0
    00000336 8B02                   BF          L510
         Snake.c   176            return 16;
    00000338 E010                   MOV         #16,R0
    0000033A 000B                   RTS
    0000033C 4F16                   LDS.L       @R15+,MACL
    0000033E              L510:                             
         Snake.c   177        }
         Snake.c   178        return 0;
    0000033E E000                   MOV         #0,R0
         Snake.c   179    }
    00000340              L509:                             
    00000340 000B                   RTS
    00000342 4F16                   LDS.L       @R15+,MACL
         Snake.c   180    
         Snake.c   181    int game() {
    00000344              _game:                           ; function: game
                                                           ; frame size=12
    00000344 2FE6                   MOV.L       R14,@-R15
    00000346 4F22                   STS.L       PR,@-R15
    00000348 7FFC                   ADD         #-4,R15
         Snake.c   182        unsigned int key;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Snake.c   183        frame();
    0000034A B1A3                   BSR         _frame
    0000034C 0009                   NOP
         Snake.c   184        while(1) {
    0000034E              L513:                             
         Snake.c   185            GetKey(&key);
    0000034E DE28                   MOV.L       L575+12,R14; _GetKey
    00000350 4E0B                   JSR         @R14
    00000352 64F3                   MOV         R15,R4
    00000354 DE27                   MOV.L       L575+16,R14; _KillTimer
    00000356 D428                   MOV.L       L575+20,R4 ; _dir
    00000358 60F2                   MOV.L       @R15,R0
    0000035A 9143                   MOV.W       L575,R1    ; H'7542
    0000035C 3010                   CMP/EQ      R1,R0
    0000035E 8D11                   BT/S        L455
    00000360 6542                   MOV.L       @R4,R5
    00000362 9140                   MOV.W       L575+2,R1  ; H'7547
    00000364 3010                   CMP/EQ      R1,R0
    00000366 8915                   BT          L456
    00000368 913E                   MOV.W       L575+4,R1  ; H'7544
    0000036A 3010                   CMP/EQ      R1,R0
    0000036C 891B                   BT          L457
    0000036E 913C                   MOV.W       L575+6,R1  ; H'7545
    00000370 3010                   CMP/EQ      R1,R0
    00000372 8920                   BT          L458
    00000374 913A                   MOV.W       L575+8,R1  ; H'7532
    00000376 3010                   CMP/EQ      R1,R0
    00000378 892C                   BT          L569
    0000037A 9138                   MOV.W       L575+10,R1 ; H'7534
    0000037C 3010                   CMP/EQ      R1,R0
    0000037E 8925                   BT          L460
    00000380 AFE5                   BRA         L513
    00000382 0009                   NOP
    00000384              L455:                            ; case label 
         Snake.c   186            switch (key) {
         Snake.c   187                case KEY_CTRL_UP:
         Snake.c   188                    if(dir == LEFT || dir == RIGHT) {
    00000384 6053                   MOV         R5,R0
    00000386 8803                   CMP/EQ      #3,R0
    00000388 8902                   BT          L516
    0000038A 6053                   MOV         R5,R0
    0000038C 8801                   CMP/EQ      #1,R0
    0000038E 8BDE                   BF          L513
    00000390              L516:                             
    00000390 A007                   BRA         L568
         Snake.c   189                        dir = UP;
    00000392 E500                   MOV         #0,R5
    00000394              L456:                            ; case label 
         Snake.c   190                        frame();
         Snake.c   191                    }
         Snake.c   192                    break;
         Snake.c   193                case KEY_CTRL_DOWN:
         Snake.c   194                    if(dir == LEFT || dir == RIGHT) {
    00000394 6053                   MOV         R5,R0
    00000396 8803                   CMP/EQ      #3,R0
    00000398 8902                   BT          L518
    0000039A 6053                   MOV         R5,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000039C 8801                   CMP/EQ      #1,R0
    0000039E 8BD6                   BF          L513
    000003A0              L518:                             
         Snake.c   195                        dir = DOWN;
    000003A0 E502                   MOV         #2,R5
    000003A2              L568:                             
    000003A2 A00F                   BRA         L439
    000003A4 2452                   MOV.L       R5,@R4
    000003A6              L457:                            ; case label 
         Snake.c   196                        frame();
         Snake.c   197                    }
         Snake.c   198                    break;
         Snake.c   199                case KEY_CTRL_LEFT:
         Snake.c   200                    if(dir == UP || dir == DOWN) {
    000003A6 2558                   TST         R5,R5
    000003A8 8902                   BT          L520
    000003AA 6053                   MOV         R5,R0
    000003AC 8802                   CMP/EQ      #2,R0
    000003AE 8BCE                   BF          L513
    000003B0              L520:                             
         Snake.c   201                        dir = LEFT;
    000003B0 E503                   MOV         #3,R5
    000003B2 A007                   BRA         L439
    000003B4 2452                   MOV.L       R5,@R4
    000003B6              L458:                            ; case label 
         Snake.c   202                        frame();
         Snake.c   203                    }
         Snake.c   204                    break;
         Snake.c   205                case KEY_CTRL_RIGHT:
         Snake.c   206                    if(dir == UP || dir == DOWN) {
    000003B6 2558                   TST         R5,R5
    000003B8 8902                   BT          L522
    000003BA 6053                   MOV         R5,R0
    000003BC 8802                   CMP/EQ      #2,R0
    000003BE 8BC6                   BF          L513
    000003C0              L522:                             
         Snake.c   207                        dir = RIGHT;
    000003C0 E501                   MOV         #1,R5
    000003C2 2452                   MOV.L       R5,@R4
    000003C4              L439:
         Snake.c   208                        frame();
    000003C4 B166                   BSR         _frame
    000003C6 0009                   NOP
         Snake.c   209                    }
         Snake.c   210                    break;
    000003C8 AFC1                   BRA         L513
    000003CA 0009                   NOP
    000003CC              L460:                            ; case label 
         Snake.c   211                case KEY_CTRL_EXIT:
         Snake.c   212                    KillTimer(ID_USER_TIMER1);
         Snake.c   213                    titleScreen();
         Snake.c   214                    return;
         Snake.c   215                case KEY_CTRL_EXE:
         Snake.c   216                    if(dead) {
    000003CC D40B                   MOV.L       L575+24,R4 ; _dead
    000003CE 6342                   MOV.L       @R4,R3
    000003D0 2338                   TST         R3,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000003D2 89BC                   BT          L513
    000003D4              L569:                             
    000003D4 4E0B                   JSR         @R14
    000003D6 E401                   MOV         #1,R4
         Snake.c   217                        KillTimer(ID_USER_TIMER1);
         Snake.c   218                        titleScreen();
    000003D8 BE12                   BSR         _titleScreen
    000003DA 0009                   NOP
         Snake.c   219                        return;
         Snake.c   220                    }
         Snake.c   221            }
         Snake.c   222        }
         Snake.c   223    }
    000003DC 7F04                   ADD         #4,R15
    000003DE 4F26                   LDS.L       @R15+,PR
    000003E0 000B                   RTS
    000003E2 6EF6                   MOV.L       @R15+,R14
    000003E4              L575:                             
    000003E4 7542                   .DATA.W     H'7542
    000003E6 7547                   .DATA.W     H'7547
    000003E8 7544                   .DATA.W     H'7544
    000003EA 7545                   .DATA.W     H'7545
    000003EC 7532                   .DATA.W     H'7532
    000003EE 7534                   .DATA.W     H'7534
    000003F0 <00000000>             .DATA.L     _GetKey
    000003F4 <00000000>             .DATA.L     _KillTimer
    000003F8 <00000000>             .DATA.L     _dir
    000003FC <00000000>             .DATA.L     _dead
         Snake.c   224    
         Snake.c   225    void drawSnake() {
    00000400              _drawSnake:                      ; function: drawSnake
                                                           ; frame size=64
                                                           ; used runtime library name:
                                                           ; __quick_odd_mvn
    00000400 2FE6                   MOV.L       R14,@-R15
         Snake.c   226        DISPGRAPH graph;
         Snake.c   227        int i; int j;
         Snake.c   228        graph.WriteModify = IMB_WRITEMODIFY_NORMAL;
    00000402 E401                   MOV         #1,R4
    00000404 2FD6                   MOV.L       R13,@-R15
    00000406 E018                   MOV         #24,R0
    00000408 2FC6                   MOV.L       R12,@-R15
    0000040A 2FB6                   MOV.L       R11,@-R15
    0000040C 2FA6                   MOV.L       R10,@-R15
         Snake.c   229        graph.WriteKind = IMB_WRITEKIND_OVER;
         Snake.c   230        for(i = 0; i < WIDTH; ++i) {
    0000040E EA00                   MOV         #0,R10
    00000410 2F96                   MOV.L       R9,@-R15
    00000412 6CA3                   MOV         R10,R12
    00000414 2F86                   MOV.L       R8,@-R15
    00000416 E80F                   MOV         #15,R8
    00000418 4F22                   STS.L       PR,@-R15
    0000041A 4F12                   STS.L       MACL,@-R15
    0000041C 7FE4                   ADD         #-28,R15
    0000041E 0F44                   MOV.B       R4,@(R0,R15)
    00000420 E019                   MOV         #25,R0
    00000422 0F44                   MOV.B       R4,@(R0,R15)




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000424              L525:                             
    00000424 D388                   MOV.L       L576+2,R3  ; _board
    00000426 69C3                   MOV         R12,R9
         Snake.c   231            for(j = 0; j < HEIGHT; ++j) {
    00000428 6BA3                   MOV         R10,R11
    0000042A EE02                   MOV         #2,R14
    0000042C ED3C                   MOV         #60,R13
    0000042E 4908                   SHLL2       R9
    00000430 0CD7                   MUL.L       R13,R12
    00000432 0D1A                   STS         MACL,R13
    00000434 3D3C                   ADD         R3,R13
    00000436 A012                   BRA         L526
    00000438 792D                   ADD         #45,R9
    0000043A              L527:                             
         Snake.c   232                if(board[i][j] == EMPTY) {
    0000043A 63D2                   MOV.L       @R13,R3
    0000043C 2338                   TST         R3,R3
    0000043E 890B                   BT          L529
         Snake.c   233                    continue;
         Snake.c   234                }
         Snake.c   235                graph.x = i*4 +45;
    00000440 1F91                   MOV.L       R9,@(4,R15)
         Snake.c   236                graph.y = j*4 +2;
         Snake.c   237                graph.GraphData = filledGraph;
    00000442 61F3                   MOV         R15,R1
    00000444 D281                   MOV.L       L576+6,R2  ; _filledGraph
    00000446 710C                   ADD         #12,R1
    00000448 D381                   MOV.L       L576+10,R3 ; __quick_odd_mvn
    0000044A 1FE2                   MOV.L       R14,@(8,R15)
    0000044C 430B                   JSR         @R3
    0000044E E00C                   MOV         #12,R0
         Snake.c   238                Bdisp_WriteGraph_VRAM(&graph);
    00000450 D180                   MOV.L       L576+14,R1 ; _Bdisp_WriteGraph_VRAM
    00000452 64F3                   MOV         R15,R4
    00000454 410B                   JSR         @R1
    00000456 7404                   ADD         #4,R4
    00000458              L529:                             
    00000458 7B01                   ADD         #1,R11
    0000045A 7E04                   ADD         #4,R14
    0000045C 7D04                   ADD         #4,R13
    0000045E              L526:                             
    0000045E 3B83                   CMP/GE      R8,R11
    00000460 8BEB                   BF          L527
    00000462 7C01                   ADD         #1,R12
    00000464 E211                   MOV         #17,R2
    00000466 3C23                   CMP/GE      R2,R12
    00000468 8BDC                   BF          L525
         Snake.c   239            }
         Snake.c   240        }
         Snake.c   241        // Hollow out snake
         Snake.c   242        for(i = 0; i < snakeLen-1; ++i) {
    0000046A D87B                   MOV.L       L576+18,R8 ; _snakeLen
    0000046C DD7B                   MOV.L       L576+22,R13; _Bdisp_ClearLineVRAM
    0000046E A041                   BRA         L530
    00000470 69A3                   MOV         R10,R9
    00000472              L531:                             
         Snake.c   243            Bdisp_ClearLineVRAM(




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Snake.c   244                snakePos[i][0]*4 + 46, snakePos[i][1]*4 + 3,
         Snake.c   245                snakePos[i+1][0]*4 + 46, snakePos[i+1][1]*4 + 3);
    00000472 6E93                   MOV         R9,R14
    00000474 D37A                   MOV.L       L576+26,R3 ; _snakePos
    00000476 4E08                   SHLL2       R14
    00000478 4E00                   SHLL        R14
    0000047A 3E3C                   ADD         R3,R14
    0000047C 2FE2                   MOV.L       R14,@R15
    0000047E 6CE3                   MOV         R14,R12
    00000480 64E2                   MOV.L       @R14,R4
    00000482 6AE3                   MOV         R14,R10
    00000484 7C08                   ADD         #8,R12
    00000486 6BC3                   MOV         R12,R11
    00000488 66C2                   MOV.L       @R12,R6
    0000048A 7A04                   ADD         #4,R10
    0000048C 65A2                   MOV.L       @R10,R5
    0000048E 4408                   SHLL2       R4
    00000490 7B04                   ADD         #4,R11
    00000492 4608                   SHLL2       R6
    00000494 67B2                   MOV.L       @R11,R7
    00000496 4508                   SHLL2       R5
    00000498 4708                   SHLL2       R7
    0000049A 7703                   ADD         #3,R7
    0000049C 762E                   ADD         #46,R6
    0000049E 7503                   ADD         #3,R5
    000004A0 4D0B                   JSR         @R13
    000004A2 742E                   ADD         #46,R4
         Snake.c   246            Bdisp_ClearLineVRAM(
         Snake.c   247                snakePos[i][0]*4 + 46, snakePos[i][1]*4 + 4,
         Snake.c   248                snakePos[i+1][0]*4 + 46, snakePos[i+1][1]*4 + 4);
    000004A4 67B2                   MOV.L       @R11,R7
    000004A6 4708                   SHLL2       R7
    000004A8 66C2                   MOV.L       @R12,R6
    000004AA 7704                   ADD         #4,R7
    000004AC 65A2                   MOV.L       @R10,R5
    000004AE 4608                   SHLL2       R6
    000004B0 64E2                   MOV.L       @R14,R4
    000004B2 4508                   SHLL2       R5
    000004B4 762E                   ADD         #46,R6
    000004B6 7504                   ADD         #4,R5
    000004B8 4408                   SHLL2       R4
    000004BA 4D0B                   JSR         @R13
    000004BC 742E                   ADD         #46,R4
         Snake.c   249            Bdisp_ClearLineVRAM(
         Snake.c   250                snakePos[i][0]*4 + 47, snakePos[i][1]*4 + 3,
         Snake.c   251                snakePos[i+1][0]*4 + 47, snakePos[i+1][1]*4 + 3);
    000004BE 67B2                   MOV.L       @R11,R7
    000004C0 66C2                   MOV.L       @R12,R6
    000004C2 4708                   SHLL2       R7
    000004C4 65A2                   MOV.L       @R10,R5
    000004C6 4608                   SHLL2       R6
    000004C8 64E2                   MOV.L       @R14,R4
    000004CA 7703                   ADD         #3,R7
    000004CC 762F                   ADD         #47,R6
    000004CE 4508                   SHLL2       R5
    000004D0 7503                   ADD         #3,R5
    000004D2 4408                   SHLL2       R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004D4 4D0B                   JSR         @R13
    000004D6 742F                   ADD         #47,R4
         Snake.c   252            Bdisp_ClearLineVRAM(
         Snake.c   253                snakePos[i][0]*4 + 47, snakePos[i][1]*4 + 4,
         Snake.c   254                snakePos[i+1][0]*4 + 47, snakePos[i+1][1]*4 + 4);
    000004D8 67B2                   MOV.L       @R11,R7
    000004DA 4708                   SHLL2       R7
    000004DC 66C2                   MOV.L       @R12,R6
    000004DE 7704                   ADD         #4,R7
    000004E0 65A2                   MOV.L       @R10,R5
    000004E2 4608                   SHLL2       R6
    000004E4 64E2                   MOV.L       @R14,R4
    000004E6 4508                   SHLL2       R5
    000004E8 762F                   ADD         #47,R6
    000004EA 7504                   ADD         #4,R5
    000004EC 4408                   SHLL2       R4
    000004EE 4D0B                   JSR         @R13
    000004F0 742F                   ADD         #47,R4
    000004F2 7901                   ADD         #1,R9
    000004F4              L530:                             
    000004F4 6382                   MOV.L       @R8,R3
    000004F6 73FF                   ADD         #-1,R3
    000004F8 3933                   CMP/GE      R3,R9
    000004FA 8BBA                   BF          L531
         Snake.c   255    
         Snake.c   256        }
         Snake.c   257    }
    000004FC 7F1C                   ADD         #28,R15
    000004FE 4F16                   LDS.L       @R15+,MACL
    00000500 4F26                   LDS.L       @R15+,PR
    00000502 68F6                   MOV.L       @R15+,R8
    00000504 69F6                   MOV.L       @R15+,R9
    00000506 6AF6                   MOV.L       @R15+,R10
    00000508 6BF6                   MOV.L       @R15+,R11
    0000050A 6CF6                   MOV.L       @R15+,R12
    0000050C 6DF6                   MOV.L       @R15+,R13
    0000050E 000B                   RTS
    00000510 6EF6                   MOV.L       @R15+,R14
         Snake.c   258    
         Snake.c   259    void itoa(int n, char *str) {
    00000512              _itoa:                           ; function: itoa
                                                           ; frame size=8
                                                           ; used runtime library name:
                                                           ; __divls, __modls
         Snake.c   260        int i = 0, j;
         Snake.c   261        if (n == 0) {
    00000512 2448                   TST         R4,R4
    00000514 2FD6                   MOV.L       R13,@-R15
    00000516 ED00                   MOV         #0,R13
    00000518 4F22                   STS.L       PR,@-R15
    0000051A 8F05                   BF/S        L532
    0000051C 67D3                   MOV         R13,R7
         Snake.c   262            str[i++] = '0'; // Handle 0 explicitly
    0000051E 6073                   MOV         R7,R0
    00000520 7701                   ADD         #1,R7
    00000522 E330                   MOV         #48,R3
    00000524 A013                   BRA         L533




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000526 0534                   MOV.B       R3,@(R0,R5)
    00000528              L532:                             
         Snake.c   263        } else {
         Snake.c   264            while(n > 0) {
    00000528 4415                   CMP/PL      R4
    0000052A 8F10                   BF/S        L533
    0000052C E60A                   MOV         #10,R6
    0000052E              L535:                             
         Snake.c   265                str[i++] = n % 10 + '0';
    0000052E 6273                   MOV         R7,R2
    00000530 D34C                   MOV.L       L576+30,R3 ; __modls
    00000532 6143                   MOV         R4,R1
    00000534 7701                   ADD         #1,R7
    00000536 325C                   ADD         R5,R2
    00000538 430B                   JSR         @R3
    0000053A 6063                   MOV         R6,R0
    0000053C 7030                   ADD         #48,R0
    0000053E 2200                   MOV.B       R0,@R2
         Snake.c   266                n /= 10;
    00000540 D249                   MOV.L       L576+34,R2 ; __divls
    00000542 6063                   MOV         R6,R0
    00000544 420B                   JSR         @R2
    00000546 6143                   MOV         R4,R1
    00000548 6403                   MOV         R0,R4
    0000054A 4415                   CMP/PL      R4
    0000054C 89EF                   BT          L535
    0000054E              L533:                             
         Snake.c   267            }
         Snake.c   268        }
         Snake.c   269        str[i] = '\0'; // Null-terminate the string
    0000054E 6073                   MOV         R7,R0
    00000550 05D4                   MOV.B       R13,@(R0,R5)
    00000552 6673                   MOV         R7,R6
    00000554 76FF                   ADD         #-1,R6
    00000556 365C                   ADD         R5,R6
    00000558 E400                   MOV         #0,R4
    0000055A 345C                   ADD         R5,R4
    0000055C 6573                   MOV         R7,R5
    0000055E E300                   MOV         #0,R3
    00000560 3357                   CMP/GT      R5,R3
    00000562 353E                   ADDC        R3,R5
    00000564 4521                   SHAR        R5
         Snake.c   270        // Reverse the string
         Snake.c   271        for(j = 0; j < i/2; ++j) {
    00000566 4515                   CMP/PL      R5
    00000568 8F09                   BF/S        L536
    0000056A 60D3                   MOV         R13,R0
    0000056C              L537:                             
         Snake.c   272            char tmp = str[j];
    0000056C 6740                   MOV.B       @R4,R7
    0000056E 7001                   ADD         #1,R0
         Snake.c   273            str[j] = str[i-j-1];
    00000570 6360                   MOV.B       @R6,R3
    00000572 3053                   CMP/GE      R5,R0
    00000574 2430                   MOV.B       R3,@R4
         Snake.c   274            str[i-j-1] = tmp;
    00000576 2670                   MOV.B       R7,@R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000578 76FF                   ADD         #-1,R6
    0000057A 8FF7                   BF/S        L537
    0000057C 7401                   ADD         #1,R4
    0000057E              L536:                             
         Snake.c   275        }
         Snake.c   276    }
    0000057E 4F26                   LDS.L       @R15+,PR
    00000580 000B                   RTS
    00000582 6DF6                   MOV.L       @R15+,R13
         Snake.c   277    
         Snake.c   278    int drawScreen() {
    00000584              _drawScreen:                     ; function: drawScreen
                                                           ; frame size=20
    00000584 2FE6                   MOV.L       R14,@-R15
    00000586 4F22                   STS.L       PR,@-R15
         Snake.c   279        char str[10];
         Snake.c   280        int i;
         Snake.c   281        Bdisp_AllClr_VRAM();
    00000588 D338                   MOV.L       L576+38,R3 ; _Bdisp_AllClr_VRAM
    0000058A 7FF4                   ADD         #-12,R15
    0000058C 430B                   JSR         @R3
    0000058E 0009                   NOP
         Snake.c   282        Bdisp_DrawLineVRAM(43, 0, 43, 63);
    00000590 DE37                   MOV.L       L576+42,R14; _Bdisp_DrawLineVRAM
    00000592 E73F                   MOV         #63,R7
    00000594 E62B                   MOV         #43,R6
    00000596 E500                   MOV         #0,R5
    00000598 4E0B                   JSR         @R14
    0000059A 6463                   MOV         R6,R4
         Snake.c   283        Bdisp_DrawLineVRAM(43, 63, 114, 63);
    0000059C E73F                   MOV         #63,R7
    0000059E E672                   MOV         #114,R6
    000005A0 6573                   MOV         R7,R5
    000005A2 4E0B                   JSR         @R14
    000005A4 E42B                   MOV         #43,R4
         Snake.c   284        Bdisp_DrawLineVRAM(114, 63, 114, 0);
    000005A6 E700                   MOV         #0,R7
    000005A8 E672                   MOV         #114,R6
    000005AA E53F                   MOV         #63,R5
    000005AC 4E0B                   JSR         @R14
    000005AE 6463                   MOV         R6,R4
         Snake.c   285        Bdisp_DrawLineVRAM(114, 0, 43, 0);
    000005B0 E700                   MOV         #0,R7
    000005B2 E62B                   MOV         #43,R6
    000005B4 6573                   MOV         R7,R5
    000005B6 4E0B                   JSR         @R14
    000005B8 E472                   MOV         #114,R4
         Snake.c   286        Bdisp_DrawLineVRAM(44, 1, 44, 62);
    000005BA E73E                   MOV         #62,R7
    000005BC E62C                   MOV         #44,R6
    000005BE E501                   MOV         #1,R5
    000005C0 4E0B                   JSR         @R14
    000005C2 6463                   MOV         R6,R4
         Snake.c   287        Bdisp_DrawLineVRAM(44, 62, 113, 62);
    000005C4 E73E                   MOV         #62,R7
    000005C6 E671                   MOV         #113,R6
    000005C8 6573                   MOV         R7,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005CA 4E0B                   JSR         @R14
    000005CC E42C                   MOV         #44,R4
         Snake.c   288        Bdisp_DrawLineVRAM(113, 62, 113, 1);
    000005CE E701                   MOV         #1,R7
    000005D0 E671                   MOV         #113,R6
    000005D2 E53E                   MOV         #62,R5
    000005D4 4E0B                   JSR         @R14
    000005D6 6463                   MOV         R6,R4
         Snake.c   289        Bdisp_DrawLineVRAM(113, 1, 44, 1);
    000005D8 E701                   MOV         #1,R7
    000005DA E62C                   MOV         #44,R6
    000005DC 6573                   MOV         R7,R5
    000005DE 4E0B                   JSR         @R14
    000005E0 E471                   MOV         #113,R4
         Snake.c   290        drawSnake();
    000005E2 BF0D                   BSR         _drawSnake
    000005E4 0009                   NOP
         Snake.c   291    
         Snake.c   292        PrintMini(14, 14, "LEN", 0);
    000005E6 E700                   MOV         #0,R7
    000005E8 D623                   MOV.L       L576+50,R6 ; L390
    000005EA E50E                   MOV         #14,R5
    000005EC DE21                   MOV.L       L576+46,R14; _PrintMini
    000005EE 4E0B                   JSR         @R14
    000005F0 6453                   MOV         R5,R4
         Snake.c   293        itoa(snakeLen, str);
    000005F2 65F3                   MOV         R15,R5
    000005F4 D318                   MOV.L       L576+18,R3 ; _snakeLen
    000005F6 BF8C                   BSR         _itoa
    000005F8 6432                   MOV.L       @R3,R4
         Snake.c   294        PrintMini(14, 20, str, 0);
    000005FA E700                   MOV         #0,R7
    000005FC 66F3                   MOV         R15,R6
    000005FE E514                   MOV         #20,R5
    00000600 4E0B                   JSR         @R14
    00000602 E40E                   MOV         #14,R4
         Snake.c   295        PrintMini(14, 40, "SPD", 0);
    00000604 D61D                   MOV.L       L576+54,R6 ; L391
    00000606 E528                   MOV         #40,R5
    00000608 E700                   MOV         #0,R7
    0000060A 4E0B                   JSR         @R14
    0000060C E40E                   MOV         #14,R4
         Snake.c   296        switch (speed)
    0000060E D31C                   MOV.L       L576+58,R3 ; _speed
    00000610 6032                   MOV.L       @R3,R0
    00000612 8800                   CMP/EQ      #0,R0
    00000614 8905                   BT          L463
    00000616 8801                   CMP/EQ      #1,R0
    00000618 8906                   BT          L465
    0000061A 8802                   CMP/EQ      #2,R0
    0000061C 8907                   BT          L467
    0000061E A00B                   BRA         L538
    00000620 0009                   NOP
    00000622              L463:                            ; case label 
         Snake.c   297        {
         Snake.c   298            case SPEED_LO:
         Snake.c   299                PrintMini(14, 46, "LO", 0);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000622 D618                   MOV.L       L576+62,R6 ; L393
         Snake.c   300                break;
    00000624 A005                   BRA         L571
    00000626 E700                   MOV         #0,R7
    00000628              L465:                            ; case label 
         Snake.c   301            case SPEED_MD:
         Snake.c   302                PrintMini(14, 46, "MD", 0);
    00000628 D617                   MOV.L       L576+66,R6 ; L394
         Snake.c   303                break;
    0000062A A002                   BRA         L571
    0000062C E700                   MOV         #0,R7
    0000062E              L467:                            ; case label 
         Snake.c   304            case SPEED_HI:
         Snake.c   305                PrintMini(14, 46, "HI", 0);
    0000062E E700                   MOV         #0,R7
    00000630 D616                   MOV.L       L576+70,R6 ; L395
         Snake.c   306                break;
    00000632              L571:                             
    00000632 E52E                   MOV         #46,R5
    00000634 4E0B                   JSR         @R14
    00000636 E40E                   MOV         #14,R4
         Snake.c   307            default:
         Snake.c   308                break;
    00000638              L538:                             
         Snake.c   309        }
         Snake.c   310    
         Snake.c   311        Bdisp_PutDisp_DD();
    00000638 D315                   MOV.L       L576+74,R3 ; _Bdisp_PutDisp_DD
    0000063A 430B                   JSR         @R3
    0000063C 0009                   NOP
         Snake.c   312    }
    0000063E 7F0C                   ADD         #12,R15
    00000640 4F26                   LDS.L       @R15+,PR
    00000642 000B                   RTS
    00000644 6EF6                   MOV.L       @R15+,R14
    00000646              L576:                             
    00000646 0000                   .DATA.W     0
    00000648 <00000000>             .DATA.L     _board
    0000064C <00000000>             .DATA.L     _filledGraph
    00000650 <00000000>             .DATA.L     __quick_odd_mvn
    00000654 <00000000>             .DATA.L     _Bdisp_WriteGraph_VRAM
    00000658 <00000000>             .DATA.L     _snakeLen
    0000065C <00000000>             .DATA.L     _Bdisp_ClearLineVRAM
    00000660 <00000000>             .DATA.L     _snakePos
    00000664 <00000000>             .DATA.L     __modls
    00000668 <00000000>             .DATA.L     __divls
    0000066C <00000000>             .DATA.L     _Bdisp_AllClr_VRAM
    00000670 <00000000>             .DATA.L     _Bdisp_DrawLineVRAM
    00000674 <00000000>             .DATA.L     _PrintMini
    00000678 <00000000>             .DATA.L     L390
    0000067C <00000000>             .DATA.L     L391
    00000680 <00000000>             .DATA.L     _speed
    00000684 <00000000>             .DATA.L     L393
    00000688 <00000000>             .DATA.L     L394
    0000068C <00000000>             .DATA.L     L395
    00000690 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
         Snake.c   313    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Snake.c   314    int frame() {
    00000694              _frame:                          ; function: frame
                                                           ; frame size=48
    00000694 2FE6                   MOV.L       R14,@-R15
    00000696 2FD6                   MOV.L       R13,@-R15
    00000698 2FC6                   MOV.L       R12,@-R15
    0000069A 2FB6                   MOV.L       R11,@-R15
    0000069C 2FA6                   MOV.L       R10,@-R15
    0000069E 2F96                   MOV.L       R9,@-R15
    000006A0 2F86                   MOV.L       R8,@-R15
    000006A2 4F22                   STS.L       PR,@-R15
    000006A4 4F12                   STS.L       MACL,@-R15
    000006A6 7FF4                   ADD         #-12,R15
         Snake.c   315        const nextFrameTime = speed == SPEED_HI ? 140
         Snake.c   316         : speed == SPEED_MD ? 210 : 280;
    000006A8 D42C                   MOV.L       L577+6,R4  ; _speed
    000006AA 6042                   MOV.L       @R4,R0
    000006AC 8802                   CMP/EQ      #2,R0
    000006AE 8B02                   BF          L539
    000006B0 9351                   MOV.W       L577,R3    ; H'008C
    000006B2 A006                   BRA         L541
    000006B4 0009                   NOP
    000006B6              L539:                             
    000006B6 8801                   CMP/EQ      #1,R0
    000006B8 8B02                   BF          L540
    000006BA 934D                   MOV.W       L577+2,R3  ; H'00D2
    000006BC A001                   BRA         L541
    000006BE 0009                   NOP
    000006C0              L540:                             
    000006C0 934B                   MOV.W       L577+4,R3  ; H'0118
    000006C2              L541:                             
    000006C2 1F31                   MOV.L       R3,@(4,R15)
         Snake.c   317        int i, j;
         Snake.c   318        const int dx = dir == RIGHT ? 1 : dir == LEFT ? -1 : 0;
    000006C4 D426                   MOV.L       L577+10,R4 ; _dir
    000006C6 6042                   MOV.L       @R4,R0
    000006C8 8801                   CMP/EQ      #1,R0
    000006CA 8B01                   BF          L543
    000006CC A005                   BRA         L545
    000006CE E601                   MOV         #1,R6
    000006D0              L543:                             
    000006D0 8803                   CMP/EQ      #3,R0
    000006D2 8B01                   BF          L544
    000006D4 A001                   BRA         L545
    000006D6 E6FF                   MOV         #-1,R6
    000006D8              L544:                             
    000006D8 E600                   MOV         #0,R6
    000006DA              L545:                             
         Snake.c   319        const int dy = dir == DOWN ? 1 : dir == UP ? -1 : 0;
    000006DA 6042                   MOV.L       @R4,R0
    000006DC 8802                   CMP/EQ      #2,R0
    000006DE 8B01                   BF          L547
    000006E0 A006                   BRA         L549
    000006E2 E501                   MOV         #1,R5
    000006E4              L547:                             
    000006E4 6342                   MOV.L       @R4,R3
    000006E6 2338                   TST         R3,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006E8 8B01                   BF          L548
    000006EA A001                   BRA         L549
    000006EC E5FF                   MOV         #-1,R5
    000006EE              L548:                             
    000006EE E500                   MOV         #0,R5
    000006F0              L549:                             
         Snake.c   320        const tailX = snakePos[snakeLen-1][0];
    000006F0 DB1C                   MOV.L       L577+14,R11; _snakePos
    000006F2 DC1D                   MOV.L       L577+18,R12; _snakeLen
         Snake.c   321        const tailY = snakePos[snakeLen-1][1];
         Snake.c   322        const int newX = headX + dx;
    000006F4 D31D                   MOV.L       L577+22,R3 ; _headX
    000006F6 64C2                   MOV.L       @R12,R4
    000006F8 6E32                   MOV.L       @R3,R14
    000006FA 74FF                   ADD         #-1,R4
         Snake.c   323        const int newY = headY + dy;
    000006FC D21C                   MOV.L       L577+26,R2 ; _headY
    000006FE 3E6C                   ADD         R6,R14
         Snake.c   324        int ateFood;
         Snake.c   325        KillTimer(ID_USER_TIMER1);
    00000700 D11C                   MOV.L       L577+30,R1 ; _KillTimer
    00000702 4408                   SHLL2       R4
    00000704 6D22                   MOV.L       @R2,R13
    00000706 4400                   SHLL        R4
    00000708 34BC                   ADD         R11,R4
    0000070A 3D5C                   ADD         R5,R13
    0000070C 6A42                   MOV.L       @R4,R10
    0000070E 5941                   MOV.L       @(4,R4),R9
    00000710 410B                   JSR         @R1
    00000712 E401                   MOV         #1,R4
         Snake.c   326        if(dead) return;
    00000714 D218                   MOV.L       L577+34,R2 ; _dead
    00000716 6322                   MOV.L       @R2,R3
    00000718 2338                   TST         R3,R3
    0000071A 8901                   BT          L578
    0000071C A0B5                   BRA         L552
    0000071E 0009                   NOP
    00000720              L578:                             
         Snake.c   327        if(Bdisp_GetPoint_VRAM(0,0) == 1) {  // If at calculator menu
    00000720 D316                   MOV.L       L577+38,R3 ; _Bdisp_GetPoint_VRAM
    00000722 E500                   MOV         #0,R5
    00000724 430B                   JSR         @R3
    00000726 6453                   MOV         R5,R4
    00000728 8801                   CMP/EQ      #1,R0
    0000072A 8B2D                   BF          L553
         Snake.c   328            if(!dead) {
    0000072C D212                   MOV.L       L577+34,R2 ; _dead
    0000072E 6322                   MOV.L       @R2,R3
    00000730 2338                   TST         R3,R3
    00000732 8901                   BT          L579
    00000734 A0A9                   BRA         L552
    00000736 0009                   NOP
    00000738              L579:                             
         Snake.c   329                SetTimer(ID_USER_TIMER1, nextFrameTime, frame);
    00000738 D611                   MOV.L       L577+42,R6 ; _frame
    0000073A E401                   MOV         #1,R4
    0000073C D311                   MOV.L       L577+46,R3 ; _SetTimer




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000073E 55F1                   MOV.L       @(4,R15),R5
    00000740 7F0C                   ADD         #12,R15
    00000742 4F16                   LDS.L       @R15+,MACL
    00000744 4F26                   LDS.L       @R15+,PR
    00000746 68F6                   MOV.L       @R15+,R8
    00000748 69F6                   MOV.L       @R15+,R9
    0000074A 6AF6                   MOV.L       @R15+,R10
    0000074C 6BF6                   MOV.L       @R15+,R11
    0000074E 6CF6                   MOV.L       @R15+,R12
    00000750 6DF6                   MOV.L       @R15+,R13
    00000752 432B                   JMP         @R3
    00000754 6EF6                   MOV.L       @R15+,R14
    00000756              L577:                             
    00000756 008C                   .DATA.W     H'008C
    00000758 00D2                   .DATA.W     H'00D2
    0000075A 0118                   .DATA.W     H'0118
    0000075C <00000000>             .DATA.L     _speed
    00000760 <00000000>             .DATA.L     _dir
    00000764 <00000000>             .DATA.L     _snakePos
    00000768 <00000000>             .DATA.L     _snakeLen
    0000076C <00000000>             .DATA.L     _headX
    00000770 <00000000>             .DATA.L     _headY
    00000774 <00000000>             .DATA.L     _KillTimer
    00000778 <00000000>             .DATA.L     _dead
    0000077C <00000000>             .DATA.L     _Bdisp_GetPoint_VRAM
    00000780 <00000000>             .DATA.L     _frame
    00000784 <00000000>             .DATA.L     _SetTimer
    00000788              L553:                             
         Snake.c   330            }
         Snake.c   331            return;
         Snake.c   332        }
         Snake.c   333        if(newX < 0 || newX >= WIDTH || newY < 0 || newY >= HEIGHT) {
    00000788 4E11                   CMP/PZ      R14
    0000078A 8B16                   BF          L440
    0000078C E311                   MOV         #17,R3
    0000078E 3E33                   CMP/GE      R3,R14
    00000790 8913                   BT          L440
    00000792 4D11                   CMP/PZ      R13
    00000794 8B11                   BF          L440
    00000796 E20F                   MOV         #15,R2
    00000798 3D23                   CMP/GE      R2,R13
    0000079A 890E                   BT          L440
    0000079C D34A                   MOV.L       L580,R3    ; _board
    0000079E 68D3                   MOV         R13,R8
    000007A0 E43C                   MOV         #60,R4
    000007A2 4808                   SHLL2       R8
    000007A4 0E47                   MUL.L       R4,R14
    000007A6 6083                   MOV         R8,R0
    000007A8 041A                   STS         MACL,R4
    000007AA 343C                   ADD         R3,R4
    000007AC 004E                   MOV.L       @(R0,R4),R0
    000007AE 8801                   CMP/EQ      #1,R0
    000007B0 8B07                   BF          L557
    000007B2 3EA0                   CMP/EQ      R10,R14
    000007B4 8B01                   BF          L440
    000007B6 3D90                   CMP/EQ      R9,R13
    000007B8 8903                   BT          L557




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007BA              L440:
         Snake.c   334            dead = 1;
         Snake.c   335            return;
         Snake.c   336        }
         Snake.c   337        if(board[newX][newY] == SNAKE && !(newX == tailX && newY == tailY)) {
         Snake.c   338            dead = 1;
    000007BA E301                   MOV         #1,R3
    000007BC D243                   MOV.L       L580+4,R2  ; _dead
         Snake.c   339            return;
    000007BE A064                   BRA         L552
    000007C0 2232                   MOV.L       R3,@R2
    000007C2              L557:                             
         Snake.c   340        }
         Snake.c   341        ateFood = board[newX][newY] == FOOD;
    000007C2 6043                   MOV         R4,R0
    000007C4 008E                   MOV.L       @(R0,R8),R0
    000007C6 66B3                   MOV         R11,R6
    000007C8 88FF                   CMP/EQ      #-1,R0
    000007CA 0029                   MOVT        R0
    000007CC 1F02                   MOV.L       R0,@(8,R15)
         Snake.c   342        for(i = snakeLen-1; i > 0; --i) {
    000007CE 64C2                   MOV.L       @R12,R4
    000007D0 74FF                   ADD         #-1,R4
    000007D2 6543                   MOV         R4,R5
    000007D4 75FF                   ADD         #-1,R5
    000007D6 4508                   SHLL2       R5
    000007D8 4500                   SHLL        R5
    000007DA 4408                   SHLL2       R4
    000007DC 4400                   SHLL        R4
    000007DE 346C                   ADD         R6,R4
    000007E0 3466                   CMP/HI      R6,R4
    000007E2 8F0B                   BF/S        L559
    000007E4 35BC                   ADD         R11,R5
    000007E6              L560:                             
         Snake.c   343            snakePos[i][0] = snakePos[i-1][0];
    000007E6 6743                   MOV         R4,R7
    000007E8 2F52                   MOV.L       R5,@R15
    000007EA 6352                   MOV.L       @R5,R3
    000007EC 2432                   MOV.L       R3,@R4
    000007EE 74F8                   ADD         #-8,R4
         Snake.c   344            snakePos[i][1] = snakePos[i-1][1];
    000007F0 62F2                   MOV.L       @R15,R2
    000007F2 3466                   CMP/HI      R6,R4
    000007F4 5321                   MOV.L       @(4,R2),R3
    000007F6 1731                   MOV.L       R3,@(4,R7)
    000007F8 8DF5                   BT/S        L560
    000007FA 75F8                   ADD         #-8,R5
    000007FC              L559:                             
    000007FC 53F2                   MOV.L       @(8,R15),R3
    000007FE E53C                   MOV         #60,R5
    00000800 0A57                   MUL.L       R5,R10
    00000802 6493                   MOV         R9,R4
    00000804 051A                   STS         MACL,R5
    00000806 2338                   TST         R3,R3
    00000808 8D15                   BT/S        L561
    0000080A 4408                   SHLL2       R4
         Snake.c   345        }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Snake.c   346        if(ateFood) {
         Snake.c   347            snakePos[snakeLen][0] = tailX;
    0000080C 63C2                   MOV.L       @R12,R3
    0000080E 4308                   SHLL2       R3
    00000810 4300                   SHLL        R3
    00000812 33BC                   ADD         R11,R3
    00000814 23A2                   MOV.L       R10,@R3
         Snake.c   348            snakePos[snakeLen][1] = tailY;
    00000816 62C2                   MOV.L       @R12,R2
    00000818 4208                   SHLL2       R2
    0000081A 4200                   SHLL        R2
    0000081C 32BC                   ADD         R11,R2
    0000081E 1291                   MOV.L       R9,@(4,R2)
         Snake.c   349            snakeLen++;
    00000820 63C2                   MOV.L       @R12,R3
    00000822 7301                   ADD         #1,R3
    00000824 2C32                   MOV.L       R3,@R12
         Snake.c   350            board[tailX][tailY] = SNAKE;
    00000826 E301                   MOV         #1,R3
    00000828 D227                   MOV.L       L580,R2    ; _board
    0000082A 325C                   ADD         R5,R2
    0000082C 342C                   ADD         R2,R4
         Snake.c   351            placeFood();
    0000082E BCEB                   BSR         _placeFood
    00000830 2432                   MOV.L       R3,@R4
    00000832 A005                   BRA         L562
    00000834 0009                   NOP
    00000836              L561:                             
         Snake.c   352        } else {
         Snake.c   353            board[tailX][tailY] = EMPTY;
    00000836 E300                   MOV         #0,R3
    00000838 D223                   MOV.L       L580,R2    ; _board
    0000083A 325C                   ADD         R5,R2
    0000083C 342C                   ADD         R2,R4
    0000083E 2432                   MOV.L       R3,@R4
    00000840              L562:                             
         Snake.c   354        }
         Snake.c   355        board[newX][newY] = SNAKE;
    00000840 D321                   MOV.L       L580,R3    ; _board
    00000842 E201                   MOV         #1,R2
    00000844 E03C                   MOV         #60,R0
         Snake.c   356        snakePos[0][0] = newX;
    00000846 64B3                   MOV         R11,R4
    00000848 0E07                   MUL.L       R0,R14
    0000084A 001A                   STS         MACL,R0
    0000084C 330C                   ADD         R0,R3
    0000084E 383C                   ADD         R3,R8
    00000850 2822                   MOV.L       R2,@R8
    00000852 24E2                   MOV.L       R14,@R4
         Snake.c   357        snakePos[0][1] = newY;
    00000854 14D1                   MOV.L       R13,@(4,R4)
         Snake.c   358        headX = newX;
    00000856 D31E                   MOV.L       L580+8,R3  ; _headX
         Snake.c   359        headY = newY;
    00000858 D21E                   MOV.L       L580+12,R2 ; _headY
    0000085A 23E2                   MOV.L       R14,@R3
         Snake.c   360    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Snake.c   361        drawScreen();
    0000085C BE92                   BSR         _drawScreen
    0000085E 22D2                   MOV.L       R13,@R2
         Snake.c   362    
         Snake.c   363        if(!dead) {
    00000860 D11A                   MOV.L       L580+4,R1  ; _dead
    00000862 6312                   MOV.L       @R1,R3
    00000864 2338                   TST         R3,R3
    00000866 8B04                   BF          L563
         Snake.c   364            SetTimer(ID_USER_TIMER1, nextFrameTime, frame);
    00000868 D61B                   MOV.L       L580+16,R6 ; _frame
    0000086A 55F1                   MOV.L       @(4,R15),R5
    0000086C D31B                   MOV.L       L580+20,R3 ; _SetTimer
    0000086E 430B                   JSR         @R3
    00000870 E401                   MOV         #1,R4
    00000872              L563:                             
         Snake.c   365        }
         Snake.c   366    
         Snake.c   367        Bdisp_PutDisp_DD();
    00000872 7F0C                   ADD         #12,R15
    00000874 D21A                   MOV.L       L580+24,R2 ; _Bdisp_PutDisp_DD
    00000876 4F16                   LDS.L       @R15+,MACL
    00000878 4F26                   LDS.L       @R15+,PR
    0000087A 68F6                   MOV.L       @R15+,R8
    0000087C 69F6                   MOV.L       @R15+,R9
    0000087E 6AF6                   MOV.L       @R15+,R10
    00000880 6BF6                   MOV.L       @R15+,R11
    00000882 6CF6                   MOV.L       @R15+,R12
    00000884 6DF6                   MOV.L       @R15+,R13
    00000886 422B                   JMP         @R2
    00000888 6EF6                   MOV.L       @R15+,R14
    0000088A              L552:                             
         Snake.c   368    }
    0000088A 7F0C                   ADD         #12,R15
    0000088C 4F16                   LDS.L       @R15+,MACL
    0000088E 4F26                   LDS.L       @R15+,PR
    00000890 68F6                   MOV.L       @R15+,R8
    00000892 69F6                   MOV.L       @R15+,R9
    00000894 6AF6                   MOV.L       @R15+,R10
    00000896 6BF6                   MOV.L       @R15+,R11
    00000898 6CF6                   MOV.L       @R15+,R12
    0000089A 6DF6                   MOV.L       @R15+,R13
    0000089C 000B                   RTS
    0000089E 6EF6                   MOV.L       @R15+,R14
         Snake.c   369    
         Snake.c   370    int backgroundTick() {
    000008A0              _backgroundTick:                 ; function: backgroundTick
                                                           ; frame size=4
    000008A0 4F22                   STS.L       PR,@-R15
         Snake.c   371        SetTimer(ID_USER_TIMER2, 100, backgroundTick);
    000008A2 E564                   MOV         #100,R5
    000008A4 D30D                   MOV.L       L580+20,R3 ; _SetTimer
    000008A6 D60F                   MOV.L       L580+28,R6 ; _backgroundTick
    000008A8 430B                   JSR         @R3
    000008AA E402                   MOV         #2,R4
         Snake.c   372        ++rSeed;
    000008AC D40E                   MOV.L       L580+32,R4 ; _rSeed




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000008AE 6242                   MOV.L       @R4,R2
         Snake.c   373    }
    000008B0 4F26                   LDS.L       @R15+,PR
    000008B2 7201                   ADD         #1,R2
    000008B4 000B                   RTS
    000008B6 2422                   MOV.L       R2,@R4
         Snake.c   374    
         Snake.c   375    int AddIn_main(int isAppli, unsigned short OptionNum)
    000008B8              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=4
    000008B8 4F22                   STS.L       PR,@-R15
         Snake.c   376    {
         Snake.c   377    
         Snake.c   378        backgroundTick();
    000008BA BFF1                   BSR         _backgroundTick
    000008BC 0009                   NOP
         Snake.c   379        titleScreen();
    000008BE BB9F                   BSR         _titleScreen
    000008C0 0009                   NOP
         Snake.c   380    
         Snake.c   381        return 1;
         Snake.c   382    }
    000008C2 4F26                   LDS.L       @R15+,PR
    000008C4 000B                   RTS
    000008C6 E001                   MOV         #1,R0
    000008C8              L580:                             
    000008C8 <00000000>             .DATA.L     _board
    000008CC <00000000>             .DATA.L     _dead
    000008D0 <00000000>             .DATA.L     _headX
    000008D4 <00000000>             .DATA.L     _headY
    000008D8 <00000000>             .DATA.L     _frame
    000008DC <00000000>             .DATA.L     _SetTimer
    000008E0 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000008E4 <00000000>             .DATA.L     _backgroundTick
    000008E8 <00000000>             .DATA.L     _rSeed
         Snake.c   383    
         Snake.c   384    
         Snake.c   385    
         Snake.c   386    
         Snake.c   387    //****************************************************************************
         Snake.c   388    //**************                                              ****************
         Snake.c   389    //**************                 Notice!                      ****************
         Snake.c   390    //**************                                              ****************
         Snake.c   391    //**************  Please do not change the following source.  ****************
         Snake.c   392    //**************                                              ****************
         Snake.c   393    //****************************************************************************
         Snake.c   394    
         Snake.c   395    
         Snake.c   396    #pragma section _BR_Size
         Snake.c   397    unsigned long BR_Size;
         Snake.c   398    #pragma section
         Snake.c   399    
         Snake.c   400    
         Snake.c   401    #pragma section _TOP
         Snake.c   402    
         Snake.c   403    //****************************************************************************
         Snake.c   404    //  InitializeSystem




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

         Snake.c   405    //
         Snake.c   406    //  param   :   isAppli   : 1 = Application / 0 = eActivity
         Snake.c   407    //              OptionNum : Option Number (only eActivity)
         Snake.c   408    //
         Snake.c   409    //  retval  :   1 = No error / 0 = Error
         Snake.c   410    //
         Snake.c   411    //****************************************************************************
         Snake.c   412    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0
         Snake.c   413    {
         Snake.c   414        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L581+2,R3  ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L581:                             
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
         Snake.c   415    }
         Snake.c   416    
         Snake.c   417    #pragma section
         Snake.c   418    
D   00000000              _filledGraph:                    ; static: filledGraph
    00000000 0000000400             .DATA.L     H'00000004,H'00000004
             000004       
    00000008 <00000000>             .DATA.L     L298
    0000000C              _snakeLen:                       ; static: snakeLen
    0000000C 00000003               .DATA.L     H'00000003
    00000010              _headX:                          ; static: headX
    00000010 00000005               .DATA.L     H'00000005
    00000014              _headY:                          ; static: headY
    00000014 00000007               .DATA.L     H'00000007
    00000018              _dir:                            ; static: dir
    00000018 00000001               .DATA.L     H'00000001
    0000001C              _speed:                          ; static: speed
    0000001C 00000001               .DATA.L     H'00000001
    00000020              _dead:                           ; static: dead
    00000020 00000000               .DATA.L     H'00000000
    00000024              _rSeed:                          ; static: rSeed
    00000024 00000000               .DATA.L     H'00000000
C   00000000              L311:
    00000000 534E414B45             .SDATA      "SNAKE"
    00000005 00                     .DATA.B     H'00
    00000006 00000002               .RES.W      1
    00000008              L312:
    00000008 53656C6563             .SDATA      "Select speed"
             7420737065   
             6564         
    00000014 00                     .DATA.B     H'00
    00000015 00000001               .RES.B      1
    00000016 00000002               .RES.W      1
    00000018              L313:
    00000018 313A204C6F             .SDATA      "1: Low"
             77           
    0000001E 00                     .DATA.B     H'00
    0000001F 00000001               .RES.B      1
    00000020              L314:




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000020 323A204D65             .SDATA      "2: Medium"
             6469756D     
    00000029 00                     .DATA.B     H'00
    0000002A 00000002               .RES.W      1
    0000002C              L315:
    0000002C 333A204869             .SDATA      "3: High"
             6768         
    00000033 00                     .DATA.B     H'00
    00000034              L390:
    00000034 4C454E                 .SDATA      "LEN"
    00000037 00                     .DATA.B     H'00
    00000038              L391:
    00000038 535044                 .SDATA      "SPD"
    0000003B 00                     .DATA.B     H'00
    0000003C              L393:
    0000003C 4C4F                   .SDATA      "LO"
    0000003E 00                     .DATA.B     H'00
    0000003F 00000001               .RES.B      1
    00000040              L394:
    00000040 4D44                   .SDATA      "MD"
    00000042 00                     .DATA.B     H'00
    00000043 00000001               .RES.B      1
    00000044              L395:
    00000044 4849                   .SDATA      "HI"
    00000046 00                     .DATA.B     H'00
    00000047 00000001               .RES.B      1
    00000048              L298:
    00000048 F0F0F0F000             .DATA.B     H'F0,H'F0,H'F0,H'F0,H'00
B   00000000              _board:                          ; static: board
    00000000 000003FC               .RES.L      255
    000003FC              _snakePos:                       ; static: snakePos
    000003FC 000007F8               .RES.L      510
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1



























SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 22-Aug-2024 14:22:58  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        15




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:      418



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               000008EC Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               0000004D Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               00000028 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000BF4 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00001565 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           18
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          23
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           140






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\hojooni\AppData\Local\Temp\hmk90E2.tmp 

