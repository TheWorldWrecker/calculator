SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE    1

************ OBJECT LISTING ************

FILE NAME: C:\Users\hojooni\OneDrive\¹®¼­\CASIO\fx-9860G SDK\TETRIS\TETRIS.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c     1    /*****************************************************************/
        TETRIS.c     2    /*                                                               */
        TETRIS.c     3    /*   CASIO fx-9860G SDK Library                                  */
        TETRIS.c     4    /*                                                               */
        TETRIS.c     5    /*   File name : [ProjectName].c                                 */
        TETRIS.c     6    /*                                                               */
        TETRIS.c     7    /*   Copyright (c) 2006 CASIO COMPUTER CO., LTD.                 */
        TETRIS.c     8    /*                                                               */
        TETRIS.c     9    /*****************************************************************/
        TETRIS.c    10    
        TETRIS.c    11    // thanks random internet user
        TETRIS.c    12    
        TETRIS.c    13    #define __KEYBIOS_H__
        TETRIS.c    14    
        TETRIS.c    15    #include "fxlib.h"
        TETRIS.c    16    #include "timer.h"
        TETRIS.c    17    
        TETRIS.c    18    #define KEY_CHAR_0 71
        TETRIS.c    19    #define KEY_CHAR_1 72
        TETRIS.c    20    #define KEY_CHAR_2 62
        TETRIS.c    21    #define KEY_CHAR_3 52
        TETRIS.c    22    #define KEY_CHAR_4 73
        TETRIS.c    23    #define KEY_CHAR_5 63
        TETRIS.c    24    #define KEY_CHAR_6 53
        TETRIS.c    25    #define KEY_CHAR_7 74
        TETRIS.c    26    #define KEY_CHAR_8 64
        TETRIS.c    27    #define KEY_CHAR_9 54
        TETRIS.c    28    #define KEY_CHAR_DP 61
        TETRIS.c    29    #define KEY_CHAR_EXP 51
        TETRIS.c    30    #define KEY_CHAR_PMINUS 41
        TETRIS.c    31    #define KEY_CHAR_PLUS 42
        TETRIS.c    32    #define KEY_CHAR_MINUS 32
        TETRIS.c    33    #define KEY_CHAR_MULT 43
        TETRIS.c    34    #define KEY_CHAR_DIV 33
        TETRIS.c    35    #define KEY_CHAR_FRAC 75
        TETRIS.c    36    #define KEY_CHAR_LPAR 55
        TETRIS.c    37    #define KEY_CHAR_RPAR 45
        TETRIS.c    38    #define KEY_CHAR_COMMA 35
        TETRIS.c    39    #define KEY_CHAR_STORE 25
        TETRIS.c    40    #define KEY_CHAR_LOG 66
        TETRIS.c    41    #define KEY_CHAR_LN 56
        TETRIS.c    42    #define KEY_CHAR_SIN 46
        TETRIS.c    43    #define KEY_CHAR_COS 36
        TETRIS.c    44    #define KEY_CHAR_TAN 26
        TETRIS.c    45    #define KEY_CHAR_SQUARE 67
        TETRIS.c    46    #define KEY_CHAR_POW 57
        TETRIS.c    47    #define KEY_CTRL_EXE 31
        TETRIS.c    48    #define KEY_CTRL_DEL 44
        TETRIS.c    49    #define KEY_CTRL_AC 32
        TETRIS.c    50    #define KEY_CTRL_FD 65
        TETRIS.c    51    #define KEY_CTRL_EXIT 47
        TETRIS.c    52    #define KEY_CTRL_SHIFT 78
        TETRIS.c    53    #define KEY_CTRL_ALPHA 77
        TETRIS.c    54    #define KEY_CTRL_OPTN 68




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE    2


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c    55    #define KEY_CTRL_VARS 58
        TETRIS.c    56    #define KEY_CTRL_UP 28
        TETRIS.c    57    #define KEY_CTRL_DOWN 37
        TETRIS.c    58    #define KEY_CTRL_LEFT 38
        TETRIS.c    59    #define KEY_CTRL_RIGHT 27
        TETRIS.c    60    #define KEY_CTRL_F1 79
        TETRIS.c    61    #define KEY_CTRL_F2 69
        TETRIS.c    62    #define KEY_CTRL_F3 59
        TETRIS.c    63    #define KEY_CTRL_F4 49
        TETRIS.c    64    #define KEY_CTRL_F5 39
        TETRIS.c    65    #define KEY_CTRL_F6 29
        TETRIS.c    66    #define KEY_CTRL_MENU 48
        TETRIS.c    67    #ifndef OS2Change
        TETRIS.c    68    #define OS2Change
        TETRIS.c    69    #ifndef OS2Change_GetOS2
        TETRIS.c    70    #define OS2Change_GetOS2
        TETRIS.c    71    typedef int(*sc_i2cp2sip)(char*, char*, short int*, short int*);
        TETRIS.c    72    const unsigned int sc0015[] = { 0xD201D002, 0x422B0009, 0x80010070, 0x0015 };
        TETRIS.c    73    #define GlibGetOSVersionInfo (*(sc_i2cp2sip)sc0015)
        TETRIS.c    74    int OSVersionAsInt(void)
P   00000000              _OSVersionAsInt:                 ; function: OSVersionAsInt
                                                           ; frame size=20
    00000000 4F22                   STS.L       PR,@-R15
    00000002 7FF0                   ADD         #-16,R15
        TETRIS.c    75    {
        TETRIS.c    76    char mainversion;
        TETRIS.c    77    char minorversion;
        TETRIS.c    78    short release;
        TETRIS.c    79    short build;
        TETRIS.c    80    GlibGetOSVersionInfo( &mainversion, &minorversion, &release, &build );
    00000004 D345                   MOV.L       L1231+6,R3 ; _sc0015
    00000006 67F3                   MOV         R15,R7
    00000008 770C                   ADD         #12,R7
    0000000A 66F3                   MOV         R15,R6
    0000000C 7608                   ADD         #8,R6
    0000000E 65F3                   MOV         R15,R5
    00000010 7504                   ADD         #4,R5
    00000012 430B                   JSR         @R3
    00000014 64F3                   MOV         R15,R4
        TETRIS.c    81    return ( ( mainversion << 24 ) & 0xFF000000 ) | ( ( minorversion << 16 ) & 0x00FF0000 ) | ( release & 0x00
                         +00FFFF );
    00000016 60F0                   MOV.B       @R15,R0
    00000018 D341                   MOV.L       L1231+10,R3; H'FF000000
    0000001A 4028                   SHLL16      R0
    0000001C D241                   MOV.L       L1231+14,R2; H'00FF0000
    0000001E 4018                   SHLL8       R0
    00000020 2039                   AND         R3,R0
    00000022 6103                   MOV         R0,R1
    00000024 84F4                   MOV.B       @(4,R15),R0
    00000026 4028                   SHLL16      R0
    00000028 2029                   AND         R2,R0
    0000002A 201B                   OR          R1,R0
    0000002C 6103                   MOV         R0,R1
    0000002E 85F4                   MOV.W       @(8,R15),R0
    00000030 600D                   EXTU.W      R0,R0
        TETRIS.c    82    }
    00000032 7F10                   ADD         #16,R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE    3


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000034 4F26                   LDS.L       @R15+,PR
    00000036 000B                   RTS
    00000038 201B                   OR          R1,R0
        TETRIS.c    83    #define isOS2 (OSVersionAsInt() >= 0x02020000)
        TETRIS.c    84    #define OS2(x,y) ((OSVersionAsInt() >= 0x02020000)?y:x)
        TETRIS.c    85    #endif
        TETRIS.c    86    #ifndef OS2Change_Keyboard
        TETRIS.c    87    #define OS2Change_Keyboard
        TETRIS.c    88    void delay(void)
    0000003A              _delay:                          ; function: delay
                                                           ; frame size=0
        TETRIS.c    89    {
        TETRIS.c    90    char i;
        TETRIS.c    91    for (i=0; i<5; i++){};
    0000003A E505                   MOV         #5,R5
    0000003C E400                   MOV         #0,R4
    0000003E              L941:                             
    0000003E 7401                   ADD         #1,R4
    00000040 634E                   EXTS.B      R4,R3
    00000042 3353                   CMP/GE      R5,R3
    00000044 8BFB                   BF          L941
        TETRIS.c    92    }
    00000046 000B                   RTS
    00000048 0009                   NOP
        TETRIS.c    93    unsigned char CheckKeyRow(unsigned char code)
    0000004A              _CheckKeyRow:                    ; function: CheckKeyRow
                                                           ; frame size=32
        TETRIS.c    94    {
        TETRIS.c    95    unsigned char result=0;
        TETRIS.c    96    short*PORTB_CTRL=(void*)0xA4000102;
        TETRIS.c    97    short*PORTM_CTRL=(void*)0xA4000118;
        TETRIS.c    98    char*PORTB=(void*)0xA4000122;
        TETRIS.c    99    char*PORTM=(void*)0xA4000138;
        TETRIS.c   100    char*PORTA=(void*)0xA4000120;
        TETRIS.c   101    short smask;
        TETRIS.c   102    char cmask;
        TETRIS.c   103    unsigned char column, row;
        TETRIS.c   104    column = code>>4;
    0000004A 634C                   EXTU.B      R4,R3
    0000004C 2FE6                   MOV.L       R14,@-R15
        TETRIS.c   105    row = code &0x0F;
    0000004E E50F                   MOV         #15,R5
    00000050 2FD6                   MOV.L       R13,@-R15
    00000052 4309                   SHLR2       R3
    00000054 2FC6                   MOV.L       R12,@-R15
    00000056 2549                   AND         R4,R5
    00000058 2FB6                   MOV.L       R11,@-R15
    0000005A 4309                   SHLR2       R3
    0000005C 2FA6                   MOV.L       R10,@-R15
        TETRIS.c   106    smask = 0x0003 << (( row %8)*2);
    0000005E 665C                   EXTU.B      R5,R6
    00000060 2F96                   MOV.L       R9,@-R15
    00000062 6063                   MOV         R6,R0
    00000064 4F22                   STS.L       PR,@-R15
    00000066 4011                   CMP/PZ      R0
    00000068 7FFC                   ADD         #-4,R15
    0000006A 2F30                   MOV.B       R3,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE    4


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000006C 8B01                   BF          L942
    0000006E A005                   BRA         L943
    00000070 C907                   AND         #7,R0
    00000072              L942:                             
    00000072 6007                   NOT         R0,R0
    00000074 7001                   ADD         #1,R0
    00000076 C907                   AND         #7,R0
    00000078 6007                   NOT         R0,R0
    0000007A 7001                   ADD         #1,R0
    0000007C              L943:                             
        TETRIS.c   107    cmask = ~( 1 << ( row %8) );
        TETRIS.c   108    if(row <8)
    0000007C 994B                   MOV.W       L1231,R9   ; H'AAAA
    0000007E E208                   MOV         #8,R2
    00000080 DB29                   MOV.L       L1231+18,R11; H'A4000102
    00000082 6403                   MOV         R0,R4
    00000084 9D48                   MOV.W       L1231+2,R13; H'FF00
    00000086 E503                   MOV         #3,R5
    00000088 DE28                   MOV.L       L1231+22,R14; H'A4000118
    0000008A EA01                   MOV         #1,R10
    0000008C 4000                   SHLL        R0
    0000008E 450C                   SHAD        R0,R5
    00000090 4A4C                   SHAD        R4,R10
    00000092 6AA7                   NOT         R10,R10
    00000094 6CB3                   MOV         R11,R12
    00000096 3623                   CMP/GE      R2,R6
    00000098 8D0D                   BT/S        L944
    0000009A 7C36                   ADD         #54,R12
        TETRIS.c   109    {
        TETRIS.c   110      *PORTB_CTRL = 0xAAAA ^ smask;
    0000009C 259A                   XOR         R9,R5
    0000009E 2B51                   MOV.W       R5,@R11
        TETRIS.c   111      *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000A0 60E1                   MOV.W       @R14,R0
    000000A2 20D9                   AND         R13,R0
    000000A4 CBAA                   OR          #170,R0
        TETRIS.c   112      delay();
    000000A6 BFC8                   BSR         _delay
    000000A8 2E01                   MOV.W       R0,@R14
        TETRIS.c   113      *PORTB = cmask;
    000000AA D221                   MOV.L       L1231+26,R2; H'A4000122
    000000AC 22A0                   MOV.B       R10,@R2
        TETRIS.c   114      *PORTM = (*PORTM & 0xF0 ) | 0x0F;
    000000AE 60C0                   MOV.B       @R12,R0
    000000B0 C9F0                   AND         #240,R0
    000000B2 A00D                   BRA         L1217
    000000B4 CB0F                   OR          #15,R0
    000000B6              L944:                             
        TETRIS.c   115    }
        TETRIS.c   116    else
        TETRIS.c   117    {
        TETRIS.c   118      *PORTB_CTRL = 0xAAAA;
    000000B6 2B91                   MOV.W       R9,@R11
        TETRIS.c   119      *PORTM_CTRL = ((*PORTM_CTRL & 0xFF00 ) | 0x00AA)  ^ smask;
    000000B8 60E1                   MOV.W       @R14,R0
    000000BA 20D9                   AND         R13,R0
    000000BC CBAA                   OR          #170,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE    5


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000000BE 205A                   XOR         R5,R0
        TETRIS.c   120      delay();
    000000C0 BFBB                   BSR         _delay
    000000C2 2E01                   MOV.W       R0,@R14
        TETRIS.c   121      *PORTB = 0xFF;
    000000C4 D31A                   MOV.L       L1231+26,R3; H'A4000122
    000000C6 E2FF                   MOV         #-1,R2
    000000C8 2320                   MOV.B       R2,@R3
        TETRIS.c   122      *PORTM = (*PORTM & 0xF0 ) | cmask;
    000000CA 60C0                   MOV.B       @R12,R0
    000000CC C9F0                   AND         #240,R0
    000000CE 20AB                   OR          R10,R0
    000000D0              L1217:                            
        TETRIS.c   123    }
        TETRIS.c   124    
        TETRIS.c   125    delay();
    000000D0 BFB3                   BSR         _delay
    000000D2 2C00                   MOV.B       R0,@R12
        TETRIS.c   126    result = (~(*PORTA))>>column & 1;
    000000D4 D317                   MOV.L       L1231+30,R3; H'A4000120
    000000D6 6030                   MOV.B       @R3,R0
    000000D8 62F0                   MOV.B       @R15,R2
    000000DA 6007                   NOT         R0,R0
    000000DC 622C                   EXTU.B      R2,R2
    000000DE 622B                   NEG         R2,R2
    000000E0 402C                   SHAD        R2,R0
    000000E2 C901                   AND         #1,R0
        TETRIS.c   127    delay();
    000000E4 BFA9                   BSR         _delay
    000000E6 2F00                   MOV.B       R0,@R15
        TETRIS.c   128    *PORTB_CTRL = 0xAAAA;
    000000E8 2B91                   MOV.W       R9,@R11
        TETRIS.c   129    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
    000000EA 60E1                   MOV.W       @R14,R0
    000000EC 20D9                   AND         R13,R0
    000000EE CBAA                   OR          #170,R0
        TETRIS.c   130    delay();
    000000F0 BFA3                   BSR         _delay
    000000F2 2E01                   MOV.W       R0,@R14
        TETRIS.c   131    *PORTB_CTRL = 0x5555;
    000000F4 9211                   MOV.W       L1231+4,R2 ; H'5555
    000000F6 2B21                   MOV.W       R2,@R11
        TETRIS.c   132    *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x0055;
    000000F8 60E1                   MOV.W       @R14,R0
    000000FA 20D9                   AND         R13,R0
    000000FC CB55                   OR          #85,R0
        TETRIS.c   133    delay();
    000000FE BF9C                   BSR         _delay
    00000100 2E01                   MOV.W       R0,@R14
        TETRIS.c   134    
        TETRIS.c   135    return result;
    00000102 60F0                   MOV.B       @R15,R0
        TETRIS.c   136    }
    00000104 7F04                   ADD         #4,R15
    00000106 4F26                   LDS.L       @R15+,PR
    00000108 69F6                   MOV.L       @R15+,R9
    0000010A 6AF6                   MOV.L       @R15+,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE    6


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000010C 6BF6                   MOV.L       @R15+,R11
    0000010E 6CF6                   MOV.L       @R15+,R12
    00000110 6DF6                   MOV.L       @R15+,R13
    00000112 000B                   RTS
    00000114 6EF6                   MOV.L       @R15+,R14
    00000116              L1231:                            
    00000116 AAAA                   .DATA.W     H'AAAA
    00000118 FF00                   .DATA.W     H'FF00
    0000011A 5555                   .DATA.W     H'5555
    0000011C <00000000>             .DATA.L     _sc0015
    00000120 FF000000               .DATA.L     H'FF000000
    00000124 00FF0000               .DATA.L     H'00FF0000
    00000128 A4000102               .DATA.L     H'A4000102
    0000012C A4000118               .DATA.L     H'A4000118
    00000130 A4000122               .DATA.L     H'A4000122
    00000134 A4000120               .DATA.L     H'A4000120
        TETRIS.c   137    
        TETRIS.c   138    unsigned char KeyDown(unsigned char keycode)
    00000138              _KeyDown:                        ; function: KeyDown
                                                           ; frame size=36
                                                           ; used runtime library name:
                                                           ; __divls, __modls
    00000138 2FE6                   MOV.L       R14,@-R15
    0000013A EE0A                   MOV         #10,R14
    0000013C 2FD6                   MOV.L       R13,@-R15
    0000013E 4F22                   STS.L       PR,@-R15
        TETRIS.c   139    {
        TETRIS.c   140    unsigned short key[8];
        TETRIS.c   141    const unsigned short* keyboardregister = (unsigned short*)0xA44B0000;
    00000140 D36F                   MOV.L       L1232+2,R3 ; H'A44B0000
    00000142 7FE8                   ADD         #-24,R15
    00000144 2F40                   MOV.B       R4,@R15
    00000146 1F31                   MOV.L       R3,@(4,R15)
    00000148 6DF0                   MOV.B       @R15,R13
    0000014A BF59                   BSR         _OSVersionAsInt
    0000014C 6DDC                   EXTU.B      R13,R13
    0000014E D26D                   MOV.L       L1232+6,R2 ; H'02020000
    00000150 3023                   CMP/GE      R2,R0
    00000152 8B26                   BF          L947
        TETRIS.c   142    if(isOS2)
        TETRIS.c   143    {
        TETRIS.c   144      unsigned char row = keycode%10;
    00000154 D36C                   MOV.L       L1232+10,R3; __modls
    00000156 61D3                   MOV         R13,R1
    00000158 430B                   JSR         @R3
    0000015A 60E3                   MOV         R14,R0
    0000015C 2F00                   MOV.B       R0,@R15
        TETRIS.c   145      memcpy(key, keyboardregister, sizeof(unsigned short) << 3);
    0000015E E610                   MOV         #16,R6
    00000160 D36A                   MOV.L       L1232+14,R3; _memcpy
    00000162 64F3                   MOV         R15,R4
    00000164 55F1                   MOV.L       @(4,R15),R5
    00000166 430B                   JSR         @R3
    00000168 7408                   ADD         #8,R4
        TETRIS.c   146     
        TETRIS.c   147      return (0 != (key[row >> 1] & 1 << keycode / 10 - 1 + ((row & 1) << 3)));
    0000016A E501                   MOV         #1,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE    7


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000016C 64F0                   MOV.B       @R15,R4
    0000016E 61D3                   MOV         R13,R1
    00000170 D267                   MOV.L       L1232+18,R2; __divls
    00000172 644C                   EXTU.B      R4,R4
    00000174 6343                   MOV         R4,R3
    00000176 2359                   AND         R5,R3
    00000178 4308                   SHLL2       R3
    0000017A 4300                   SHLL        R3
    0000017C 420B                   JSR         @R2
    0000017E 60E3                   MOV         R14,R0
    00000180 330C                   ADD         R0,R3
    00000182 73FF                   ADD         #-1,R3
    00000184 6053                   MOV         R5,R0
    00000186 403C                   SHAD        R3,R0
    00000188 6343                   MOV         R4,R3
    0000018A 4321                   SHAR        R3
    0000018C 4300                   SHLL        R3
    0000018E 61F3                   MOV         R15,R1
    00000190 7108                   ADD         #8,R1
    00000192 331C                   ADD         R1,R3
    00000194 6231                   MOV.W       @R3,R2
    00000196 622D                   EXTU.W      R2,R2
    00000198 2029                   AND         R2,R0
    0000019A 2008                   TST         R0,R0
    0000019C 0029                   MOVT        R0
    0000019E A00E                   BRA         L949
    000001A0 CA01                   XOR         #1,R0
    000001A2              L947:                             
        TETRIS.c   148    }
        TETRIS.c   149    else
        TETRIS.c   150    {
        TETRIS.c   151      return CheckKeyRow((keycode % 10) + ((keycode / 10 - 1) << 4));
    000001A2 61D3                   MOV         R13,R1
    000001A4 D35A                   MOV.L       L1232+18,R3; __divls
    000001A6 430B                   JSR         @R3
    000001A8 60E3                   MOV         R14,R0
    000001AA 6403                   MOV         R0,R4
    000001AC D356                   MOV.L       L1232+10,R3; __modls
    000001AE 61D3                   MOV         R13,R1
    000001B0 74FF                   ADD         #-1,R4
    000001B2 4408                   SHLL2       R4
    000001B4 4408                   SHLL2       R4
    000001B6 430B                   JSR         @R3
    000001B8 60E3                   MOV         R14,R0
    000001BA BF46                   BSR         _CheckKeyRow
    000001BC 340C                   ADD         R0,R4
        TETRIS.c   152    }
        TETRIS.c   153    }
    000001BE              L949:                             
    000001BE 7F18                   ADD         #24,R15
    000001C0 4F26                   LDS.L       @R15+,PR
    000001C2 6DF6                   MOV.L       @R15+,R13
    000001C4 000B                   RTS
    000001C6 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   154    unsigned char GetKeyMod(unsigned int *key)
    000001C8              _GetKeyMod:                      ; function: GetKeyMod
                                                           ; frame size=20




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE    8


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000001C8 2FE6                   MOV.L       R14,@-R15
    000001CA 2FD6                   MOV.L       R13,@-R15
    000001CC 2FC6                   MOV.L       R12,@-R15
    000001CE 4F22                   STS.L       PR,@-R15
        TETRIS.c   155    {
        TETRIS.c   156    unsigned char x, ret;
        TETRIS.c   157    
        TETRIS.c   158    ret = GetKey(key);
    000001D0 D350                   MOV.L       L1232+22,R3; _GetKey
    000001D2 7FFC                   ADD         #-4,R15
    000001D4 430B                   JSR         @R3
    000001D6 6C43                   MOV         R4,R12
    000001D8 2F00                   MOV.B       R0,@R15
        TETRIS.c   159    
        TETRIS.c   160    for(x = 0; x < 80; x++)
    000001DA EE00                   MOV         #0,R14
    000001DC ED50                   MOV         #80,R13
    000001DE              L952:                             
        TETRIS.c   161    {
        TETRIS.c   162      if(KeyDown(x))
    000001DE BFAB                   BSR         _KeyDown
    000001E0 64E3                   MOV         R14,R4
    000001E2 600C                   EXTU.B      R0,R0
    000001E4 2008                   TST         R0,R0
    000001E6 8902                   BT          L953
        TETRIS.c   163      {
        TETRIS.c   164       *key = x;
    000001E8 6EEC                   EXTU.B      R14,R14
        TETRIS.c   165       break;
    000001EA A004                   BRA         L951
    000001EC 2CE2                   MOV.L       R14,@R12
    000001EE              L953:                             
    000001EE 7E01                   ADD         #1,R14
    000001F0 62EC                   EXTU.B      R14,R2
    000001F2 32D3                   CMP/GE      R13,R2
    000001F4 8BF3                   BF          L952
    000001F6              L951:                             
        TETRIS.c   166      }
        TETRIS.c   167    }
        TETRIS.c   168    return ret;
    000001F6 60F0                   MOV.B       @R15,R0
        TETRIS.c   169    }
    000001F8 7F04                   ADD         #4,R15
    000001FA 4F26                   LDS.L       @R15+,PR
    000001FC 6CF6                   MOV.L       @R15+,R12
    000001FE 6DF6                   MOV.L       @R15+,R13
    00000200 000B                   RTS
    00000202 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   170    #endif
        TETRIS.c   171    #endif
        TETRIS.c   172    
        TETRIS.c   173    //****************************************************************************
        TETRIS.c   174    //  AddIn_main (Sample program main function)
        TETRIS.c   175    //
        TETRIS.c   176    //  param   :   isAppli   : 1 = This application is launched by MAIN MENU.
        TETRIS.c   177    //                        : 0 = This application is launched by a strip in
        TETRIS.c   178    //                              eACT application.




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE    9


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   179    //
        TETRIS.c   180    //              OptionNum : Strip number (0~3)
        TETRIS.c   181    //                         (This parameter is only used when isAppli parameter is 0.)
        TETRIS.c   182    //
        TETRIS.c   183    //  retval  :   1 = No error / 0 = Error
        TETRIS.c   184    //
        TETRIS.c   185    //****************************************************************************
        TETRIS.c   186    
        TETRIS.c   187    // 7 pieces, each with 4 rotation states, each occupying a 4*4 space
        TETRIS.c   188    // Looks not like the SRS table but trust me it is
        TETRIS.c   189    const unsigned int rotationTable[7][4][4][4] = {
        TETRIS.c   190        {  // I piece
        TETRIS.c   191            { // State 0
        TETRIS.c   192            {0,0,1,0},
        TETRIS.c   193            {0,0,1,0},
        TETRIS.c   194            {0,0,1,0},
        TETRIS.c   195            {0,0,1,0}
        TETRIS.c   196            },
        TETRIS.c   197            { // State 1
        TETRIS.c   198            {0,0,0,0},
        TETRIS.c   199            {0,0,0,0},
        TETRIS.c   200            {1,1,1,1},
        TETRIS.c   201            {0,0,0,0}
        TETRIS.c   202            },
        TETRIS.c   203            { // State 2
        TETRIS.c   204            {0,1,0,0},
        TETRIS.c   205            {0,1,0,0},
        TETRIS.c   206            {0,1,0,0},
        TETRIS.c   207            {0,1,0,0}
        TETRIS.c   208            },
        TETRIS.c   209            { // State 3
        TETRIS.c   210            {0,0,0,0},
        TETRIS.c   211            {1,1,1,1},
        TETRIS.c   212            {0,0,0,0},
        TETRIS.c   213            {0,0,0,0}
        TETRIS.c   214            }
        TETRIS.c   215        },    
        TETRIS.c   216        {  // J piece
        TETRIS.c   217            { // State 0
        TETRIS.c   218            {0,0,1,1},
        TETRIS.c   219            {0,0,1,0},
        TETRIS.c   220            {0,0,1,0},
        TETRIS.c   221            {0,0,0,0}
        TETRIS.c   222            },
        TETRIS.c   223            { // State 1
        TETRIS.c   224            {0,0,0,0},
        TETRIS.c   225            {0,1,1,1},
        TETRIS.c   226            {0,0,0,1},
        TETRIS.c   227            {0,0,0,0}
        TETRIS.c   228            },
        TETRIS.c   229            { // State 2
        TETRIS.c   230            {0,0,1,0},
        TETRIS.c   231            {0,0,1,0},
        TETRIS.c   232            {0,1,1,0},
        TETRIS.c   233            {0,0,0,0}
        TETRIS.c   234            },
        TETRIS.c   235            { // State 3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   10


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   236            {0,1,0,0},
        TETRIS.c   237            {0,1,1,1},
        TETRIS.c   238            {0,0,0,0},
        TETRIS.c   239            {0,0,0,0}
        TETRIS.c   240            }
        TETRIS.c   241        },    
        TETRIS.c   242        {  // L piece
        TETRIS.c   243            { // State 0
        TETRIS.c   244            {0,0,1,0},
        TETRIS.c   245            {0,0,1,0},
        TETRIS.c   246            {0,0,1,1},
        TETRIS.c   247            {0,0,0,0}
        TETRIS.c   248            },
        TETRIS.c   249            { // State 1
        TETRIS.c   250            {0,0,0,0},
        TETRIS.c   251            {0,1,1,1},
        TETRIS.c   252            {0,1,0,0},
        TETRIS.c   253            {0,0,0,0}
        TETRIS.c   254            },
        TETRIS.c   255            { // State 2
        TETRIS.c   256            {0,1,1,0},
        TETRIS.c   257            {0,0,1,0},
        TETRIS.c   258            {0,0,1,0},
        TETRIS.c   259            {0,0,0,0}
        TETRIS.c   260            },
        TETRIS.c   261            { // State 3
        TETRIS.c   262            {0,0,0,1},
        TETRIS.c   263            {0,1,1,1},
        TETRIS.c   264            {0,0,0,0},
        TETRIS.c   265            {0,0,0,0}
        TETRIS.c   266            }
        TETRIS.c   267        },    
        TETRIS.c   268        {  // O piece
        TETRIS.c   269            { // State 0
        TETRIS.c   270            {0,0,0,0},
        TETRIS.c   271            {0,0,1,1},
        TETRIS.c   272            {0,0,1,1},
        TETRIS.c   273            {0,0,0,0}
        TETRIS.c   274            },
        TETRIS.c   275            { // State 1
        TETRIS.c   276            {0,0,0,0},
        TETRIS.c   277            {0,0,1,1},
        TETRIS.c   278            {0,0,1,1},
        TETRIS.c   279            {0,0,0,0}
        TETRIS.c   280            },
        TETRIS.c   281            { // State 2
        TETRIS.c   282            {0,0,0,0},
        TETRIS.c   283            {0,0,1,1},
        TETRIS.c   284            {0,0,1,1},
        TETRIS.c   285            {0,0,0,0}
        TETRIS.c   286            },
        TETRIS.c   287            { // State 3
        TETRIS.c   288            {0,0,0,0},
        TETRIS.c   289            {0,0,1,1},
        TETRIS.c   290            {0,0,1,1},
        TETRIS.c   291            {0,0,0,0}
        TETRIS.c   292            }




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   11


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   293        },    
        TETRIS.c   294        {  // S piece
        TETRIS.c   295            { // State 0
        TETRIS.c   296            {0,0,1,0},
        TETRIS.c   297            {0,0,1,1},
        TETRIS.c   298            {0,0,0,1},
        TETRIS.c   299            {0,0,0,0}
        TETRIS.c   300            },
        TETRIS.c   301            { // State 1
        TETRIS.c   302            {0,0,0,0},
        TETRIS.c   303            {0,0,1,1},
        TETRIS.c   304            {0,1,1,0},
        TETRIS.c   305            {0,0,0,0}
        TETRIS.c   306            },
        TETRIS.c   307            { // State 2
        TETRIS.c   308            {0,1,0,0},
        TETRIS.c   309            {0,1,1,0},
        TETRIS.c   310            {0,0,1,0},
        TETRIS.c   311            {0,0,0,0}
        TETRIS.c   312            },
        TETRIS.c   313            { // State 3
        TETRIS.c   314            {0,0,1,1},
        TETRIS.c   315            {0,1,1,0},
        TETRIS.c   316            {0,0,0,0},
        TETRIS.c   317            {0,0,0,0}
        TETRIS.c   318            }
        TETRIS.c   319        },    
        TETRIS.c   320        {  // T piece
        TETRIS.c   321            { // State 0
        TETRIS.c   322            {0,0,1,0},
        TETRIS.c   323            {0,0,1,1},
        TETRIS.c   324            {0,0,1,0},
        TETRIS.c   325            {0,0,0,0}
        TETRIS.c   326            },
        TETRIS.c   327            { // State 1
        TETRIS.c   328            {0,0,0,0},
        TETRIS.c   329            {0,1,1,1},
        TETRIS.c   330            {0,0,1,0},
        TETRIS.c   331            {0,0,0,0}
        TETRIS.c   332            },
        TETRIS.c   333            { // State 2
        TETRIS.c   334            {0,0,1,0},
        TETRIS.c   335            {0,1,1,0},
        TETRIS.c   336            {0,0,1,0},
        TETRIS.c   337            {0,0,0,0}
        TETRIS.c   338            },
        TETRIS.c   339            { // State 3
        TETRIS.c   340            {0,0,1,0},
        TETRIS.c   341            {0,1,1,1},
        TETRIS.c   342            {0,0,0,0},
        TETRIS.c   343            {0,0,0,0}
        TETRIS.c   344            }
        TETRIS.c   345        },    
        TETRIS.c   346        {  // Z piece
        TETRIS.c   347            { // State 0
        TETRIS.c   348            {0,0,0,1},
        TETRIS.c   349            {0,0,1,1},




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   12


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   350            {0,0,1,0},
        TETRIS.c   351            {0,0,0,0}
        TETRIS.c   352            },
        TETRIS.c   353            { // State 1
        TETRIS.c   354            {0,0,0,0},
        TETRIS.c   355            {0,1,1,0},
        TETRIS.c   356            {0,0,1,1},
        TETRIS.c   357            {0,0,0,0}
        TETRIS.c   358            },
        TETRIS.c   359            { // State 2
        TETRIS.c   360            {0,0,1,0},
        TETRIS.c   361            {0,1,1,0},
        TETRIS.c   362            {0,1,0,0},
        TETRIS.c   363            {0,0,0,0}
        TETRIS.c   364            },
        TETRIS.c   365            { // State 3
        TETRIS.c   366            {0,1,1,0},
        TETRIS.c   367            {0,0,1,1},
        TETRIS.c   368            {0,0,0,0},
        TETRIS.c   369            {0,0,0,0}
        TETRIS.c   370            }
        TETRIS.c   371        }
        TETRIS.c   372    };
        TETRIS.c   373    
        TETRIS.c   374    // I / other pieces (2), with 4*4 possible rotations, each with four kicks
        TETRIS.c   375    // A "kick" looks like [x][y], where x and y are offset positions
        TETRIS.c   376    // Not including basic rotation ( (0,0) kick )
        TETRIS.c   377    const int kickTable[2][4][4][5][2] = {
        TETRIS.c   378        {  // I piece
        TETRIS.c   379            {  // From state 0
        TETRIS.c   380                { { 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0} },  // 0 -> 0
        TETRIS.c   381                { {-2, 0},{ 1, 0},{-2,-1},{ 1, 2},{ 0, 0} },  // 0 -> 1
        TETRIS.c   382                { {-1, 0},{-2, 0},{ 1, 0},{ 2, 0},{ 0, 1} },  // 0 -> 2
        TETRIS.c   383                { {-1, 0},{ 2, 0},{-1, 2},{ 2,-1},{ 0, 0} }   // 0 -> 3
        TETRIS.c   384            },
        TETRIS.c   385            {  // From state 1
        TETRIS.c   386                { { 2, 0},{-1, 0},{ 2, 1},{-1,-2},{ 0, 0} },  // 1 -> 0
        TETRIS.c   387                { { 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0} },  // 1 -> 1
        TETRIS.c   388                { {-1, 0},{ 2, 0},{-1, 2},{ 2,-1},{ 0, 0} },  // 1 -> 2
        TETRIS.c   389                { { 0, 1},{ 0, 2},{ 0,-1},{ 0,-2},{-1, 0} }   // 1 -> 3
        TETRIS.c   390            },
        TETRIS.c   391            {  // From state 2
        TETRIS.c   392                { { 1, 0},{ 2, 0},{-1, 0},{-2, 0},{ 0,-1} },  // 2 -> 0
        TETRIS.c   393                { { 1, 0},{-2, 0},{ 1,-2},{-2, 1},{ 0, 0} },  // 2 -> 1
        TETRIS.c   394                { { 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0} },  // 2 -> 2
        TETRIS.c   395                { { 2, 0},{-1, 0},{ 2, 1},{-1,-2},{ 0, 0} }   // 2 -> 3
        TETRIS.c   396            },
        TETRIS.c   397            {  // From state 3
        TETRIS.c   398                { { 1, 0},{-2, 0},{ 1,-2},{-2, 1},{ 0, 0} },  // 3 -> 0
        TETRIS.c   399                { { 0, 1},{ 0, 2},{ 0,-1},{ 0,-2},{ 1, 0} },  // 3 -> 1
        TETRIS.c   400                { {-2, 0},{ 1, 0},{-2,-1},{ 1, 2},{ 0, 0} },  // 3 -> 2
        TETRIS.c   401                { { 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0} }   // 3 -> 3
        TETRIS.c   402            }
        TETRIS.c   403        }, 
        TETRIS.c   404        {  // Other pieces
        TETRIS.c   405            {  // From state 0
        TETRIS.c   406                { { 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0} },  // 0 -> 0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   13


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   407                { {-1, 0},{-1, 1},{ 0,-2},{-1,-2},{ 0, 0} },  // 0 -> 1
        TETRIS.c   408                { { 0, 1},{ 1, 1},{-1, 1},{ 1, 0},{-1, 0} },  // 0 -> 2
        TETRIS.c   409                { { 1, 0},{ 1, 1},{ 0,-2},{ 1,-2},{ 0, 0} }   // 0 -> 3
        TETRIS.c   410            },
        TETRIS.c   411            {  // From state 1
        TETRIS.c   412                { { 1, 0},{ 1,-1},{ 0, 2},{ 1, 2},{ 0, 0} },  // 1 -> 0
        TETRIS.c   413                { { 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0} },  // 1 -> 1
        TETRIS.c   414                { { 1, 0},{ 1,-1},{ 0, 2},{ 1, 2},{ 0, 0} },  // 1 -> 2
        TETRIS.c   415                { { 1, 0},{ 1, 2},{ 1, 1},{ 0, 2},{ 0, 1} }   // 1 -> 3
        TETRIS.c   416            },
        TETRIS.c   417            {  // From state 2
        TETRIS.c   418                { { 0,-1},{-1,-1},{ 1,-1},{-1, 0},{ 1, 0} },  // 2 -> 0
        TETRIS.c   419                { {-1, 0},{-1, 1},{ 0,-2},{-1,-2},{ 0, 0} },  // 2 -> 1
        TETRIS.c   420                { { 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0} },  // 2 -> 2
        TETRIS.c   421                { { 1, 0},{ 1, 1},{ 0,-2},{ 1,-2},{ 0, 0} }   // 2 -> 3
        TETRIS.c   422            },
        TETRIS.c   423            {  // From state 3
        TETRIS.c   424                { {-1, 0},{-1,-1},{ 0, 2},{-1, 2},{ 0, 0} },  // 3 -> 0
        TETRIS.c   425                { {-1, 0},{-1, 2},{-1, 1},{ 0, 2},{ 0, 1} },  // 3 -> 1
        TETRIS.c   426                { {-1, 0},{-1,-1},{ 0, 2},{-1, 2},{ 0, 0} },  // 3 -> 2
        TETRIS.c   427                { { 0, 0},{ 0, 0},{ 0, 0},{ 0, 0},{ 0, 0} }   // 3 -> 3
        TETRIS.c   428            }
        TETRIS.c   429        }
        TETRIS.c   430    };
        TETRIS.c   431    
        TETRIS.c   432    #define FPS 20
        TETRIS.c   433    
        TETRIS.c   434    #define I_PIECE 0
        TETRIS.c   435    #define J_PIECE 1
        TETRIS.c   436    #define L_PIECE 2
        TETRIS.c   437    #define O_PIECE 3
        TETRIS.c   438    #define S_PIECE 4
        TETRIS.c   439    #define T_PIECE 5
        TETRIS.c   440    #define Z_PIECE 6
        TETRIS.c   441    
        TETRIS.c   442    #define ENDLESS_MODE 1
        TETRIS.c   443    #define SPRINT_MODE 2
        TETRIS.c   444    #define ULTRA_MODE 3
        TETRIS.c   445    
        TETRIS.c   446    #define SPAWN_X 3
        TETRIS.c   447    #define SPAWN_Y 18
        TETRIS.c   448    
        TETRIS.c   449    #define ROTATE_CW_KEY KEY_CHAR_8
        TETRIS.c   450    #define ROTATE_ACW_KEY KEY_CHAR_7
        TETRIS.c   451    #define ROTATE_180_KEY KEY_CHAR_4
        TETRIS.c   452    #define HOLD_KEY KEY_CHAR_9
        TETRIS.c   453    #define SOFT_DROP_KEY KEY_CTRL_DOWN
        TETRIS.c   454    #define HARD_DROP_KEY KEY_CHAR_5
        TETRIS.c   455    
        TETRIS.c   456    #define FRAME_TIMER_ID ID_USER_TIMER1
        TETRIS.c   457    #define CLEARTEXT_TIMER_ID ID_USER_TIMER2
        TETRIS.c   458    
        TETRIS.c   459    #define NEXT_QUEUE_SIZE 5
        TETRIS.c   460    #define CLEARTEXT_DURATION 1000  // ms
        TETRIS.c   461    
        TETRIS.c   462    #define DAS 3  // frames
        TETRIS.c   463    #define SDF 10.0f




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   14


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   464    #define LOCK_DELAY 10  // frames
        TETRIS.c   465    #define FORCE_LOCK_MOVES 15
        TETRIS.c   466    #define LINES_PER_LEVEL 10
        TETRIS.c   467    #define MAX_LEVEL 15
        TETRIS.c   468    
        TETRIS.c   469    int ax = SPAWN_X;
        TETRIS.c   470    int ay = SPAWN_Y;
        TETRIS.c   471    int aPiece = 0;
        TETRIS.c   472    int aState = 0;
        TETRIS.c   473    int holdPiece = -1;
        TETRIS.c   474    int usedHold = 0;
        TETRIS.c   475    
        TETRIS.c   476    int moveInputFrames = 0;
        TETRIS.c   477    int currentMoveDir = 0;  // -1, 0, 1 each mean left, none, right
        TETRIS.c   478    
        TETRIS.c   479    int holdingRotateCW = 0;
        TETRIS.c   480    int holdingRotateACW = 0;
        TETRIS.c   481    int holdingRotate180 = 0;
        TETRIS.c   482    int holdingHold = 0;
        TETRIS.c   483    int holdingHardDrop = 0;
        TETRIS.c   484    int rotatedBefore = 0;
        TETRIS.c   485    int isB2B = 0;
        TETRIS.c   486    int combo = 0;
        TETRIS.c   487    
        TETRIS.c   488    float gravityCounter = 0.0f;
        TETRIS.c   489    int lockDelayCounter = 0;
        TETRIS.c   490    int forceLockCounter = 0;
        TETRIS.c   491    
        TETRIS.c   492    int score = 0;
        TETRIS.c   493    int linesTotal = 0;
        TETRIS.c   494    int framesPassed = 1;
        TETRIS.c   495    int level = 1;
        TETRIS.c   496    
        TETRIS.c   497    int board[10][40] = { 0 };
        TETRIS.c   498    int nextQueue[NEXT_QUEUE_SIZE] = { 0 };
        TETRIS.c   499    int bag[7] = { I_PIECE, J_PIECE, L_PIECE, O_PIECE, S_PIECE, T_PIECE, Z_PIECE };
        TETRIS.c   500    int bagSize = 7;
        TETRIS.c   501    
        TETRIS.c   502    int isGameActive = 1;
        TETRIS.c   503    int isAtMenu = 0;
        TETRIS.c   504    
        TETRIS.c   505    int gameMode = 0;
        TETRIS.c   506    
        TETRIS.c   507    // powf() doesn't work
        TETRIS.c   508    float powFI(float f, unsigned int i) {
    00000204              _powFI:                          ; function: powFI
                                                           ; frame size=4
                                                           ; used runtime library name:
                                                           ; __muls
    00000204 4F22                   STS.L       PR,@-R15
        TETRIS.c   509        float r = 1.0f;
        TETRIS.c   510        int j = 0;
    00000206 E600                   MOV         #0,R6
    00000208 D743                   MOV.L       L1232+26,R7; H'3F800000
        TETRIS.c   511        for(; j<i; ++j) r *= f;
    0000020A 6363                   MOV         R6,R3
    0000020C 3352                   CMP/HS      R5,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   15


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000020E 8907                   BT          L956
    00000210              L957:                             
    00000210 D342                   MOV.L       L1232+30,R3; __muls
    00000212 6043                   MOV         R4,R0
    00000214 430B                   JSR         @R3
    00000216 6173                   MOV         R7,R1
    00000218 7601                   ADD         #1,R6
    0000021A 3652                   CMP/HS      R5,R6
    0000021C 8FF8                   BF/S        L957
    0000021E 6703                   MOV         R0,R7
    00000220              L956:                             
        TETRIS.c   512        return r;
        TETRIS.c   513    }
    00000220 4F26                   LDS.L       @R15+,PR
    00000222 000B                   RTS
    00000224 6073                   MOV         R7,R0
        TETRIS.c   514    
        TETRIS.c   515    unsigned int rSeed = 12345;
        TETRIS.c   516    int randInt(int min, int max) {
    00000226              _randInt:                        ; function: randInt
                                                           ; frame size=8
                                                           ; used runtime library name:
                                                           ; __modlu
        TETRIS.c   517        int randomNum;
        TETRIS.c   518        // LCG parameters from Numerical Recipes
        TETRIS.c   519        rSeed = 1664525 * rSeed + 1013904223;
        TETRIS.c   520        
        TETRIS.c   521        // Generate a random number between min and max (inclusive)
        TETRIS.c   522        randomNum = (rSeed % (max - min + 1)) + min;
    00000226 3548                   SUB         R4,R5
    00000228 4F22                   STS.L       PR,@-R15
    0000022A 6053                   MOV         R5,R0
    0000022C D63C                   MOV.L       L1232+34,R6; _rSeed
    0000022E 4F12                   STS.L       MACL,@-R15
    00000230 D33C                   MOV.L       L1232+38,R3; H'0019660D
    00000232 6262                   MOV.L       @R6,R2
    00000234 D13C                   MOV.L       L1232+42,R1; H'3C6EF35F
    00000236 0237                   MUL.L       R3,R2
    00000238 031A                   STS         MACL,R3
    0000023A 331C                   ADD         R1,R3
    0000023C 2632                   MOV.L       R3,@R6
    0000023E 6133                   MOV         R3,R1
    00000240 D33A                   MOV.L       L1232+46,R3; __modlu
    00000242 430B                   JSR         @R3
    00000244 7001                   ADD         #1,R0
    00000246 340C                   ADD         R0,R4
        TETRIS.c   523        return randomNum;
        TETRIS.c   524    }
    00000248 4F16                   LDS.L       @R15+,MACL
    0000024A 6043                   MOV         R4,R0
    0000024C 4F26                   LDS.L       @R15+,PR
    0000024E 000B                   RTS
    00000250 0009                   NOP
        TETRIS.c   525    
        TETRIS.c   526    // Concatenates two strings
        TETRIS.c   527    void strcat(char* dest, const char* src) {
    00000252              _strcat:                         ; function: strcat




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   16


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

                                                           ; frame size=0
        TETRIS.c   528        while(*dest) ++dest;
    00000252 A001                   BRA         L960
    00000254 0009                   NOP
    00000256              L961:                             
    00000256 7401                   ADD         #1,R4
    00000258              L960:                             
    00000258 6240                   MOV.B       @R4,R2
    0000025A 2228                   TST         R2,R2
    0000025C 8BFB                   BF          L961
        TETRIS.c   529        while(*src) {
    0000025E A003                   BRA         L962
    00000260 0009                   NOP
    00000262              L963:                             
        TETRIS.c   530            *dest = *src;
    00000262 6254                   MOV.B       @R5+,R2
    00000264 2420                   MOV.B       R2,@R4
        TETRIS.c   531            ++dest;
    00000266 7401                   ADD         #1,R4
        TETRIS.c   532            ++src;
    00000268              L962:                             
    00000268 6350                   MOV.B       @R5,R3
    0000026A 2338                   TST         R3,R3
    0000026C 8BF9                   BF          L963
        TETRIS.c   533        }
        TETRIS.c   534        *dest = '\0';
    0000026E E300                   MOV         #0,R3
        TETRIS.c   535    }
    00000270 000B                   RTS
    00000272 2430                   MOV.B       R3,@R4
        TETRIS.c   536    
        TETRIS.c   537    // With 7-bag system
        TETRIS.c   538    int getPiece() {
    00000274              _getPiece:                       ; function: getPiece
                                                           ; frame size=12
    00000274 2FE6                   MOV.L       R14,@-R15
    00000276 2FD6                   MOV.L       R13,@-R15
    00000278 4F22                   STS.L       PR,@-R15
        TETRIS.c   539    
        TETRIS.c   540        int randomIndex;
        TETRIS.c   541        int i = 0;
        TETRIS.c   542        int temp;
        TETRIS.c   543    
        TETRIS.c   544        if (bagSize == 0) {
    0000027A DD2D                   MOV.L       L1232+50,R13; _bag
    0000027C DE2D                   MOV.L       L1232+54,R14; _bagSize
    0000027E 63E2                   MOV.L       @R14,R3
    00000280 2338                   TST         R3,R3
    00000282 8B0A                   BF          L964
        TETRIS.c   545            // Refill bag
        TETRIS.c   546            bagSize = 7;
    00000284 E307                   MOV         #7,R3
    00000286 2E32                   MOV.L       R3,@R14
        TETRIS.c   547            for (i = 0; i < bagSize; i++) {
    00000288 A004                   BRA         L965
    0000028A E400                   MOV         #0,R4
    0000028C              L966:                             




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   17


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   548                bag[i] = i;
    0000028C 6043                   MOV         R4,R0
    0000028E 4008                   SHLL2       R0
    00000290 0D46                   MOV.L       R4,@(R0,R13)
    00000292 7401                   ADD         #1,R4
    00000294              L965:                             
    00000294 63E2                   MOV.L       @R14,R3
    00000296 3433                   CMP/GE      R3,R4
    00000298 8BF8                   BF          L966
    0000029A              L964:                             
        TETRIS.c   549            }
        TETRIS.c   550        }
        TETRIS.c   551    
        TETRIS.c   552        // Swaps a random index with last index (bagSize-1)
        TETRIS.c   553        // "Used" pieces are shoved to the end of the bag
        TETRIS.c   554    
        TETRIS.c   555        randomIndex = randInt(0, bagSize - 1);
    0000029A 65E2                   MOV.L       @R14,R5
    0000029C 75FF                   ADD         #-1,R5
    0000029E BFC2                   BSR         _randInt
    000002A0 E400                   MOV         #0,R4
    000002A2 6403                   MOV         R0,R4
        TETRIS.c   556    
        TETRIS.c   557        temp = bag[randomIndex];
        TETRIS.c   558        bag[randomIndex] = bag[bagSize - 1];
    000002A4 60E2                   MOV.L       @R14,R0
    000002A6 4408                   SHLL2       R4
    000002A8 34DC                   ADD         R13,R4
    000002AA 70FF                   ADD         #-1,R0
    000002AC 6542                   MOV.L       @R4,R5
    000002AE 4008                   SHLL2       R0
    000002B0 03DE                   MOV.L       @(R0,R13),R3
    000002B2 2432                   MOV.L       R3,@R4
        TETRIS.c   559        bag[bagSize - 1] = temp;
    000002B4 60E2                   MOV.L       @R14,R0
    000002B6 70FF                   ADD         #-1,R0
    000002B8 4008                   SHLL2       R0
    000002BA 0D56                   MOV.L       R5,@(R0,R13)
        TETRIS.c   560    
        TETRIS.c   561        bagSize--;
    000002BC 63E2                   MOV.L       @R14,R3
    000002BE 73FF                   ADD         #-1,R3
    000002C0 2E32                   MOV.L       R3,@R14
        TETRIS.c   562    
        TETRIS.c   563        return bag[bagSize];
    000002C2 6033                   MOV         R3,R0
        TETRIS.c   564    }
    000002C4 4F26                   LDS.L       @R15+,PR
    000002C6 4008                   SHLL2       R0
    000002C8 00DE                   MOV.L       @(R0,R13),R0
    000002CA 6DF6                   MOV.L       @R15+,R13
    000002CC 000B                   RTS
    000002CE 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   565    
        TETRIS.c   566    int getScore(int level, int lines, int tSpin, int isB2B, int combo, int isPC) {
    000002D0              _getScore:                       ; function: getScore
                                                           ; frame size=8




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   18


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000002D0 2FE6                   MOV.L       R14,@-R15
        TETRIS.c   567        int score = 0;
        TETRIS.c   568        switch(tSpin) {
    000002D2 6063                   MOV         R6,R0
    000002D4 4F12                   STS.L       MACL,@-R15
    000002D6 8800                   CMP/EQ      #0,R0
    000002D8 8D06                   BT/S        L838
    000002DA EE00                   MOV         #0,R14
    000002DC 8801                   CMP/EQ      #1,R0
    000002DE 893A                   BT          L843
    000002E0 8802                   CMP/EQ      #2,R0
    000002E2 8954                   BT          L847
    000002E4 A081                   BRA         L968
    000002E6 0009                   NOP
    000002E8              L838:                            ; case label 
        TETRIS.c   569            case 0:  // No T spin
        TETRIS.c   570                switch(lines) {
    000002E8 6053                   MOV         R5,R0
    000002EA 8801                   CMP/EQ      #1,R0
    000002EC 893C                   BT          L1219
    000002EE 8802                   CMP/EQ      #2,R0
    000002F0 8922                   BT          L840
    000002F2 8803                   CMP/EQ      #3,R0
    000002F4 8923                   BT          L841
    000002F6 8804                   CMP/EQ      #4,R0
    000002F8 8924                   BT          L842
    000002FA A076                   BRA         L968
    000002FC 0009                   NOP
    000002FE              L1232:                            
    000002FE 0000                   .DATA.W     0
    00000300 A44B0000               .DATA.L     H'A44B0000
    00000304 02020000               .DATA.L     H'02020000
    00000308 <00000000>             .DATA.L     __modls
    0000030C <00000000>             .DATA.L     _memcpy
    00000310 <00000000>             .DATA.L     __divls
    00000314 <00000000>             .DATA.L     _GetKey
    00000318 3F800000               .DATA.L     H'3F800000
    0000031C <00000000>             .DATA.L     __muls
    00000320 <00000000>             .DATA.L     _rSeed
    00000324 0019660D               .DATA.L     H'0019660D
    00000328 3C6EF35F               .DATA.L     H'3C6EF35F
    0000032C <00000000>             .DATA.L     __modlu
    00000330 <00000000>             .DATA.L     _bag
    00000334 <00000000>             .DATA.L     _bagSize
    00000338              L840:                            ; case label 
        TETRIS.c   571                    case 1:
        TETRIS.c   572                        score += 100;
        TETRIS.c   573                        break;
        TETRIS.c   574                    case 2:
        TETRIS.c   575                        score += 300;
    00000338 9E4C                   MOV.W       L1233,R14  ; H'012C
        TETRIS.c   576                        break;
    0000033A A056                   BRA         L968
    0000033C 0009                   NOP
    0000033E              L841:                            ; case label 
        TETRIS.c   577                    case 3:
        TETRIS.c   578                        score += 500;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   19


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000033E 9E4A                   MOV.W       L1233+2,R14; H'01F4
        TETRIS.c   579                        break;
    00000340 A053                   BRA         L968
    00000342 0009                   NOP
    00000344              L842:                            ; case label 
        TETRIS.c   580                    case 4:
        TETRIS.c   581                        score += isB2B ? 1200 : 800;
    00000344 2778                   TST         R7,R7
    00000346 8902                   BT          L970
    00000348 9246                   MOV.W       L1233+4,R2 ; H'04B0
    0000034A A001                   BRA         L971
    0000034C 0009                   NOP
    0000034E              L970:                             
    0000034E 9244                   MOV.W       L1233+6,R2 ; H'0320
    00000350              L971:                             
    00000350 3E2C                   ADD         R2,R14
        TETRIS.c   582                        break;
        TETRIS.c   583                }
        TETRIS.c   584                break;
    00000352 A04A                   BRA         L968
    00000354 0009                   NOP
    00000356              L843:                            ; case label 
        TETRIS.c   585            case 1:  // Mini T spin
        TETRIS.c   586                switch(lines) {
    00000356 6053                   MOV         R5,R0
    00000358 8800                   CMP/EQ      #0,R0
    0000035A 8905                   BT          L844
    0000035C 8801                   CMP/EQ      #1,R0
    0000035E 8905                   BT          L845
    00000360 8802                   CMP/EQ      #2,R0
    00000362 890B                   BT          L846
    00000364 A041                   BRA         L968
    00000366 0009                   NOP
    00000368              L844:                            ; case label 
        TETRIS.c   587                    case 0:
        TETRIS.c   588                        score += 100;
        TETRIS.c   589                        break;
    00000368              L1219:                            
    00000368 A03F                   BRA         L968
    0000036A EE64                   MOV         #100,R14
    0000036C              L845:                            ; case label 
        TETRIS.c   590                    case 1:
        TETRIS.c   591                        score += isB2B ? 300 : 200;
    0000036C 2778                   TST         R7,R7
    0000036E 8902                   BT          L973
    00000370 9230                   MOV.W       L1233,R2   ; H'012C
    00000372 A009                   BRA         L1218
    00000374 0009                   NOP
    00000376              L973:                             
    00000376 9231                   MOV.W       L1233+8,R2 ; H'00C8
        TETRIS.c   592                        break;
    00000378 A006                   BRA         L1218
    0000037A 0009                   NOP
    0000037C              L846:                            ; case label 
        TETRIS.c   593                    case 2:
        TETRIS.c   594                        score += isB2B ? 600 : 400;
    0000037C 2778                   TST         R7,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   20


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000037E 8902                   BT          L975
    00000380 922D                   MOV.W       L1233+10,R2; H'0258
    00000382 A001                   BRA         L1218
    00000384 0009                   NOP
    00000386              L975:                             
    00000386 922B                   MOV.W       L1233+12,R2; H'0190
    00000388              L1218:                            
    00000388 3E2C                   ADD         R2,R14
        TETRIS.c   595                        break;
        TETRIS.c   596                }
        TETRIS.c   597                break;
    0000038A A02E                   BRA         L968
    0000038C 0009                   NOP
    0000038E              L847:                            ; case label 
        TETRIS.c   598            case 2:  // T spin
        TETRIS.c   599                switch(lines) {
    0000038E 6053                   MOV         R5,R0
    00000390 8800                   CMP/EQ      #0,R0
    00000392 8907                   BT          L848
    00000394 8801                   CMP/EQ      #1,R0
    00000396 8908                   BT          L849
    00000398 8802                   CMP/EQ      #2,R0
    0000039A 890E                   BT          L850
    0000039C 8803                   CMP/EQ      #3,R0
    0000039E 8914                   BT          L851
    000003A0 A023                   BRA         L968
    000003A2 0009                   NOP
    000003A4              L848:                            ; case label 
        TETRIS.c   600                    case 0:
        TETRIS.c   601                        score += 400;
    000003A4 9E1C                   MOV.W       L1233+12,R14; H'0190
        TETRIS.c   602                        break;
    000003A6 A020                   BRA         L968
    000003A8 0009                   NOP
    000003AA              L849:                            ; case label 
        TETRIS.c   603                    case 1:
        TETRIS.c   604                        score += isB2B ? 1200 : 800;
    000003AA 2778                   TST         R7,R7
    000003AC 8902                   BT          L978
    000003AE 9213                   MOV.W       L1233+4,R2 ; H'04B0
    000003B0 A01A                   BRA         L1221
    000003B2 0009                   NOP
    000003B4              L978:                             
    000003B4 9211                   MOV.W       L1233+6,R2 ; H'0320
        TETRIS.c   605                        break;
    000003B6 A017                   BRA         L1221
    000003B8 0009                   NOP
    000003BA              L850:                            ; case label 
        TETRIS.c   606                    case 2:
        TETRIS.c   607                        score += isB2B ? 1800 : 1200;
    000003BA 2778                   TST         R7,R7
    000003BC 8902                   BT          L980
    000003BE 9210                   MOV.W       L1233+14,R2; H'0708
    000003C0 A012                   BRA         L1221
    000003C2 0009                   NOP
    000003C4              L980:                             
    000003C4 9208                   MOV.W       L1233+4,R2 ; H'04B0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   21


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   608                        break;
    000003C6 A00F                   BRA         L1221
    000003C8 0009                   NOP
    000003CA              L851:                            ; case label 
        TETRIS.c   609                    case 3:
        TETRIS.c   610                        score += isB2B ? 2400 : 1600;
    000003CA 2778                   TST         R7,R7
    000003CC 890B                   BT          L982
    000003CE 9209                   MOV.W       L1233+16,R2; H'0960
    000003D0 A00A                   BRA         L1221
    000003D2 0009                   NOP
    000003D4              L1233:                            
    000003D4 012C                   .DATA.W     H'012C
    000003D6 01F4                   .DATA.W     H'01F4
    000003D8 04B0                   .DATA.W     H'04B0
    000003DA 0320                   .DATA.W     H'0320
    000003DC 00C8                   .DATA.W     H'00C8
    000003DE 0258                   .DATA.W     H'0258
    000003E0 0190                   .DATA.W     H'0190
    000003E2 0708                   .DATA.W     H'0708
    000003E4 0960                   .DATA.W     H'0960
    000003E6              L982:                             
    000003E6 9267                   MOV.W       L1234,R2   ; H'0640
    000003E8              L1221:                            
    000003E8 3E2C                   ADD         R2,R14
        TETRIS.c   611                        break;
        TETRIS.c   612                }
        TETRIS.c   613                break;
    000003EA              L968:                             
        TETRIS.c   614        }
        TETRIS.c   615        // Combo
        TETRIS.c   616        if(combo > 0) {
    000003EA 53F2                   MOV.L       @(8,R15),R3
    000003EC 4315                   CMP/PL      R3
    000003EE 8B04                   BF          L984
        TETRIS.c   617            score += combo*50;
    000003F0 52F2                   MOV.L       @(8,R15),R2
    000003F2 E332                   MOV         #50,R3
    000003F4 0237                   MUL.L       R3,R2
    000003F6 011A                   STS         MACL,R1
    000003F8 3E1C                   ADD         R1,R14
    000003FA              L984:                             
        TETRIS.c   618        }
        TETRIS.c   619        // Perfect clear
        TETRIS.c   620        if(isPC) {
    000003FA 53F3                   MOV.L       @(12,R15),R3
    000003FC 2338                   TST         R3,R3
    000003FE 891A                   BT          L985
        TETRIS.c   621            switch(lines) {
    00000400 6053                   MOV         R5,R0
    00000402 8801                   CMP/EQ      #1,R0
    00000404 8907                   BT          L852
    00000406 8802                   CMP/EQ      #2,R0
    00000408 8908                   BT          L853
    0000040A 8803                   CMP/EQ      #3,R0
    0000040C 8909                   BT          L854
    0000040E 8804                   CMP/EQ      #4,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   22


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000410 890A                   BT          L855
    00000412 A010                   BRA         L985
    00000414 0009                   NOP
    00000416              L852:                            ; case label 
        TETRIS.c   622                case 1:
        TETRIS.c   623                    score += 800;
    00000416 9350                   MOV.W       L1234+2,R3 ; H'0320
        TETRIS.c   624                    break;
    00000418 A00D                   BRA         L985
    0000041A 3E3C                   ADD         R3,R14
    0000041C              L853:                            ; case label 
        TETRIS.c   625                case 2:
        TETRIS.c   626                    score += 1200;
    0000041C 914E                   MOV.W       L1234+4,R1 ; H'04B0
        TETRIS.c   627                    break;
    0000041E A009                   BRA         L1222
    00000420 0009                   NOP
    00000422              L854:                            ; case label 
        TETRIS.c   628                case 3:
        TETRIS.c   629                    score += 1800;
    00000422 924C                   MOV.W       L1234+6,R2 ; H'0708
        TETRIS.c   630                    break;
    00000424 A007                   BRA         L985
    00000426 3E2C                   ADD         R2,R14
    00000428              L855:                            ; case label 
        TETRIS.c   631                case 4:
        TETRIS.c   632                    score += isB2B ? 2000 : 3200;
    00000428 2778                   TST         R7,R7
    0000042A 8902                   BT          L987
    0000042C 9148                   MOV.W       L1234+8,R1 ; H'07D0
    0000042E A001                   BRA         L1222
    00000430 0009                   NOP
    00000432              L987:                             
    00000432 9146                   MOV.W       L1234+10,R1; H'0C80
    00000434              L1222:                            
    00000434 3E1C                   ADD         R1,R14
    00000436              L985:                             
        TETRIS.c   633                    break;
        TETRIS.c   634            }
        TETRIS.c   635        }
        TETRIS.c   636    
        TETRIS.c   637        score *= level;
    00000436 0E47                   MUL.L       R4,R14
    00000438 0E1A                   STS         MACL,R14
        TETRIS.c   638        return score;
    0000043A 60E3                   MOV         R14,R0
        TETRIS.c   639    }
    0000043C 4F16                   LDS.L       @R15+,MACL
    0000043E 000B                   RTS
    00000440 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   640    
        TETRIS.c   641    void itoa(char* str, int n) {
    00000442              _itoa:                           ; function: itoa
                                                           ; frame size=12
                                                           ; used runtime library name:
                                                           ; __divls, __modls
        TETRIS.c   642        int i = 0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   23


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   643        int j = 0;
        TETRIS.c   644        char temp;
        TETRIS.c   645        char isNegative = 0;
        TETRIS.c   646        if(n < 0) {
    00000442 4511                   CMP/PZ      R5
    00000444 2FE6                   MOV.L       R14,@-R15
    00000446 EE00                   MOV         #0,R14
    00000448 2FD6                   MOV.L       R13,@-R15
    0000044A 67E3                   MOV         R14,R7
    0000044C 4F22                   STS.L       PR,@-R15
    0000044E 8D02                   BT/S        L990
    00000450 6DE3                   MOV         R14,R13
        TETRIS.c   647            isNegative = 1;
    00000452 ED01                   MOV         #1,R13
        TETRIS.c   648            n = -n;
    00000454 655B                   NEG         R5,R5
    00000456              L990:                             
    00000456 E60A                   MOV         #10,R6
        TETRIS.c   649        }
        TETRIS.c   650        do {
    00000458              L991:                             
        TETRIS.c   651            str[i++] = n%10 + '0';
    00000458 D31A                   MOV.L       L1234+12,R3; __modls
    0000045A 6273                   MOV         R7,R2
    0000045C 7701                   ADD         #1,R7
    0000045E 324C                   ADD         R4,R2
    00000460 6153                   MOV         R5,R1
    00000462 430B                   JSR         @R3
    00000464 6063                   MOV         R6,R0
    00000466 7030                   ADD         #48,R0
    00000468 2200                   MOV.B       R0,@R2
        TETRIS.c   652            n /= 10;
    0000046A 6063                   MOV         R6,R0
    0000046C D216                   MOV.L       L1234+16,R2; __divls
    0000046E 420B                   JSR         @R2
    00000470 6153                   MOV         R5,R1
    00000472 6503                   MOV         R0,R5
        TETRIS.c   653        } while(n > 0);
    00000474 4515                   CMP/PL      R5
    00000476 89EF                   BT          L991
        TETRIS.c   654        if(isNegative) {
    00000478 6DDE                   EXTS.B      R13,R13
    0000047A 2DD8                   TST         R13,R13
    0000047C 8903                   BT          L992
        TETRIS.c   655            str[i++] = '-';
    0000047E 6073                   MOV         R7,R0
    00000480 7701                   ADD         #1,R7
    00000482 E32D                   MOV         #45,R3
    00000484 0434                   MOV.B       R3,@(R0,R4)
    00000486              L992:                             
        TETRIS.c   656        }
        TETRIS.c   657        str[i] = '\0';
    00000486 6073                   MOV         R7,R0
    00000488 04E4                   MOV.B       R14,@(R0,R4)
        TETRIS.c   658        for(j = 0; j < i/2; ++j) {
    0000048A 66E3                   MOV         R14,R6
    0000048C 6503                   MOV         R0,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   24


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000048E 75FF                   ADD         #-1,R5
    00000490 E300                   MOV         #0,R3
    00000492 3377                   CMP/GT      R7,R3
    00000494 373E                   ADDC        R3,R7
    00000496 4721                   SHAR        R7
    00000498 4715                   CMP/PL      R7
    0000049A 8F09                   BF/S        L993
    0000049C 354C                   ADD         R4,R5
    0000049E              L994:                             
    0000049E 7601                   ADD         #1,R6
        TETRIS.c   659            temp = str[j];
    000004A0 6E40                   MOV.B       @R4,R14
    000004A2 3673                   CMP/GE      R7,R6
        TETRIS.c   660            str[j] = str[i-j-1];
    000004A4 6350                   MOV.B       @R5,R3
    000004A6 2430                   MOV.B       R3,@R4
        TETRIS.c   661            str[i-j-1] = temp;
    000004A8 25E0                   MOV.B       R14,@R5
    000004AA 75FF                   ADD         #-1,R5
    000004AC 8FF7                   BF/S        L994
    000004AE 7401                   ADD         #1,R4
    000004B0              L993:                             
        TETRIS.c   662        }
        TETRIS.c   663    }
    000004B0 4F26                   LDS.L       @R15+,PR
    000004B2 6DF6                   MOV.L       @R15+,R13
    000004B4 000B                   RTS
    000004B6 6EF6                   MOV.L       @R15+,R14
    000004B8              L1234:                            
    000004B8 0640                   .DATA.W     H'0640
    000004BA 0320                   .DATA.W     H'0320
    000004BC 04B0                   .DATA.W     H'04B0
    000004BE 0708                   .DATA.W     H'0708
    000004C0 07D0                   .DATA.W     H'07D0
    000004C2 0C80                   .DATA.W     H'0C80
    000004C4 <00000000>             .DATA.L     __modls
    000004C8 <00000000>             .DATA.L     __divls
        TETRIS.c   664    
        TETRIS.c   665    void ftoa(char* str, float f) {
    000004CC              _ftoa:                           ; function: ftoa
                                                           ; frame size=20
                                                           ; used runtime library name:
                                                           ; __subs, __muls, __negs, __stoi, __itos, __lts
    000004CC 2FE6                   MOV.L       R14,@-R15
        TETRIS.c   666        int i = 0;
    000004CE EE00                   MOV         #0,R14
        TETRIS.c   667        int j = 0;
        TETRIS.c   668        int k = 0;
        TETRIS.c   669        int l = 0;
        TETRIS.c   670        int m = 0;
        TETRIS.c   671        int n = 0;
        TETRIS.c   672        int isNegative = 0;
        TETRIS.c   673        int intPart = (int)f;
    000004D0 D3AD                   MOV.L       L1235+2,R3 ; __stoi
    000004D2 2FD6                   MOV.L       R13,@-R15
    000004D4 2FC6                   MOV.L       R12,@-R15
    000004D6 6C43                   MOV         R4,R12




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   25


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000004D8 4F22                   STS.L       PR,@-R15
    000004DA 7FFC                   ADD         #-4,R15
    000004DC 430B                   JSR         @R3
    000004DE 6053                   MOV         R5,R0
        TETRIS.c   674        int fracPart = 0;
        TETRIS.c   675        float tempF = 0.0f;
        TETRIS.c   676        char tempC;
        TETRIS.c   677        if(f < 0.0f) {
    000004E0 D2AA                   MOV.L       L1235+6,R2 ; __lts
    000004E2 6D03                   MOV         R0,R13
    000004E4 6153                   MOV         R5,R1
    000004E6 420B                   JSR         @R2
    000004E8 60E3                   MOV         R14,R0
    000004EA 8800                   CMP/EQ      #0,R0
    000004EC 8904                   BT          L995
        TETRIS.c   678            isNegative = 1;
        TETRIS.c   679            f = -f;
    000004EE D3A8                   MOV.L       L1235+10,R3; __negs
    000004F0 430B                   JSR         @R3
    000004F2 6053                   MOV         R5,R0
    000004F4 6503                   MOV         R0,R5
        TETRIS.c   680            intPart = -intPart;
    000004F6 6DDB                   NEG         R13,R13
    000004F8              L995:                             
        TETRIS.c   681        }
        TETRIS.c   682        fracPart = (f - (float)intPart) * 1000;
    000004F8 D2A6                   MOV.L       L1235+14,R2; __itos
    000004FA 420B                   JSR         @R2
    000004FC 60D3                   MOV         R13,R0
    000004FE D3A6                   MOV.L       L1235+18,R3; __subs
    00000500 430B                   JSR         @R3
    00000502 6153                   MOV         R5,R1
    00000504 D1A5                   MOV.L       L1235+22,R1; H'447A0000
    00000506 D2A6                   MOV.L       L1235+26,R2; __muls
    00000508 420B                   JSR         @R2
    0000050A 0009                   NOP
    0000050C D39E                   MOV.L       L1235+2,R3 ; __stoi
    0000050E 430B                   JSR         @R3
    00000510 0009                   NOP
        TETRIS.c   683        itoa(str, intPart);
    00000512 65D3                   MOV         R13,R5
    00000514 2F02                   MOV.L       R0,@R15
    00000516 BF94                   BSR         _itoa
    00000518 64C3                   MOV         R12,R4
        TETRIS.c   684        while(str[i]) ++i;
    0000051A A001                   BRA         L996
    0000051C 0009                   NOP
    0000051E              L997:                             
    0000051E 7E01                   ADD         #1,R14
    00000520              L996:                             
    00000520 60E3                   MOV         R14,R0
    00000522 03CC                   MOV.B       @(R0,R12),R3
    00000524 2338                   TST         R3,R3
    00000526 8BFA                   BF          L997
        TETRIS.c   685        str[i++] = '.';
    00000528 60E3                   MOV         R14,R0
    0000052A 7E01                   ADD         #1,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   26


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000052C E32E                   MOV         #46,R3
        TETRIS.c   686        itoa(str+i, fracPart);
    0000052E 64E3                   MOV         R14,R4
    00000530 0C34                   MOV.B       R3,@(R0,R12)
    00000532 34CC                   ADD         R12,R4
    00000534 65F2                   MOV.L       @R15,R5
    00000536 7F04                   ADD         #4,R15
    00000538 4F26                   LDS.L       @R15+,PR
    0000053A 6CF6                   MOV.L       @R15+,R12
    0000053C 6DF6                   MOV.L       @R15+,R13
    0000053E AF80                   BRA         _itoa
    00000540 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   687    
        TETRIS.c   688    }
        TETRIS.c   689    
        TETRIS.c   690    // Only visual, does not change board data
        TETRIS.c   691    void drawCell(int x, int y) {
    00000542              _drawCell:                       ; function: drawCell
                                                           ; frame size=24
        TETRIS.c   692        const int blX = 49+3*x;  // meaning "X of bottom left corner"
    00000542 6343                   MOV         R4,R3
    00000544 2FE6                   MOV.L       R14,@-R15
    00000546 6E43                   MOV         R4,R14
    00000548 2FD6                   MOV.L       R13,@-R15
    0000054A 4E00                   SHLL        R14
    0000054C 2FC6                   MOV.L       R12,@-R15
        TETRIS.c   693        const int blY = 62-3*y;
    0000054E ED3E                   MOV         #62,R13
    00000550 2FB6                   MOV.L       R11,@-R15
    00000552 3E3C                   ADD         R3,R14
        TETRIS.c   694        Bdisp_DrawLineVRAM(blX,blY,blX,blY-2);
    00000554 DC93                   MOV.L       L1235+30,R12; _Bdisp_DrawLineVRAM
    00000556 7E31                   ADD         #49,R14
    00000558 4F22                   STS.L       PR,@-R15
    0000055A 6353                   MOV         R5,R3
    0000055C 7FFC                   ADD         #-4,R15
    0000055E 4500                   SHLL        R5
    00000560 353C                   ADD         R3,R5
    00000562 3D58                   SUB         R5,R13
    00000564 6BD3                   MOV         R13,R11
    00000566 7BFE                   ADD         #-2,R11
    00000568 67B3                   MOV         R11,R7
    0000056A 66E3                   MOV         R14,R6
    0000056C 65D3                   MOV         R13,R5
    0000056E 4C0B                   JSR         @R12
    00000570 64E3                   MOV         R14,R4
        TETRIS.c   695        Bdisp_DrawLineVRAM(blX+1,blY,blX+1,blY-2);
    00000572 67B3                   MOV         R11,R7
    00000574 66E3                   MOV         R14,R6
    00000576 7601                   ADD         #1,R6
    00000578 2F62                   MOV.L       R6,@R15
    0000057A 65D3                   MOV         R13,R5
    0000057C 4C0B                   JSR         @R12
    0000057E 6463                   MOV         R6,R4
        TETRIS.c   696        Bdisp_DrawLineVRAM(blX+2,blY,blX+2,blY-2);
    00000580 67B3                   MOV         R11,R7
    00000582 66E3                   MOV         R14,R6




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   27


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000584 7602                   ADD         #2,R6
    00000586 65D3                   MOV         R13,R5
    00000588 2F62                   MOV.L       R6,@R15
    0000058A 4C0B                   JSR         @R12
    0000058C 6463                   MOV         R6,R4
        TETRIS.c   697    }
    0000058E 7F04                   ADD         #4,R15
    00000590 4F26                   LDS.L       @R15+,PR
    00000592 6BF6                   MOV.L       @R15+,R11
    00000594 6CF6                   MOV.L       @R15+,R12
    00000596 6DF6                   MOV.L       @R15+,R13
    00000598 000B                   RTS
    0000059A 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   698    
        TETRIS.c   699    void drawGhostCell(int x, int y) {
    0000059C              _drawGhostCell:                  ; function: drawGhostCell
                                                           ; frame size=4
    0000059C 7FFC                   ADD         #-4,R15
        TETRIS.c   700        const int pX = 49+3*x +1;
    0000059E 6343                   MOV         R4,R3
    000005A0 4400                   SHLL        R4
    000005A2 343C                   ADD         R3,R4
    000005A4 7432                   ADD         #50,R4
        TETRIS.c   701        const int pY = 62-3*y -1;
    000005A6 6353                   MOV         R5,R3
    000005A8 2F42                   MOV.L       R4,@R15
    000005AA E23D                   MOV         #61,R2
    000005AC 4500                   SHLL        R5
    000005AE 353C                   ADD         R3,R5
        TETRIS.c   702        Bdisp_SetPoint_VRAM(pX, pY, 1);
    000005B0 D37D                   MOV.L       L1235+34,R3; _Bdisp_SetPoint_VRAM
    000005B2 3258                   SUB         R5,R2
    000005B4 6523                   MOV         R2,R5
    000005B6 E601                   MOV         #1,R6
    000005B8 432B                   JMP         @R3
    000005BA 7F04                   ADD         #4,R15
        TETRIS.c   703    }
        TETRIS.c   704    
        TETRIS.c   705    // Only visual, does not change board data
        TETRIS.c   706    void clearCell(int x, int y) {
    000005BC              _clearCell:                      ; function: clearCell
                                                           ; frame size=24
    000005BC 2FE6                   MOV.L       R14,@-R15
        TETRIS.c   707        const int blX = 49+3*x;
    000005BE 6343                   MOV         R4,R3
    000005C0 2FD6                   MOV.L       R13,@-R15
    000005C2 6E43                   MOV         R4,R14
    000005C4 2FC6                   MOV.L       R12,@-R15
        TETRIS.c   708        const int blY = 62-3*y;
    000005C6 ED3E                   MOV         #62,R13
    000005C8 2FB6                   MOV.L       R11,@-R15
    000005CA 4E00                   SHLL        R14
        TETRIS.c   709        Bdisp_ClearLineVRAM(blX,blY,blX,blY-2);
    000005CC DC77                   MOV.L       L1235+38,R12; _Bdisp_ClearLineVRAM
    000005CE 3E3C                   ADD         R3,R14
    000005D0 4F22                   STS.L       PR,@-R15
    000005D2 7E31                   ADD         #49,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   28


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000005D4 7FFC                   ADD         #-4,R15
    000005D6 6353                   MOV         R5,R3
    000005D8 4500                   SHLL        R5
    000005DA 353C                   ADD         R3,R5
    000005DC 3D58                   SUB         R5,R13
    000005DE 6BD3                   MOV         R13,R11
    000005E0 7BFE                   ADD         #-2,R11
    000005E2 67B3                   MOV         R11,R7
    000005E4 66E3                   MOV         R14,R6
    000005E6 65D3                   MOV         R13,R5
    000005E8 4C0B                   JSR         @R12
    000005EA 64E3                   MOV         R14,R4
        TETRIS.c   710        Bdisp_ClearLineVRAM(blX+1,blY,blX+1,blY-2);
    000005EC 67B3                   MOV         R11,R7
    000005EE 66E3                   MOV         R14,R6
    000005F0 7601                   ADD         #1,R6
    000005F2 65D3                   MOV         R13,R5
    000005F4 2F62                   MOV.L       R6,@R15
    000005F6 4C0B                   JSR         @R12
    000005F8 6463                   MOV         R6,R4
        TETRIS.c   711        Bdisp_ClearLineVRAM(blX+2,blY,blX+2,blY-2);
    000005FA 67B3                   MOV         R11,R7
    000005FC 66E3                   MOV         R14,R6
    000005FE 7602                   ADD         #2,R6
    00000600 2F62                   MOV.L       R6,@R15
    00000602 65D3                   MOV         R13,R5
    00000604 4C0B                   JSR         @R12
    00000606 6463                   MOV         R6,R4
        TETRIS.c   712    }
    00000608 7F04                   ADD         #4,R15
    0000060A 4F26                   LDS.L       @R15+,PR
    0000060C 6BF6                   MOV.L       @R15+,R11
    0000060E 6CF6                   MOV.L       @R15+,R12
    00000610 6DF6                   MOV.L       @R15+,R13
    00000612 000B                   RTS
    00000614 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   713    
        TETRIS.c   714    void drawPiece(int x, int y, int pieceType, int state) {
    00000616              _drawPiece:                      ; function: drawPiece
                                                           ; frame size=44
    00000616 4618                   SHLL8       R6
    00000618 D365                   MOV.L       L1235+42,R3; _rotationTable
    0000061A 4708                   SHLL2       R7
    0000061C 2FE6                   MOV.L       R14,@-R15
    0000061E 336C                   ADD         R6,R3
    00000620 2FD6                   MOV.L       R13,@-R15
    00000622 4708                   SHLL2       R7
    00000624 2FC6                   MOV.L       R12,@-R15
    00000626 4708                   SHLL2       R7
    00000628 2FB6                   MOV.L       R11,@-R15
    0000062A EC04                   MOV         #4,R12
    0000062C 2FA6                   MOV.L       R10,@-R15
    0000062E 373C                   ADD         R3,R7
    00000630 2F96                   MOV.L       R9,@-R15
        TETRIS.c   715        int i = 0;
        TETRIS.c   716        int j = 0;
        TETRIS.c   717        for(i = 0; i<4; ++i) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   29


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000632 E900                   MOV         #0,R9
    00000634 2F86                   MOV.L       R8,@-R15
    00000636 6B93                   MOV         R9,R11
    00000638 4F22                   STS.L       PR,@-R15
    0000063A 7FF4                   ADD         #-12,R15
    0000063C 1F41                   MOV.L       R4,@(4,R15)
    0000063E 2F52                   MOV.L       R5,@R15
    00000640 1F72                   MOV.L       R7,@(8,R15)
    00000642              L998:                             
        TETRIS.c   718            for(j = 0; j<4; ++j) {
    00000642 6A93                   MOV         R9,R10
    00000644 6EF2                   MOV.L       @R15,R14
    00000646 6DB3                   MOV         R11,R13
    00000648 53F2                   MOV.L       @(8,R15),R3
    0000064A 4D08                   SHLL2       R13
    0000064C 58F1                   MOV.L       @(4,R15),R8
    0000064E 4D08                   SHLL2       R13
    00000650 3D3C                   ADD         R3,R13
    00000652 38BC                   ADD         R11,R8
    00000654              L999:                             
        TETRIS.c   719                if(rotationTable[pieceType][state][i][j]) {
    00000654 63D2                   MOV.L       @R13,R3
    00000656 2338                   TST         R3,R3
    00000658 8902                   BT          L1000
        TETRIS.c   720                    drawCell(x+i, y+j);
    0000065A 65E3                   MOV         R14,R5
    0000065C BF71                   BSR         _drawCell
    0000065E 6483                   MOV         R8,R4
    00000660              L1000:                            
    00000660 7A01                   ADD         #1,R10
    00000662 7E01                   ADD         #1,R14
    00000664 3AC3                   CMP/GE      R12,R10
    00000666 8FF5                   BF/S        L999
    00000668 7D04                   ADD         #4,R13
    0000066A 7B01                   ADD         #1,R11
    0000066C 3BC3                   CMP/GE      R12,R11
    0000066E 8BE8                   BF          L998
        TETRIS.c   721                }
        TETRIS.c   722            }
        TETRIS.c   723        }
        TETRIS.c   724    }
    00000670 7F0C                   ADD         #12,R15
    00000672 4F26                   LDS.L       @R15+,PR
    00000674 68F6                   MOV.L       @R15+,R8
    00000676 69F6                   MOV.L       @R15+,R9
    00000678 6AF6                   MOV.L       @R15+,R10
    0000067A 6BF6                   MOV.L       @R15+,R11
    0000067C 6CF6                   MOV.L       @R15+,R12
    0000067E 6DF6                   MOV.L       @R15+,R13
    00000680 000B                   RTS
    00000682 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   725    
        TETRIS.c   726    void drawNextQueue(int* queue) {
    00000684              _drawNextQueue:                  ; function: drawNextQueue
                                                           ; frame size=20
    00000684 2FE6                   MOV.L       R14,@-R15
        TETRIS.c   727        int i = 0;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   30


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   728        // Clear
        TETRIS.c   729        for(i = 81; i<96; ++i) {
    00000686 EE51                   MOV         #81,R14
    00000688 2FD6                   MOV.L       R13,@-R15
    0000068A ED60                   MOV         #96,R13
    0000068C 2FC6                   MOV.L       R12,@-R15
    0000068E 4F22                   STS.L       PR,@-R15
    00000690 DC46                   MOV.L       L1235+38,R12; _Bdisp_ClearLineVRAM
    00000692 7FFC                   ADD         #-4,R15
    00000694 2F42                   MOV.L       R4,@R15
    00000696              L1001:                            
        TETRIS.c   730            Bdisp_ClearLineVRAM(i, 8, i, 51);
    00000696 E733                   MOV         #51,R7
    00000698 66E3                   MOV         R14,R6
    0000069A E508                   MOV         #8,R5
    0000069C 4C0B                   JSR         @R12
    0000069E 64E3                   MOV         R14,R4
    000006A0 7E01                   ADD         #1,R14
    000006A2 3ED3                   CMP/GE      R13,R14
    000006A4 8BF7                   BF          L1001
    000006A6 ED0E                   MOV         #14,R13
    000006A8 6EF2                   MOV.L       @R15,R14
    000006AA 6CE3                   MOV         R14,R12
    000006AC 7C14                   ADD         #20,R12
        TETRIS.c   731        }
        TETRIS.c   732        // Draw
        TETRIS.c   733        for(i = 0; i<NEXT_QUEUE_SIZE; ++i) {
    000006AE              L1002:                            
        TETRIS.c   734            drawPiece(11, 14-3*i, queue[i], 0);
    000006AE E700                   MOV         #0,R7
    000006B0 66E6                   MOV.L       @R14+,R6
    000006B2 65D3                   MOV         R13,R5
    000006B4 BFAF                   BSR         _drawPiece
    000006B6 E40B                   MOV         #11,R4
    000006B8 3EC2                   CMP/HS      R12,R14
    000006BA 8FF8                   BF/S        L1002
    000006BC 7DFD                   ADD         #-3,R13
        TETRIS.c   735        }
        TETRIS.c   736    }
    000006BE 7F04                   ADD         #4,R15
    000006C0 4F26                   LDS.L       @R15+,PR
    000006C2 6CF6                   MOV.L       @R15+,R12
    000006C4 6DF6                   MOV.L       @R15+,R13
    000006C6 000B                   RTS
    000006C8 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   737    
        TETRIS.c   738    void drawHold(int piece) {
    000006CA              _drawHold:                       ; function: drawHold
                                                           ; frame size=20
    000006CA 2FE6                   MOV.L       R14,@-R15
    000006CC 2FD6                   MOV.L       R13,@-R15
        TETRIS.c   739        int i = 0;
        TETRIS.c   740        // Clear
        TETRIS.c   741        for(i = 32; i<47; ++i) {
    000006CE EE20                   MOV         #32,R14
    000006D0 2FC6                   MOV.L       R12,@-R15
    000006D2 ED2F                   MOV         #47,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   31


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000006D4 4F22                   STS.L       PR,@-R15
    000006D6 7FFC                   ADD         #-4,R15
    000006D8 DC34                   MOV.L       L1235+38,R12; _Bdisp_ClearLineVRAM
    000006DA 2F42                   MOV.L       R4,@R15
    000006DC              L1003:                            
        TETRIS.c   742            Bdisp_ClearLineVRAM(i, 8, i, 14);
    000006DC E70E                   MOV         #14,R7
    000006DE 66E3                   MOV         R14,R6
    000006E0 E508                   MOV         #8,R5
    000006E2 4C0B                   JSR         @R12
    000006E4 64E3                   MOV         R14,R4
    000006E6 7E01                   ADD         #1,R14
    000006E8 3ED3                   CMP/GE      R13,R14
    000006EA 8BF7                   BF          L1003
        TETRIS.c   743        }
        TETRIS.c   744        // Draw
        TETRIS.c   745        if(piece != -1) drawPiece(-5, 14, piece, 0);
    000006EC 60F2                   MOV.L       @R15,R0
    000006EE 88FF                   CMP/EQ      #-1,R0
    000006F0 8909                   BT          L1004
    000006F2 E700                   MOV         #0,R7
    000006F4 66F2                   MOV.L       @R15,R6
    000006F6 E50E                   MOV         #14,R5
    000006F8 E4FB                   MOV         #-5,R4
    000006FA 7F04                   ADD         #4,R15
    000006FC 4F26                   LDS.L       @R15+,PR
    000006FE 6CF6                   MOV.L       @R15+,R12
    00000700 6DF6                   MOV.L       @R15+,R13
    00000702 AF88                   BRA         _drawPiece
    00000704 6EF6                   MOV.L       @R15+,R14
    00000706              L1004:                            
        TETRIS.c   746    }
    00000706 7F04                   ADD         #4,R15
    00000708 4F26                   LDS.L       @R15+,PR
    0000070A 6CF6                   MOV.L       @R15+,R12
    0000070C 6DF6                   MOV.L       @R15+,R13
    0000070E 000B                   RTS
    00000710 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   747    
        TETRIS.c   748    void drawLockDelay(int frames) {
    00000712              _drawLockDelay:                  ; function: drawLockDelay
                                                           ; frame size=8
        TETRIS.c   749        if(!frames) {
    00000712 6343                   MOV         R4,R3
    00000714 4F22                   STS.L       PR,@-R15
    00000716 2338                   TST         R3,R3
    00000718 7FFC                   ADD         #-4,R15
    0000071A 8F02                   BF/S        L1005
    0000071C 2F42                   MOV.L       R4,@R15
        TETRIS.c   750            Bdisp_ClearLineVRAM(46, 61-2*LOCK_DELAY, 46, 61);
    0000071E A009                   BRA         L1223
    00000720 E73D                   MOV         #61,R7
    00000722              L1005:                            
        TETRIS.c   751        }
        TETRIS.c   752        else {
        TETRIS.c   753            Bdisp_DrawLineVRAM(46, 61, 46, 61-2*LOCK_DELAY);
    00000722 E729                   MOV         #41,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   32


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000724 D31F                   MOV.L       L1235+30,R3; _Bdisp_DrawLineVRAM
    00000726 E62E                   MOV         #46,R6
    00000728 E53D                   MOV         #61,R5
    0000072A 430B                   JSR         @R3
    0000072C 6463                   MOV         R6,R4
        TETRIS.c   754            Bdisp_ClearLineVRAM(46, 61-2*LOCK_DELAY, 46, 61-2*LOCK_DELAY+2*frames);
    0000072E 67F2                   MOV.L       @R15,R7
    00000730 4700                   SHLL        R7
    00000732 7729                   ADD         #41,R7
    00000734              L1223:                            
    00000734 D31D                   MOV.L       L1235+38,R3; _Bdisp_ClearLineVRAM
    00000736 E62E                   MOV         #46,R6
    00000738 E529                   MOV         #41,R5
    0000073A 6463                   MOV         R6,R4
    0000073C 7F04                   ADD         #4,R15
    0000073E 432B                   JMP         @R3
    00000740 4F26                   LDS.L       @R15+,PR
        TETRIS.c   755        }
        TETRIS.c   756    }
        TETRIS.c   757    
        TETRIS.c   758    void drawScore(int score) {
    00000742              _drawScore:                      ; function: drawScore
                                                           ; frame size=40
    00000742 2FE6                   MOV.L       R14,@-R15
    00000744 2FD6                   MOV.L       R13,@-R15
        TETRIS.c   759        int i;
        TETRIS.c   760        char str[20];
        TETRIS.c   761        for (i = 20; i <= 24; i++) {
    00000746 EE14                   MOV         #20,R14
    00000748 2FC6                   MOV.L       R12,@-R15
    0000074A ED18                   MOV         #24,R13
    0000074C 4F22                   STS.L       PR,@-R15
    0000074E 7FE8                   ADD         #-24,R15
    00000750 DC16                   MOV.L       L1235+38,R12; _Bdisp_ClearLineVRAM
    00000752 2F42                   MOV.L       R4,@R15
    00000754              L1007:                            
        TETRIS.c   762            Bdisp_ClearLineVRAM(3, i, 47, i);
    00000754 67E3                   MOV         R14,R7
    00000756 E62F                   MOV         #47,R6
    00000758 65E3                   MOV         R14,R5
    0000075A 4C0B                   JSR         @R12
    0000075C E403                   MOV         #3,R4
    0000075E 7E01                   ADD         #1,R14
    00000760 3ED7                   CMP/GT      R13,R14
    00000762 8BF7                   BF          L1007
        TETRIS.c   763        }
        TETRIS.c   764        itoa(str, score);
    00000764 65F2                   MOV.L       @R15,R5
    00000766 64F3                   MOV         R15,R4
    00000768 BE6B                   BSR         _itoa
    0000076A 7404                   ADD         #4,R4
        TETRIS.c   765        PrintMini(3, 20, str, 0);
    0000076C D211                   MOV.L       L1235+46,R2; _PrintMini
    0000076E E700                   MOV         #0,R7
    00000770 66F3                   MOV         R15,R6
    00000772 7604                   ADD         #4,R6
    00000774 E514                   MOV         #20,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   33


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000776 420B                   JSR         @R2
    00000778 E403                   MOV         #3,R4
        TETRIS.c   766    }
    0000077A 7F18                   ADD         #24,R15
    0000077C 4F26                   LDS.L       @R15+,PR
    0000077E 6CF6                   MOV.L       @R15+,R12
    00000780 6DF6                   MOV.L       @R15+,R13
    00000782 000B                   RTS
    00000784 6EF6                   MOV.L       @R15+,R14
    00000786              L1235:                            
    00000786 0000                   .DATA.W     0
    00000788 <00000000>             .DATA.L     __stoi
    0000078C <00000000>             .DATA.L     __lts
    00000790 <00000000>             .DATA.L     __negs
    00000794 <00000000>             .DATA.L     __itos
    00000798 <00000000>             .DATA.L     __subs
    0000079C 447A0000               .DATA.L     H'447A0000
    000007A0 <00000000>             .DATA.L     __muls
    000007A4 <00000000>             .DATA.L     _Bdisp_DrawLineVRAM
    000007A8 <00000000>             .DATA.L     _Bdisp_SetPoint_VRAM
    000007AC <00000000>             .DATA.L     _Bdisp_ClearLineVRAM
    000007B0 <00000000>             .DATA.L     _rotationTable
    000007B4 <00000000>             .DATA.L     _PrintMini
        TETRIS.c   767    
        TETRIS.c   768    void drawLinesTotal(int lines, int objective) {
    000007B8              _drawLinesTotal:                 ; function: drawLinesTotal
                                                           ; frame size=64
    000007B8 2FE6                   MOV.L       R14,@-R15
        TETRIS.c   769        int i;
        TETRIS.c   770        char strA[20];
        TETRIS.c   771        char strB[20];
        TETRIS.c   772        for (i = 34; i <= 38; i++) {
    000007BA EE22                   MOV         #34,R14
    000007BC 2FD6                   MOV.L       R13,@-R15
    000007BE ED26                   MOV         #38,R13
    000007C0 2FC6                   MOV.L       R12,@-R15
    000007C2 4F22                   STS.L       PR,@-R15
    000007C4 DC7E                   MOV.L       L1236,R12  ; _Bdisp_ClearLineVRAM
    000007C6 7FD0                   ADD         #-48,R15
    000007C8 1F41                   MOV.L       R4,@(4,R15)
    000007CA 2F52                   MOV.L       R5,@R15
    000007CC              L1008:                            
        TETRIS.c   773            Bdisp_ClearLineVRAM(3, i, 47, i);
    000007CC 67E3                   MOV         R14,R7
    000007CE E62F                   MOV         #47,R6
    000007D0 65E3                   MOV         R14,R5
    000007D2 4C0B                   JSR         @R12
    000007D4 E403                   MOV         #3,R4
    000007D6 7E01                   ADD         #1,R14
    000007D8 3ED7                   CMP/GT      R13,R14
    000007DA 8BF7                   BF          L1008
        TETRIS.c   774        }
        TETRIS.c   775        itoa(strA, lines);
    000007DC 55F1                   MOV.L       @(4,R15),R5
    000007DE 6EF3                   MOV         R15,R14
    000007E0 7E1C                   ADD         #28,R14
    000007E2 BE2E                   BSR         _itoa




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   34


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000007E4 64E3                   MOV         R14,R4
        TETRIS.c   776        if(objective) {
    000007E6 62F2                   MOV.L       @R15,R2
    000007E8 2228                   TST         R2,R2
    000007EA 890A                   BT          L1009
        TETRIS.c   777            itoa(strB, objective);
    000007EC 65F2                   MOV.L       @R15,R5
    000007EE 64F3                   MOV         R15,R4
    000007F0 BE27                   BSR         _itoa
    000007F2 7408                   ADD         #8,R4
        TETRIS.c   778            strcat(strA, " / ");
    000007F4 D573                   MOV.L       L1236+4,R5 ; L499
    000007F6 BD2C                   BSR         _strcat
    000007F8 64E3                   MOV         R14,R4
        TETRIS.c   779            strcat(strA, strB);
    000007FA 65F3                   MOV         R15,R5
    000007FC 7508                   ADD         #8,R5
    000007FE BD28                   BSR         _strcat
    00000800 64E3                   MOV         R14,R4
    00000802              L1009:                            
        TETRIS.c   780        }
        TETRIS.c   781        PrintMini(3, 34, strA, 0);
    00000802 E700                   MOV         #0,R7
    00000804 D270                   MOV.L       L1236+8,R2 ; _PrintMini
    00000806 66E3                   MOV         R14,R6
    00000808 E522                   MOV         #34,R5
    0000080A 420B                   JSR         @R2
    0000080C E403                   MOV         #3,R4
        TETRIS.c   782    }
    0000080E 7F30                   ADD         #48,R15
    00000810 4F26                   LDS.L       @R15+,PR
    00000812 6CF6                   MOV.L       @R15+,R12
    00000814 6DF6                   MOV.L       @R15+,R13
    00000816 000B                   RTS
    00000818 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   783    
        TETRIS.c   784    void drawTime(int framesPassed) {
    0000081A              _drawTime:                       ; function: drawTime
                                                           ; frame size=60
                                                           ; used runtime library name:
                                                           ; __divls, __modls
        TETRIS.c   785        int i;
        TETRIS.c   786        char strA[20];
        TETRIS.c   787        char strB[10];
        TETRIS.c   788        int minutes = (framesPassed / FPS) / 60;
    0000081A E63C                   MOV         #60,R6
    0000081C D36B                   MOV.L       L1236+12,R3; __divls
    0000081E 6143                   MOV         R4,R1
    00000820 2FE6                   MOV.L       R14,@-R15
    00000822 2FD6                   MOV.L       R13,@-R15
    00000824 2FC6                   MOV.L       R12,@-R15
    00000826 2FB6                   MOV.L       R11,@-R15
    00000828 4F22                   STS.L       PR,@-R15
    0000082A 7FD8                   ADD         #-40,R15
    0000082C 430B                   JSR         @R3
    0000082E E014                   MOV         #20,R0
    00000830 D266                   MOV.L       L1236+12,R2; __divls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   35


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000832 6503                   MOV         R0,R5
    00000834 6103                   MOV         R0,R1
    00000836 420B                   JSR         @R2
    00000838 6063                   MOV         R6,R0
        TETRIS.c   789        int seconds = (framesPassed / FPS) % 60;
    0000083A 6153                   MOV         R5,R1
    0000083C D364                   MOV.L       L1236+16,R3; __modls
    0000083E 1F01                   MOV.L       R0,@(4,R15)
    00000840 430B                   JSR         @R3
    00000842 6063                   MOV         R6,R0
        TETRIS.c   790        int deciSeconds = (framesPassed/2) % 10;
    00000844 D262                   MOV.L       L1236+16,R2; __modls
    00000846 6C03                   MOV         R0,R12
    00000848 E300                   MOV         #0,R3
    0000084A 3347                   CMP/GT      R4,R3
    0000084C 343E                   ADDC        R3,R4
    0000084E 4421                   SHAR        R4
    00000850 6143                   MOV         R4,R1
    00000852 420B                   JSR         @R2
    00000854 E00A                   MOV         #10,R0
        TETRIS.c   791        for (i = 48; i <= 52; i++) {
    00000856 ED34                   MOV         #52,R13
    00000858 2F02                   MOV.L       R0,@R15
    0000085A EE30                   MOV         #48,R14
    0000085C DB58                   MOV.L       L1236,R11  ; _Bdisp_ClearLineVRAM
    0000085E              L1010:                            
        TETRIS.c   792            Bdisp_ClearLineVRAM(3, i, 45, i);
    0000085E 67E3                   MOV         R14,R7
    00000860 E62D                   MOV         #45,R6
    00000862 65E3                   MOV         R14,R5
    00000864 4B0B                   JSR         @R11
    00000866 E403                   MOV         #3,R4
    00000868 7E01                   ADD         #1,R14
    0000086A 3ED7                   CMP/GT      R13,R14
    0000086C 8BF7                   BF          L1010
        TETRIS.c   793        }
        TETRIS.c   794        itoa(strA, minutes);
    0000086E 6EF3                   MOV         R15,R14
    00000870 55F1                   MOV.L       @(4,R15),R5
    00000872 7E14                   ADD         #20,R14
    00000874 BDE5                   BSR         _itoa
    00000876 64E3                   MOV         R14,R4
        TETRIS.c   795        strcat(strA, ":");
    00000878 D556                   MOV.L       L1236+20,R5; L510
    0000087A BCEA                   BSR         _strcat
    0000087C 64E3                   MOV         R14,R4
        TETRIS.c   796        if(seconds < 10) strcat(strA, "0");
    0000087E E30A                   MOV         #10,R3
    00000880 3C33                   CMP/GE      R3,R12
    00000882 8902                   BT          L1011
    00000884 D554                   MOV.L       L1236+24,R5; L511
    00000886 BCE4                   BSR         _strcat
    00000888 64E3                   MOV         R14,R4
    0000088A              L1011:                            
        TETRIS.c   797        itoa(strB, seconds);
    0000088A 6DF3                   MOV         R15,R13
    0000088C 7D08                   ADD         #8,R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   36


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000088E 65C3                   MOV         R12,R5
    00000890 BDD7                   BSR         _itoa
    00000892 64D3                   MOV         R13,R4
        TETRIS.c   798        strcat(strA, strB);
    00000894 65D3                   MOV         R13,R5
    00000896 BCDC                   BSR         _strcat
    00000898 64E3                   MOV         R14,R4
        TETRIS.c   799        strcat(strA, ".");
    0000089A D550                   MOV.L       L1236+28,R5; L512
    0000089C BCD9                   BSR         _strcat
    0000089E 64E3                   MOV         R14,R4
        TETRIS.c   800        itoa(strB, deciSeconds);
    000008A0 65F2                   MOV.L       @R15,R5
    000008A2 BDCE                   BSR         _itoa
    000008A4 64D3                   MOV         R13,R4
        TETRIS.c   801        strcat(strA, strB);
    000008A6 65D3                   MOV         R13,R5
    000008A8 BCD3                   BSR         _strcat
    000008AA 64E3                   MOV         R14,R4
        TETRIS.c   802        PrintMini(3, 48, strA, 0);
    000008AC D346                   MOV.L       L1236+8,R3 ; _PrintMini
    000008AE E700                   MOV         #0,R7
    000008B0 66E3                   MOV         R14,R6
    000008B2 E530                   MOV         #48,R5
    000008B4 430B                   JSR         @R3
    000008B6 E403                   MOV         #3,R4
        TETRIS.c   803    }
    000008B8 7F28                   ADD         #40,R15
    000008BA 4F26                   LDS.L       @R15+,PR
    000008BC 6BF6                   MOV.L       @R15+,R11
    000008BE 6CF6                   MOV.L       @R15+,R12
    000008C0 6DF6                   MOV.L       @R15+,R13
    000008C2 000B                   RTS
    000008C4 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   804    
        TETRIS.c   805    void drawLevel(int level) {
    000008C6              _drawLevel:                      ; function: drawLevel
                                                           ; frame size=56
                                                           ; used runtime library name:
                                                           ; __slow_mvn
    000008C6 2FE6                   MOV.L       R14,@-R15
    000008C8 2FD6                   MOV.L       R13,@-R15
    000008CA 2FC6                   MOV.L       R12,@-R15
    000008CC 2FB6                   MOV.L       R11,@-R15
    000008CE 4F22                   STS.L       PR,@-R15
        TETRIS.c   806        int i;
        TETRIS.c   807        char strA[20] = "LEVEL ";
    000008D0 D243                   MOV.L       L1236+32,R2; L518
    000008D2 7FDC                   ADD         #-36,R15
    000008D4 D343                   MOV.L       L1236+36,R3; __slow_mvn
    000008D6 6CF3                   MOV         R15,R12
    000008D8 2F42                   MOV.L       R4,@R15
    000008DA 61F3                   MOV         R15,R1
    000008DC 7C10                   ADD         #16,R12
    000008DE 7110                   ADD         #16,R1
    000008E0 430B                   JSR         @R3
    000008E2 E014                   MOV         #20,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   37


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   808        char strB[10];
        TETRIS.c   809        for (i = 56; i <= 60; i++) {
    000008E4 DB36                   MOV.L       L1236,R11  ; _Bdisp_ClearLineVRAM
    000008E6 ED3C                   MOV         #60,R13
    000008E8 EE38                   MOV         #56,R14
    000008EA              L1012:                            
        TETRIS.c   810            Bdisp_ClearLineVRAM(3, i, 47, i);
    000008EA 67E3                   MOV         R14,R7
    000008EC E62F                   MOV         #47,R6
    000008EE 65E3                   MOV         R14,R5
    000008F0 4B0B                   JSR         @R11
    000008F2 E403                   MOV         #3,R4
    000008F4 7E01                   ADD         #1,R14
    000008F6 3ED7                   CMP/GT      R13,R14
    000008F8 8BF7                   BF          L1012
        TETRIS.c   811        }
        TETRIS.c   812        itoa(strB, level);
    000008FA 64F3                   MOV         R15,R4
    000008FC 65F2                   MOV.L       @R15,R5
    000008FE BDA0                   BSR         _itoa
    00000900 7404                   ADD         #4,R4
        TETRIS.c   813        strcat(strA, strB);
    00000902 65F3                   MOV         R15,R5
    00000904 7504                   ADD         #4,R5
    00000906 BCA4                   BSR         _strcat
    00000908 64C3                   MOV         R12,R4
        TETRIS.c   814        PrintMini(3, 56, strA, 0);
    0000090A E700                   MOV         #0,R7
    0000090C D32E                   MOV.L       L1236+8,R3 ; _PrintMini
    0000090E 66C3                   MOV         R12,R6
    00000910 E538                   MOV         #56,R5
    00000912 430B                   JSR         @R3
    00000914 E403                   MOV         #3,R4
        TETRIS.c   815    }
    00000916 7F24                   ADD         #36,R15
    00000918 4F26                   LDS.L       @R15+,PR
    0000091A 6BF6                   MOV.L       @R15+,R11
    0000091C 6CF6                   MOV.L       @R15+,R12
    0000091E 6DF6                   MOV.L       @R15+,R13
    00000920 000B                   RTS
    00000922 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   816    
        TETRIS.c   817    void clearLineClearText() {
    00000924              _clearLineClearText:             ; function: clearLineClearText
                                                           ; frame size=16
    00000924 2FE6                   MOV.L       R14,@-R15
        TETRIS.c   818        int i;
        TETRIS.c   819        for (i = 18; i <= 53; i++) {
    00000926 EE12                   MOV         #18,R14
    00000928 2FD6                   MOV.L       R13,@-R15
    0000092A ED35                   MOV         #53,R13
    0000092C 2FC6                   MOV.L       R12,@-R15
    0000092E 4F22                   STS.L       PR,@-R15
    00000930 DC23                   MOV.L       L1236,R12  ; _Bdisp_ClearLineVRAM
    00000932              L1013:                            
        TETRIS.c   820            Bdisp_ClearLineVRAM(99, i, 127, i);
    00000932 67E3                   MOV         R14,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   38


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000934 E67F                   MOV         #127,R6
    00000936 65E3                   MOV         R14,R5
    00000938 4C0B                   JSR         @R12
    0000093A E463                   MOV         #99,R4
    0000093C 7E01                   ADD         #1,R14
    0000093E 3ED7                   CMP/GT      R13,R14
    00000940 8BF7                   BF          L1013
        TETRIS.c   821        }
        TETRIS.c   822    }
    00000942 4F26                   LDS.L       @R15+,PR
    00000944 6CF6                   MOV.L       @R15+,R12
    00000946 6DF6                   MOV.L       @R15+,R13
    00000948 000B                   RTS
    0000094A 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   823    
        TETRIS.c   824    void drawLineClearText(int lines, int tSpin, int isB2B, int combo, int isPC) {
    0000094C              _drawLineClearText:              ; function: drawLineClearText
                                                           ; frame size=92
                                                           ; used runtime library name:
                                                           ; __slow_mvn
    0000094C 2FE6                   MOV.L       R14,@-R15
    0000094E 2FD6                   MOV.L       R13,@-R15
    00000950 2FC6                   MOV.L       R12,@-R15
    00000952 6D43                   MOV         R4,R13
        TETRIS.c   825        char strA[20] = "+";
    00000954 D224                   MOV.L       L1236+40,R2; L533
    00000956 2FB6                   MOV.L       R11,@-R15
    00000958 2FA6                   MOV.L       R10,@-R15
    0000095A 6B73                   MOV         R7,R11
    0000095C D321                   MOV.L       L1236+36,R3; __slow_mvn
    0000095E 4F22                   STS.L       PR,@-R15
    00000960 7FC4                   ADD         #-60,R15
    00000962 6CF3                   MOV         R15,R12
    00000964 2F52                   MOV.L       R5,@R15
    00000966 61F3                   MOV         R15,R1
    00000968 1F61                   MOV.L       R6,@(4,R15)
    0000096A 7C28                   ADD         #40,R12
    0000096C 7128                   ADD         #40,R1
    0000096E 430B                   JSR         @R3
    00000970 E014                   MOV         #20,R0
        TETRIS.c   826        char strB[20];
        TETRIS.c   827        KillTimer(CLEARTEXT_TIMER_ID);
    00000972 D11E                   MOV.L       L1236+44,R1; _KillTimer
    00000974 410B                   JSR         @R1
    00000976 E402                   MOV         #2,R4
        TETRIS.c   828        switch(lines) {
    00000978 DE13                   MOV.L       L1236+8,R14; _PrintMini
    0000097A 60D3                   MOV         R13,R0
    0000097C 8801                   CMP/EQ      #1,R0
    0000097E 8907                   BT          L862
    00000980 8802                   CMP/EQ      #2,R0
    00000982 8908                   BT          L864
    00000984 8803                   CMP/EQ      #3,R0
    00000986 8909                   BT          L866
    00000988 8804                   CMP/EQ      #4,R0
    0000098A 890A                   BT          L868
    0000098C A00E                   BRA         L1014




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   39


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000098E 0009                   NOP
    00000990              L862:                            ; case label 
        TETRIS.c   829            case 1:
        TETRIS.c   830                PrintMini(99, 30, "SINGLE", 0);
    00000990 D617                   MOV.L       L1236+48,R6; L536
        TETRIS.c   831                break;
    00000992 A008                   BRA         L1226
    00000994 E700                   MOV         #0,R7
    00000996              L864:                            ; case label 
        TETRIS.c   832            case 2:
        TETRIS.c   833                PrintMini(99, 30, "DOUBLE", 0);
    00000996 D617                   MOV.L       L1236+52,R6; L537
        TETRIS.c   834                break;
    00000998 A005                   BRA         L1226
    0000099A E700                   MOV         #0,R7
    0000099C              L866:                            ; case label 
        TETRIS.c   835            case 3:
        TETRIS.c   836                PrintMini(99, 30, "TRIPLE", 0);
    0000099C D616                   MOV.L       L1236+56,R6; L538
        TETRIS.c   837                break;
    0000099E A002                   BRA         L1226
    000009A0 E700                   MOV         #0,R7
    000009A2              L868:                            ; case label 
        TETRIS.c   838            case 4:
        TETRIS.c   839                PrintMini(99, 30, "QUAD", 0);
    000009A2 E700                   MOV         #0,R7
    000009A4 D615                   MOV.L       L1236+60,R6; L539
        TETRIS.c   840                break;
    000009A6              L1226:                            
    000009A6 E51E                   MOV         #30,R5
    000009A8 4E0B                   JSR         @R14
    000009AA E463                   MOV         #99,R4
        TETRIS.c   841            default:
        TETRIS.c   842                break;
    000009AC              L1014:                            
        TETRIS.c   843        }
        TETRIS.c   844        switch(tSpin) {
    000009AC 60F2                   MOV.L       @R15,R0
    000009AE 8801                   CMP/EQ      #1,R0
    000009B0 8903                   BT          L871
    000009B2 8802                   CMP/EQ      #2,R0
    000009B4 8926                   BT          L873
    000009B6 A02A                   BRA         L1015
    000009B8 0009                   NOP
    000009BA              L871:                            ; case label 
        TETRIS.c   845            case 1:
        TETRIS.c   846                PrintMini(99, 24, "MTSPIN", 0);
    000009BA D611                   MOV.L       L1236+64,R6; L541
        TETRIS.c   847                break;
    000009BC A024                   BRA         L1227
    000009BE E700                   MOV         #0,R7
    000009C0              L1236:                            
    000009C0 <00000000>             .DATA.L     _Bdisp_ClearLineVRAM
    000009C4 <00000000>             .DATA.L     L499
    000009C8 <00000000>             .DATA.L     _PrintMini
    000009CC <00000000>             .DATA.L     __divls
    000009D0 <00000000>             .DATA.L     __modls




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   40


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000009D4 <00000000>             .DATA.L     L510
    000009D8 <00000000>             .DATA.L     L511
    000009DC <00000000>             .DATA.L     L512
    000009E0 <00000000>             .DATA.L     L518
    000009E4 <00000000>             .DATA.L     __slow_mvn
    000009E8 <00000000>             .DATA.L     L533
    000009EC <00000000>             .DATA.L     _KillTimer
    000009F0 <00000000>             .DATA.L     L536
    000009F4 <00000000>             .DATA.L     L537
    000009F8 <00000000>             .DATA.L     L538
    000009FC <00000000>             .DATA.L     L539
    00000A00 <00000000>             .DATA.L     L541
    00000A04              L873:                            ; case label 
        TETRIS.c   848            case 2:
        TETRIS.c   849                PrintMini(99, 24, "TSPIN", 0);
    00000A04 D62A                   MOV.L       L1237+4,R6 ; L542
    00000A06 E700                   MOV         #0,R7
        TETRIS.c   850                break;
    00000A08              L1227:                            
    00000A08 E518                   MOV         #24,R5
    00000A0A 4E0B                   JSR         @R14
    00000A0C E463                   MOV         #99,R4
        TETRIS.c   851            default:
        TETRIS.c   852                break;
    00000A0E              L1015:                            
        TETRIS.c   853        }
        TETRIS.c   854        if(isB2B && lines) {
    00000A0E 52F1                   MOV.L       @(4,R15),R2
    00000A10 2228                   TST         R2,R2
    00000A12 8906                   BT          L1016
    00000A14 2DD8                   TST         R13,R13
    00000A16 8904                   BT          L1016
        TETRIS.c   855            PrintMini(99, 18, "B2B", 0);
    00000A18 D626                   MOV.L       L1237+8,R6 ; L544
    00000A1A E512                   MOV         #18,R5
    00000A1C E700                   MOV         #0,R7
    00000A1E 4E0B                   JSR         @R14
    00000A20 E463                   MOV         #99,R4
    00000A22              L1016:                            
        TETRIS.c   856        }
        TETRIS.c   857        if(combo > 0 && lines) {
    00000A22 4B15                   CMP/PL      R11
    00000A24 8B0E                   BF          L1017
    00000A26 2DD8                   TST         R13,R13
    00000A28 890C                   BT          L1017
        TETRIS.c   858            char str[10];
        TETRIS.c   859            itoa(str, combo);
    00000A2A 6AF3                   MOV         R15,R10
    00000A2C 7A08                   ADD         #8,R10
    00000A2E 65B3                   MOV         R11,R5
    00000A30 BD07                   BSR         _itoa
    00000A32 64A3                   MOV         R10,R4
        TETRIS.c   860            strcat(str, " CMB");
    00000A34 D520                   MOV.L       L1237+12,R5; L547
    00000A36 BC0C                   BSR         _strcat
    00000A38 64A3                   MOV         R10,R4
        TETRIS.c   861            PrintMini(99, 36, str, 0);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   41


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A3A E700                   MOV         #0,R7
    00000A3C 66A3                   MOV         R10,R6
    00000A3E E524                   MOV         #36,R5
    00000A40 4E0B                   JSR         @R14
    00000A42 E463                   MOV         #99,R4
    00000A44              L1017:                            
        TETRIS.c   862        }
        TETRIS.c   863        if(isPC && lines) {
    00000A44 E054                   MOV         #84,R0
    00000A46 02FE                   MOV.L       @(R0,R15),R2
    00000A48 2228                   TST         R2,R2
    00000A4A 8906                   BT          L1018
    00000A4C 2DD8                   TST         R13,R13
    00000A4E 8904                   BT          L1018
        TETRIS.c   864            PrintMini(99, 42, "PF.CLR", 0);
    00000A50 D61A                   MOV.L       L1237+16,R6; L549
    00000A52 E52A                   MOV         #42,R5
    00000A54 E700                   MOV         #0,R7
    00000A56 4E0B                   JSR         @R14
    00000A58 E463                   MOV         #99,R4
    00000A5A              L1018:                            
        TETRIS.c   865        }
        TETRIS.c   866        if(gameMode != SPRINT_MODE) {
    00000A5A D219                   MOV.L       L1237+20,R2; _gameMode
    00000A5C 6022                   MOV.L       @R2,R0
    00000A5E 8802                   CMP/EQ      #2,R0
    00000A60 8917                   BT          L1019
        TETRIS.c   867            itoa(strB, getScore(level, lines, tSpin, isB2B, combo, isPC));
    00000A62 E054                   MOV         #84,R0
    00000A64 D317                   MOV.L       L1237+24,R3; _level
    00000A66 65D3                   MOV         R13,R5
    00000A68 01FE                   MOV.L       @(R0,R15),R1
    00000A6A 2F16                   MOV.L       R1,@-R15
    00000A6C 2FB6                   MOV.L       R11,@-R15
    00000A6E 57F3                   MOV.L       @(12,R15),R7
    00000A70 56F2                   MOV.L       @(8,R15),R6
    00000A72 BC2D                   BSR         _getScore
    00000A74 6432                   MOV.L       @R3,R4
    00000A76 7F08                   ADD         #8,R15
    00000A78 6503                   MOV         R0,R5
    00000A7A 64F3                   MOV         R15,R4
    00000A7C BCE1                   BSR         _itoa
    00000A7E 7414                   ADD         #20,R4
        TETRIS.c   868            strcat(strA, strB);
    00000A80 65F3                   MOV         R15,R5
    00000A82 7514                   ADD         #20,R5
    00000A84 BBE5                   BSR         _strcat
    00000A86 64C3                   MOV         R12,R4
        TETRIS.c   869            PrintMini(99, 48, strA, 0);
    00000A88 E700                   MOV         #0,R7
    00000A8A 66C3                   MOV         R12,R6
    00000A8C E530                   MOV         #48,R5
    00000A8E 4E0B                   JSR         @R14
    00000A90 E463                   MOV         #99,R4
    00000A92              L1019:                            
        TETRIS.c   870        }
        TETRIS.c   871        SetTimer(CLEARTEXT_TIMER_ID, CLEARTEXT_DURATION, clearLineClearText);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   42


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000A92 D60D                   MOV.L       L1237+28,R6; _clearLineClearText
    00000A94 950A                   MOV.W       L1237,R5   ; H'03E8
    00000A96 D30D                   MOV.L       L1237+32,R3; _SetTimer
    00000A98 430B                   JSR         @R3
    00000A9A E402                   MOV         #2,R4
        TETRIS.c   872    }
    00000A9C 7F3C                   ADD         #60,R15
    00000A9E 4F26                   LDS.L       @R15+,PR
    00000AA0 6AF6                   MOV.L       @R15+,R10
    00000AA2 6BF6                   MOV.L       @R15+,R11
    00000AA4 6CF6                   MOV.L       @R15+,R12
    00000AA6 6DF6                   MOV.L       @R15+,R13
    00000AA8 000B                   RTS
    00000AAA 6EF6                   MOV.L       @R15+,R14
    00000AAC              L1237:                            
    00000AAC 03E8                   .DATA.W     H'03E8
    00000AAE 0000                   .DATA.W     0
    00000AB0 <00000000>             .DATA.L     L542
    00000AB4 <00000000>             .DATA.L     L544
    00000AB8 <00000000>             .DATA.L     L547
    00000ABC <00000000>             .DATA.L     L549
    00000AC0 <00000000>             .DATA.L     _gameMode
    00000AC4 <00000000>             .DATA.L     _level
    00000AC8 <00000000>             .DATA.L     _clearLineClearText
    00000ACC <00000000>             .DATA.L     _SetTimer
        TETRIS.c   873    
        TETRIS.c   874    // "int y" is for the actual piece, not the ghost
        TETRIS.c   875    void drawGhost(int x, int y, int pieceType, int state) {
    00000AD0              _drawGhost:                      ; function: drawGhost
                                                           ; frame size=52
    00000AD0 2FE6                   MOV.L       R14,@-R15
    00000AD2 2FD6                   MOV.L       R13,@-R15
    00000AD4 2FC6                   MOV.L       R12,@-R15
    00000AD6 2FB6                   MOV.L       R11,@-R15
    00000AD8 2FA6                   MOV.L       R10,@-R15
    00000ADA 2F96                   MOV.L       R9,@-R15
    00000ADC 2F86                   MOV.L       R8,@-R15
    00000ADE 4F22                   STS.L       PR,@-R15
    00000AE0 7FEC                   ADD         #-20,R15
    00000AE2 2F42                   MOV.L       R4,@R15
    00000AE4 1F63                   MOV.L       R6,@(12,R15)
    00000AE6 1F74                   MOV.L       R7,@(16,R15)
        TETRIS.c   876        int newY = getGhostY(x, y, pieceType, state);
    00000AE8 56F3                   MOV.L       @(12,R15),R6
    00000AEA B0B6                   BSR         _getGhostY
    00000AEC 64F2                   MOV.L       @R15,R4
        TETRIS.c   877        int i = 0;
        TETRIS.c   878        int j = 0;
        TETRIS.c   879        for(i = 0; i<4; ++i) {
    00000AEE E900                   MOV         #0,R9
    00000AF0 D183                   MOV.L       L1238,R1   ; _rotationTable
    00000AF2 EC04                   MOV         #4,R12
    00000AF4 1F01                   MOV.L       R0,@(4,R15)
    00000AF6 6B93                   MOV         R9,R11
    00000AF8 53F3                   MOV.L       @(12,R15),R3
    00000AFA 4318                   SHLL8       R3
    00000AFC 52F4                   MOV.L       @(16,R15),R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   43


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000AFE 331C                   ADD         R1,R3
    00000B00 4208                   SHLL2       R2
    00000B02 4208                   SHLL2       R2
    00000B04 4208                   SHLL2       R2
    00000B06 323C                   ADD         R3,R2
    00000B08 1F22                   MOV.L       R2,@(8,R15)
    00000B0A              L1020:                            
        TETRIS.c   880            for(j = 0; j<4; ++j) {
    00000B0A 6A93                   MOV         R9,R10
    00000B0C 5DF1                   MOV.L       @(4,R15),R13
    00000B0E 6EB3                   MOV         R11,R14
    00000B10 53F2                   MOV.L       @(8,R15),R3
    00000B12 4E08                   SHLL2       R14
    00000B14 68F2                   MOV.L       @R15,R8
    00000B16 4E08                   SHLL2       R14
    00000B18 3E3C                   ADD         R3,R14
    00000B1A 38BC                   ADD         R11,R8
    00000B1C              L1021:                            
        TETRIS.c   881                if(rotationTable[pieceType][state][i][j]) {
    00000B1C 63E2                   MOV.L       @R14,R3
    00000B1E 2338                   TST         R3,R3
    00000B20 8902                   BT          L1022
        TETRIS.c   882                    drawGhostCell(x+i, newY+j);
    00000B22 65D3                   MOV         R13,R5
    00000B24 BD3A                   BSR         _drawGhostCell
    00000B26 6483                   MOV         R8,R4
    00000B28              L1022:                            
    00000B28 7A01                   ADD         #1,R10
    00000B2A 7D01                   ADD         #1,R13
    00000B2C 3AC3                   CMP/GE      R12,R10
    00000B2E 8FF5                   BF/S        L1021
    00000B30 7E04                   ADD         #4,R14
    00000B32 7B01                   ADD         #1,R11
    00000B34 3BC3                   CMP/GE      R12,R11
    00000B36 8BE8                   BF          L1020
        TETRIS.c   883                }
        TETRIS.c   884            }
        TETRIS.c   885        }
        TETRIS.c   886    }
    00000B38 7F14                   ADD         #20,R15
    00000B3A 4F26                   LDS.L       @R15+,PR
    00000B3C 68F6                   MOV.L       @R15+,R8
    00000B3E 69F6                   MOV.L       @R15+,R9
    00000B40 6AF6                   MOV.L       @R15+,R10
    00000B42 6BF6                   MOV.L       @R15+,R11
    00000B44 6CF6                   MOV.L       @R15+,R12
    00000B46 6DF6                   MOV.L       @R15+,R13
    00000B48 000B                   RTS
    00000B4A 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   887    
        TETRIS.c   888    // "int y" is for the actual piece, not the ghost
        TETRIS.c   889    void clearGhost(int x, int y, int pieceType, int state) {
    00000B4C              _clearGhost:                     ; function: clearGhost
                                                           ; frame size=16
    00000B4C 4F22                   STS.L       PR,@-R15
    00000B4E 7FF4                   ADD         #-12,R15
    00000B50 2F42                   MOV.L       R4,@R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   44


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000B52 1F61                   MOV.L       R6,@(4,R15)
    00000B54 1F72                   MOV.L       R7,@(8,R15)
        TETRIS.c   890        int newY = getGhostY(x, y, pieceType, state);
    00000B56 56F1                   MOV.L       @(4,R15),R6
    00000B58 B07F                   BSR         _getGhostY
    00000B5A 64F2                   MOV.L       @R15,R4
        TETRIS.c   891        clearPiece(x, newY, pieceType, state);
    00000B5C 57F2                   MOV.L       @(8,R15),R7
    00000B5E 6503                   MOV         R0,R5
    00000B60 56F1                   MOV.L       @(4,R15),R6
    00000B62 64F2                   MOV.L       @R15,R4
    00000B64 7F0C                   ADD         #12,R15
    00000B66 4F26                   LDS.L       @R15+,PR
        TETRIS.c   892    }
        TETRIS.c   893    
        TETRIS.c   894    int clearPiece(int x, int y, int pieceType, int state) {
    00000B68              _clearPiece:                     ; function: clearPiece
                                                           ; frame size=44
    00000B68 2FE6                   MOV.L       R14,@-R15
    00000B6A 4618                   SHLL8       R6
    00000B6C D364                   MOV.L       L1238,R3   ; _rotationTable
    00000B6E 4708                   SHLL2       R7
    00000B70 2FD6                   MOV.L       R13,@-R15
    00000B72 336C                   ADD         R6,R3
    00000B74 2FC6                   MOV.L       R12,@-R15
    00000B76 4708                   SHLL2       R7
    00000B78 2FB6                   MOV.L       R11,@-R15
    00000B7A EC04                   MOV         #4,R12
    00000B7C 2FA6                   MOV.L       R10,@-R15
    00000B7E 4708                   SHLL2       R7
    00000B80 2F96                   MOV.L       R9,@-R15
    00000B82 373C                   ADD         R3,R7
    00000B84 2F86                   MOV.L       R8,@-R15
        TETRIS.c   895        int i = 0;
        TETRIS.c   896        int j = 0;
        TETRIS.c   897        for(i = 0; i<4; ++i) {
    00000B86 E900                   MOV         #0,R9
    00000B88 4F22                   STS.L       PR,@-R15
    00000B8A 6B93                   MOV         R9,R11
    00000B8C 7FF4                   ADD         #-12,R15
    00000B8E 1F41                   MOV.L       R4,@(4,R15)
    00000B90 2F52                   MOV.L       R5,@R15
    00000B92 1F72                   MOV.L       R7,@(8,R15)
    00000B94              L1023:                            
    00000B94 6EF2                   MOV.L       @R15,R14
    00000B96 6DB3                   MOV         R11,R13
    00000B98 53F2                   MOV.L       @(8,R15),R3
        TETRIS.c   898            for(j = 0; j<4; ++j) {
    00000B9A 6A93                   MOV         R9,R10
    00000B9C 58F1                   MOV.L       @(4,R15),R8
    00000B9E 4D08                   SHLL2       R13
    00000BA0 4D08                   SHLL2       R13
    00000BA2 3D3C                   ADD         R3,R13
    00000BA4 38BC                   ADD         R11,R8
    00000BA6              L1024:                            
        TETRIS.c   899                if(rotationTable[pieceType][state][i][j]) {
    00000BA6 63D2                   MOV.L       @R13,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   45


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000BA8 2338                   TST         R3,R3
    00000BAA 8902                   BT          L1025
        TETRIS.c   900                    clearCell(x+i, y+j);
    00000BAC 65E3                   MOV         R14,R5
    00000BAE BD05                   BSR         _clearCell
    00000BB0 6483                   MOV         R8,R4
    00000BB2              L1025:                            
    00000BB2 7A01                   ADD         #1,R10
    00000BB4 7E01                   ADD         #1,R14
    00000BB6 3AC3                   CMP/GE      R12,R10
    00000BB8 8FF5                   BF/S        L1024
    00000BBA 7D04                   ADD         #4,R13
    00000BBC 7B01                   ADD         #1,R11
    00000BBE 3BC3                   CMP/GE      R12,R11
    00000BC0 8BE8                   BF          L1023
        TETRIS.c   901                }
        TETRIS.c   902            }
        TETRIS.c   903        }
        TETRIS.c   904    }
    00000BC2 7F0C                   ADD         #12,R15
    00000BC4 4F26                   LDS.L       @R15+,PR
    00000BC6 68F6                   MOV.L       @R15+,R8
    00000BC8 69F6                   MOV.L       @R15+,R9
    00000BCA 6AF6                   MOV.L       @R15+,R10
    00000BCC 6BF6                   MOV.L       @R15+,R11
    00000BCE 6CF6                   MOV.L       @R15+,R12
    00000BD0 6DF6                   MOV.L       @R15+,R13
    00000BD2 000B                   RTS
    00000BD4 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   905    
        TETRIS.c   906    // Only visual, does not change board data
        TETRIS.c   907    void movePiece(int x, int y, int dx, int dy, int pieceType, int state) {
    00000BD6              _movePiece:                      ; function: movePiece
                                                           ; frame size=20
    00000BD6 4F22                   STS.L       PR,@-R15
    00000BD8 7FF0                   ADD         #-16,R15
    00000BDA 2F42                   MOV.L       R4,@R15
    00000BDC 1F51                   MOV.L       R5,@(4,R15)
    00000BDE 1F62                   MOV.L       R6,@(8,R15)
    00000BE0 1F73                   MOV.L       R7,@(12,R15)
        TETRIS.c   908        clearPiece(x, y, pieceType, state);
    00000BE2 57F6                   MOV.L       @(24,R15),R7
    00000BE4 56F5                   MOV.L       @(20,R15),R6
    00000BE6 55F1                   MOV.L       @(4,R15),R5
    00000BE8 BFBE                   BSR         _clearPiece
    00000BEA 64F2                   MOV.L       @R15,R4
        TETRIS.c   909        drawPiece(x+dx, y+dy, pieceType, state);
    00000BEC 57F6                   MOV.L       @(24,R15),R7
    00000BEE 56F5                   MOV.L       @(20,R15),R6
    00000BF0 53F3                   MOV.L       @(12,R15),R3
    00000BF2 55F1                   MOV.L       @(4,R15),R5
    00000BF4 52F2                   MOV.L       @(8,R15),R2
    00000BF6 353C                   ADD         R3,R5
    00000BF8 64F2                   MOV.L       @R15,R4
    00000BFA 7F10                   ADD         #16,R15
    00000BFC 342C                   ADD         R2,R4
    00000BFE AD0A                   BRA         _drawPiece




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   46


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C00 4F26                   LDS.L       @R15+,PR
        TETRIS.c   910    }
        TETRIS.c   911    
        TETRIS.c   912    // Only visual, does not change board data
        TETRIS.c   913    void rotatePiece(int x, int y, int newX, int newY,
    00000C02              _rotatePiece:                    ; function: rotatePiece
                                                           ; frame size=12
    00000C02 4F22                   STS.L       PR,@-R15
    00000C04 7FF8                   ADD         #-8,R15
    00000C06 2F62                   MOV.L       R6,@R15
    00000C08 1F71                   MOV.L       R7,@(4,R15)
        TETRIS.c   914        int pieceType, int state, int newState) {
        TETRIS.c   915    
        TETRIS.c   916        clearPiece(x, y, pieceType, state);
    00000C0A 57F4                   MOV.L       @(16,R15),R7
    00000C0C BFAC                   BSR         _clearPiece
    00000C0E 56F3                   MOV.L       @(12,R15),R6
        TETRIS.c   917        drawPiece(newX, newY, pieceType, newState);
    00000C10 57F5                   MOV.L       @(20,R15),R7
    00000C12 56F3                   MOV.L       @(12,R15),R6
    00000C14 55F1                   MOV.L       @(4,R15),R5
    00000C16 64F2                   MOV.L       @R15,R4
    00000C18 7F08                   ADD         #8,R15
    00000C1A ACFC                   BRA         _drawPiece
    00000C1C 4F26                   LDS.L       @R15+,PR
        TETRIS.c   918    }
        TETRIS.c   919    
        TETRIS.c   920    int getCell(int x, int y) {
    00000C1E              _getCell:                        ; function: getCell
                                                           ; frame size=0
        TETRIS.c   921         return x<0 || x>9 || y<0 || y>39 || board[x][y];
    00000C1E 4411                   CMP/PZ      R4
    00000C20 8B18                   BF          L1026
    00000C22 E309                   MOV         #9,R3
    00000C24 3437                   CMP/GT      R3,R4
    00000C26 8915                   BT          L1026
    00000C28 4511                   CMP/PZ      R5
    00000C2A 8B13                   BF          L1026
    00000C2C E227                   MOV         #39,R2
    00000C2E 3527                   CMP/GT      R2,R5
    00000C30 8910                   BT          L1026
    00000C32 6043                   MOV         R4,R0
    00000C34 D333                   MOV.L       L1238+4,R3 ; _board
    00000C36 6143                   MOV         R4,R1
    00000C38 4008                   SHLL2       R0
    00000C3A 301C                   ADD         R1,R0
    00000C3C 4008                   SHLL2       R0
    00000C3E 4008                   SHLL2       R0
    00000C40 4000                   SHLL        R0
    00000C42 6153                   MOV         R5,R1
    00000C44 4108                   SHLL2       R1
    00000C46 303C                   ADD         R3,R0
    00000C48 301C                   ADD         R1,R0
    00000C4A 6102                   MOV.L       @R0,R1
    00000C4C 2118                   TST         R1,R1
    00000C4E 8B01                   BF          L1026
    00000C50 000B                   RTS




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   47


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C52 E000                   MOV         #0,R0
    00000C54              L1026:                            
    00000C54 E001                   MOV         #1,R0
        TETRIS.c   922    }
    00000C56              L1028:                            
    00000C56 000B                   RTS
    00000C58 0009                   NOP
        TETRIS.c   923    
        TETRIS.c   924    int getGhostY(int x, int y, int pieceType, int state) {
    00000C5A              _getGhostY:                      ; function: getGhostY
                                                           ; frame size=20
    00000C5A 2FE6                   MOV.L       R14,@-R15
    00000C5C 4F22                   STS.L       PR,@-R15
    00000C5E 7FF4                   ADD         #-12,R15
    00000C60 1F42                   MOV.L       R4,@(8,R15)
    00000C62 1F61                   MOV.L       R6,@(4,R15)
    00000C64 2F72                   MOV.L       R7,@R15
        TETRIS.c   925        int newY = y;
        TETRIS.c   926        while(pieceFits(x, newY, pieceType, state)) {
    00000C66 A001                   BRA         L1029
    00000C68 6E53                   MOV         R5,R14
    00000C6A              L1030:                            
        TETRIS.c   927            --newY;
    00000C6A 7EFF                   ADD         #-1,R14
    00000C6C              L1029:                            
    00000C6C 67F2                   MOV.L       @R15,R7
    00000C6E 65E3                   MOV         R14,R5
    00000C70 56F1                   MOV.L       @(4,R15),R6
    00000C72 B008                   BSR         _pieceFits
    00000C74 54F2                   MOV.L       @(8,R15),R4
    00000C76 2008                   TST         R0,R0
    00000C78 8BF7                   BF          L1030
        TETRIS.c   928        }
        TETRIS.c   929        return newY+1;
    00000C7A 60E3                   MOV         R14,R0
    00000C7C 7001                   ADD         #1,R0
        TETRIS.c   930    }
    00000C7E 7F0C                   ADD         #12,R15
    00000C80 4F26                   LDS.L       @R15+,PR
    00000C82 000B                   RTS
    00000C84 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   931    
        TETRIS.c   932    int pieceFits(int x, int y, int pieceType, int state) {
    00000C86              _pieceFits:                      ; function: pieceFits
                                                           ; frame size=44
    00000C86 4618                   SHLL8       R6
    00000C88 D31D                   MOV.L       L1238,R3   ; _rotationTable
    00000C8A 4708                   SHLL2       R7
    00000C8C 2FE6                   MOV.L       R14,@-R15
    00000C8E 336C                   ADD         R6,R3
    00000C90 2FD6                   MOV.L       R13,@-R15
    00000C92 4708                   SHLL2       R7
    00000C94 2FC6                   MOV.L       R12,@-R15
    00000C96 4708                   SHLL2       R7
    00000C98 2FB6                   MOV.L       R11,@-R15
    00000C9A EC04                   MOV         #4,R12
    00000C9C 2FA6                   MOV.L       R10,@-R15




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   48


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000C9E 373C                   ADD         R3,R7
    00000CA0 2F96                   MOV.L       R9,@-R15
        TETRIS.c   933        int i = 0;
        TETRIS.c   934        int j = 0;
        TETRIS.c   935        for(i = 0; i<4; ++i) {
    00000CA2 E900                   MOV         #0,R9
    00000CA4 2F86                   MOV.L       R8,@-R15
    00000CA6 6B93                   MOV         R9,R11
    00000CA8 4F22                   STS.L       PR,@-R15
    00000CAA 7FF4                   ADD         #-12,R15
    00000CAC 1F41                   MOV.L       R4,@(4,R15)
    00000CAE 2F52                   MOV.L       R5,@R15
    00000CB0 A019                   BRA         L1032
    00000CB2 1F72                   MOV.L       R7,@(8,R15)
    00000CB4              L1033:                            
    00000CB4 6DF2                   MOV.L       @R15,R13
    00000CB6 6EB3                   MOV         R11,R14
    00000CB8 53F2                   MOV.L       @(8,R15),R3
        TETRIS.c   936            for(j = 0; j<4; ++j) {
    00000CBA 6A93                   MOV         R9,R10
    00000CBC 58F1                   MOV.L       @(4,R15),R8
    00000CBE 4E08                   SHLL2       R14
    00000CC0 4E08                   SHLL2       R14
    00000CC2 3E3C                   ADD         R3,R14
    00000CC4 38BC                   ADD         R11,R8
    00000CC6              L1035:                            
        TETRIS.c   937                if(rotationTable[pieceType][state][i][j]) {
    00000CC6 63E2                   MOV.L       @R14,R3
    00000CC8 2338                   TST         R3,R3
    00000CCA 8906                   BT          L1036
        TETRIS.c   938                    if(getCell(x+i, y+j)) return 0;
    00000CCC 65D3                   MOV         R13,R5
    00000CCE BFA6                   BSR         _getCell
    00000CD0 6483                   MOV         R8,R4
    00000CD2 2008                   TST         R0,R0
    00000CD4 8901                   BT          L1036
    00000CD6 A009                   BRA         L1038
    00000CD8 E000                   MOV         #0,R0
    00000CDA              L1036:                            
    00000CDA 7A01                   ADD         #1,R10
    00000CDC 7D01                   ADD         #1,R13
    00000CDE 3AC3                   CMP/GE      R12,R10
    00000CE0 8FF1                   BF/S        L1035
    00000CE2 7E04                   ADD         #4,R14
    00000CE4 7B01                   ADD         #1,R11
    00000CE6              L1032:                            
    00000CE6 3BC3                   CMP/GE      R12,R11
    00000CE8 8BE4                   BF          L1033
        TETRIS.c   939                }
        TETRIS.c   940            }
        TETRIS.c   941        }
        TETRIS.c   942        return 1;
    00000CEA E001                   MOV         #1,R0
        TETRIS.c   943    }
    00000CEC              L1038:                            
    00000CEC 7F0C                   ADD         #12,R15
    00000CEE 4F26                   LDS.L       @R15+,PR




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   49


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CF0 68F6                   MOV.L       @R15+,R8
    00000CF2 69F6                   MOV.L       @R15+,R9
    00000CF4 6AF6                   MOV.L       @R15+,R10
    00000CF6 6BF6                   MOV.L       @R15+,R11
    00000CF8 6CF6                   MOV.L       @R15+,R12
    00000CFA 6DF6                   MOV.L       @R15+,R13
    00000CFC 000B                   RTS
    00000CFE 6EF6                   MOV.L       @R15+,R14
    00000D00              L1238:                            
    00000D00 <00000000>             .DATA.L     _rotationTable
    00000D04 <00000000>             .DATA.L     _board
        TETRIS.c   944    
        TETRIS.c   945    int checkPerfectClear() {
    00000D08              _checkPerfectClear:              ; function: checkPerfectClear
                                                           ; frame size=4
    00000D08 2FC6                   MOV.L       R12,@-R15
    00000D0A E100                   MOV         #0,R1
    00000D0C 908A                   MOV.W       L1239,R0   ; H'00A0
    00000D0E E728                   MOV         #40,R7
    00000D10 D445                   MOV.L       L1239+4,R4 ; _board
    00000D12 6543                   MOV         R4,R5
    00000D14 9C87                   MOV.W       L1239+2,R12; H'0640
        TETRIS.c   946        int i = 0;
        TETRIS.c   947        int j = 0;
        TETRIS.c   948        for(i = 0; i<10; ++i) {
    00000D16 A00D                   BRA         L1039
    00000D18 3C4C                   ADD         R4,R12
    00000D1A              L1040:                            
        TETRIS.c   949            for(j = 0; j<40; ++j) {
    00000D1A 6613                   MOV         R1,R6
    00000D1C 6453                   MOV         R5,R4
    00000D1E              L1042:                            
        TETRIS.c   950                if(board[i][j]) return 0;
    00000D1E 6242                   MOV.L       @R4,R2
    00000D20 2228                   TST         R2,R2
    00000D22 8902                   BT          L1043
    00000D24 E000                   MOV         #0,R0
    00000D26 000B                   RTS
    00000D28 6CF6                   MOV.L       @R15+,R12
    00000D2A              L1043:                            
    00000D2A 7601                   ADD         #1,R6
    00000D2C 3673                   CMP/GE      R7,R6
    00000D2E 8FF6                   BF/S        L1042
    00000D30 7404                   ADD         #4,R4
    00000D32 350C                   ADD         R0,R5
    00000D34              L1039:                            
    00000D34 35C2                   CMP/HS      R12,R5
    00000D36 8BF0                   BF          L1040
        TETRIS.c   951            }
        TETRIS.c   952        }
        TETRIS.c   953        return 1;
    00000D38 E001                   MOV         #1,R0
        TETRIS.c   954    }
    00000D3A              L1044:                            
    00000D3A 000B                   RTS
    00000D3C 6CF6                   MOV.L       @R15+,R12
        TETRIS.c   955    




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   50


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   956    // Only modifies board data, not visuals
        TETRIS.c   957    void lockPiece(int x, int y, int pieceType, int state) {
    00000D3E              _lockPiece:                      ; function: lockPiece
                                                           ; frame size=20
    00000D3E 4708                   SHLL2       R7
    00000D40 D33A                   MOV.L       L1239+8,R3 ; _rotationTable
    00000D42 6243                   MOV         R4,R2
    00000D44 D138                   MOV.L       L1239+4,R1 ; _board
    00000D46 E001                   MOV         #1,R0
    00000D48 2FE6                   MOV.L       R14,@-R15
    00000D4A 4708                   SHLL2       R7
    00000D4C 2FD6                   MOV.L       R13,@-R15
    00000D4E 6E63                   MOV         R6,R14
    00000D50 2FC6                   MOV.L       R12,@-R15
    00000D52 4708                   SHLL2       R7
    00000D54 2FB6                   MOV.L       R11,@-R15
    00000D56 4E18                   SHLL8       R14
    00000D58 2F86                   MOV.L       R8,@-R15
        TETRIS.c   958        int i = 0;
        TETRIS.c   959        int j = 0;
        TETRIS.c   960        for(i = 0; i<4; ++i) {
    00000D5A EB00                   MOV         #0,R11
    00000D5C 6CB3                   MOV         R11,R12
    00000D5E 3E3C                   ADD         R3,R14
    00000D60 3E7C                   ADD         R7,R14
    00000D62 6D43                   MOV         R4,R13
    00000D64 4D08                   SHLL2       R13
    00000D66 3D2C                   ADD         R2,R13
    00000D68 4D08                   SHLL2       R13
    00000D6A 4D08                   SHLL2       R13
    00000D6C 4D00                   SHLL        R13
    00000D6E 3D1C                   ADD         R1,R13
    00000D70 9158                   MOV.W       L1239,R1   ; H'00A0
    00000D72 E604                   MOV         #4,R6
    00000D74 6853                   MOV         R5,R8
    00000D76 4808                   SHLL2       R8
    00000D78              L1045:                            
        TETRIS.c   961            for(j = 0; j<4; ++j) {
    00000D78 67B3                   MOV         R11,R7
    00000D7A 64D3                   MOV         R13,R4
    00000D7C 348C                   ADD         R8,R4
    00000D7E 65E3                   MOV         R14,R5
    00000D80              L1046:                            
        TETRIS.c   962                if(rotationTable[pieceType][state][i][j]) {
    00000D80 6352                   MOV.L       @R5,R3
    00000D82 2338                   TST         R3,R3
    00000D84 8D01                   BT/S        L1047
    00000D86 7701                   ADD         #1,R7
        TETRIS.c   963                    board[x+i][y+j] = 1;
    00000D88 2402                   MOV.L       R0,@R4
    00000D8A              L1047:                            
    00000D8A 7404                   ADD         #4,R4
    00000D8C 3763                   CMP/GE      R6,R7
    00000D8E 8FF7                   BF/S        L1046
    00000D90 7504                   ADD         #4,R5
    00000D92 7C01                   ADD         #1,R12
    00000D94 7E10                   ADD         #16,R14




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   51


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D96 3C63                   CMP/GE      R6,R12
    00000D98 8FEE                   BF/S        L1045
    00000D9A 3D1C                   ADD         R1,R13
        TETRIS.c   964                }
        TETRIS.c   965            }
        TETRIS.c   966        }
        TETRIS.c   967    }
    00000D9C 68F6                   MOV.L       @R15+,R8
    00000D9E 6BF6                   MOV.L       @R15+,R11
    00000DA0 6CF6                   MOV.L       @R15+,R12
    00000DA2 6DF6                   MOV.L       @R15+,R13
    00000DA4 000B                   RTS
    00000DA6 6EF6                   MOV.L       @R15+,R14
        TETRIS.c   968    
        TETRIS.c   969    // Returns kick used, -1 if none or failed
        TETRIS.c   970    int attemptRotation(int x, int y, int pieceType, int state, int newState) {
    00000DA8              _attemptRotation:                ; function: attemptRotation
                                                           ; frame size=60
    00000DA8 2FE6                   MOV.L       R14,@-R15
        TETRIS.c   971        int i = 0;
        TETRIS.c   972        int isNotIPiece = pieceType != I_PIECE;
    00000DAA 2668                   TST         R6,R6
    00000DAC 2FD6                   MOV.L       R13,@-R15
    00000DAE 0029                   MOVT        R0
        TETRIS.c   973    
        TETRIS.c   974        if(pieceFits(ax, ay, aPiece, newState)) {
    00000DB0 DE23                   MOV.L       L1239+28,R14; _ax
    00000DB2 CA01                   XOR         #1,R0
    00000DB4 DD21                   MOV.L       L1239+24,R13; _ay
    00000DB6 2FC6                   MOV.L       R12,@-R15
    00000DB8 2FB6                   MOV.L       R11,@-R15
    00000DBA 2FA6                   MOV.L       R10,@-R15
    00000DBC 2F96                   MOV.L       R9,@-R15
    00000DBE 2F86                   MOV.L       R8,@-R15
    00000DC0 4F22                   STS.L       PR,@-R15
    00000DC2 7FF0                   ADD         #-16,R15
    00000DC4 D91A                   MOV.L       L1239+12,R9; _forceLockCounter
    00000DC6 5AFC                   MOV.L       @(48,R15),R10
    00000DC8 2F02                   MOV.L       R0,@R15
    00000DCA 67A3                   MOV         R10,R7
    00000DCC DB19                   MOV.L       L1239+16,R11; _aPiece
    00000DCE DC1A                   MOV.L       L1239+20,R12; _aState
    00000DD0 66B2                   MOV.L       @R11,R6
    00000DD2 65D2                   MOV.L       @R13,R5
    00000DD4 BF57                   BSR         _pieceFits
    00000DD6 64E2                   MOV.L       @R14,R4
    00000DD8 2008                   TST         R0,R0
    00000DDA 8937                   BT          L1049
        TETRIS.c   975            clearGhost(ax, ay, aPiece, aState);
    00000DDC 67C2                   MOV.L       @R12,R7
    00000DDE 66B2                   MOV.L       @R11,R6
    00000DE0 65D2                   MOV.L       @R13,R5
    00000DE2 BEB3                   BSR         _clearGhost
    00000DE4 64E2                   MOV.L       @R14,R4
        TETRIS.c   976            rotatePiece(ax, ay, ax, ay, aPiece, aState, newState);
    00000DE6 2FA6                   MOV.L       R10,@-R15
    00000DE8 62C2                   MOV.L       @R12,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   52


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000DEA 2F26                   MOV.L       R2,@-R15
    00000DEC 63B2                   MOV.L       @R11,R3
    00000DEE 2F36                   MOV.L       R3,@-R15
    00000DF0 67D2                   MOV.L       @R13,R7
    00000DF2 66E2                   MOV.L       @R14,R6
    00000DF4 6573                   MOV         R7,R5
    00000DF6 BF04                   BSR         _rotatePiece
    00000DF8 6463                   MOV         R6,R4
    00000DFA 7F0C                   ADD         #12,R15
        TETRIS.c   977            drawGhost(ax, ay, aPiece, newState);
    00000DFC 66B2                   MOV.L       @R11,R6
    00000DFE 67A3                   MOV         R10,R7
    00000E00 65D2                   MOV.L       @R13,R5
    00000E02 BE65                   BSR         _drawGhost
    00000E04 64E2                   MOV.L       @R14,R4
        TETRIS.c   978            aState = newState;
        TETRIS.c   979            if(forceLockCounter < FORCE_LOCK_MOVES) {
    00000E06 E20F                   MOV         #15,R2
    00000E08 2CA2                   MOV.L       R10,@R12
    00000E0A 6392                   MOV.L       @R9,R3
    00000E0C 3323                   CMP/GE      R2,R3
    00000E0E 8D06                   BT/S        L1050
        TETRIS.c   980                lockDelayCounter = 0;
        TETRIS.c   981                ++forceLockCounter;
        TETRIS.c   982            }
        TETRIS.c   983            rotatedBefore = 1;
    00000E10 E201                   MOV         #1,R2
    00000E12 E000                   MOV         #0,R0
    00000E14 D10B                   MOV.L       L1239+32,R1; _lockDelayCounter
    00000E16 2102                   MOV.L       R0,@R1
    00000E18 6392                   MOV.L       @R9,R3
    00000E1A 7301                   ADD         #1,R3
    00000E1C 2932                   MOV.L       R3,@R9
    00000E1E              L1050:                            
    00000E1E D10A                   MOV.L       L1239+36,R1; _rotatedBefore
    00000E20 A097                   BRA         L810
    00000E22 2122                   MOV.L       R2,@R1
    00000E24              L1239:                            
    00000E24 00A0                   .DATA.W     H'00A0
    00000E26 0640                   .DATA.W     H'0640
    00000E28 <00000000>             .DATA.L     _board
    00000E2C <00000000>             .DATA.L     _rotationTable
    00000E30 <00000000>             .DATA.L     _forceLockCounter
    00000E34 <00000000>             .DATA.L     _aPiece
    00000E38 <00000000>             .DATA.L     _aState
    00000E3C <00000000>             .DATA.L     _ay
    00000E40 <00000000>             .DATA.L     _ax
    00000E44 <00000000>             .DATA.L     _lockDelayCounter
    00000E48 <00000000>             .DATA.L     _rotatedBefore
    00000E4C              L1049:                            
    00000E4C 62F2                   MOV.L       @R15,R2
        TETRIS.c   984            return -1;
        TETRIS.c   985        }
        TETRIS.c   986        // SRS kick
        TETRIS.c   987        for(i = 0; i<5; ++i) {
    00000E4E E800                   MOV         #0,R8
    00000E50 D156                   MOV.L       L1240+4,R1 ; _kickTable




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   53


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000E52 6323                   MOV         R2,R3
    00000E54 4208                   SHLL2       R2
    00000E56 323C                   ADD         R3,R2
    00000E58 4208                   SHLL2       R2
    00000E5A 4208                   SHLL2       R2
    00000E5C 4208                   SHLL2       R2
    00000E5E 4200                   SHLL        R2
    00000E60 312C                   ADD         R2,R1
    00000E62 63A3                   MOV         R10,R3
    00000E64 1F11                   MOV.L       R1,@(4,R15)
    00000E66 62A3                   MOV         R10,R2
    00000E68 4308                   SHLL2       R3
    00000E6A 332C                   ADD         R2,R3
    00000E6C 4308                   SHLL2       R3
    00000E6E 4300                   SHLL        R3
    00000E70 2F32                   MOV.L       R3,@R15
    00000E72              L1053:                            
        TETRIS.c   988            if(pieceFits(
        TETRIS.c   989                ax+kickTable[isNotIPiece][aState][newState][i][0],
        TETRIS.c   990                ay+kickTable[isNotIPiece][aState][newState][i][1],
        TETRIS.c   991                aPiece, newState) ) {
    00000E72 6183                   MOV         R8,R1
    00000E74 66B2                   MOV.L       @R11,R6
    00000E76 4108                   SHLL2       R1
    00000E78 65C2                   MOV.L       @R12,R5
    00000E7A 6353                   MOV         R5,R3
    00000E7C 52F1                   MOV.L       @(4,R15),R2
    00000E7E 4508                   SHLL2       R5
    00000E80 353C                   ADD         R3,R5
    00000E82 4508                   SHLL2       R5
    00000E84 63F2                   MOV.L       @R15,R3
    00000E86 4508                   SHLL2       R5
    00000E88 4500                   SHLL        R5
    00000E8A 352C                   ADD         R2,R5
    00000E8C 353C                   ADD         R3,R5
    00000E8E 4100                   SHLL        R1
    00000E90 351C                   ADD         R1,R5
    00000E92 1F52                   MOV.L       R5,@(8,R15)
    00000E94 61D2                   MOV.L       @R13,R1
    00000E96 5551                   MOV.L       @(4,R5),R5
    00000E98 54F2                   MOV.L       @(8,R15),R4
    00000E9A 351C                   ADD         R1,R5
    00000E9C 6442                   MOV.L       @R4,R4
    00000E9E 61E2                   MOV.L       @R14,R1
    00000EA0 341C                   ADD         R1,R4
    00000EA2 BEF0                   BSR         _pieceFits
    00000EA4 67A3                   MOV         R10,R7
    00000EA6 2008                   TST         R0,R0
    00000EA8 894F                   BT          L1054
        TETRIS.c   992                
        TETRIS.c   993                clearGhost(ax, ay, aPiece, aState);
    00000EAA 67C2                   MOV.L       @R12,R7
    00000EAC 66B2                   MOV.L       @R11,R6
    00000EAE 65D2                   MOV.L       @R13,R5
    00000EB0 BE4C                   BSR         _clearGhost
    00000EB2 64E2                   MOV.L       @R14,R4
        TETRIS.c   994                rotatePiece(ax, ay,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   54


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c   995                    ax+kickTable[isNotIPiece][aState][newState][i][0],
        TETRIS.c   996                    ay+kickTable[isNotIPiece][aState][newState][i][1],
        TETRIS.c   997                    aPiece, aState, newState);
    00000EB4 2FA6                   MOV.L       R10,@-R15
    00000EB6 63C2                   MOV.L       @R12,R3
    00000EB8 2F36                   MOV.L       R3,@-R15
    00000EBA 62B2                   MOV.L       @R11,R2
    00000EBC 2F26                   MOV.L       R2,@-R15
    00000EBE 67C2                   MOV.L       @R12,R7
    00000EC0 52F4                   MOV.L       @(16,R15),R2
    00000EC2 6373                   MOV         R7,R3
    00000EC4 4708                   SHLL2       R7
    00000EC6 373C                   ADD         R3,R7
    00000EC8 53F3                   MOV.L       @(12,R15),R3
    00000ECA 4708                   SHLL2       R7
    00000ECC 4708                   SHLL2       R7
    00000ECE 4700                   SHLL        R7
    00000ED0 372C                   ADD         R2,R7
    00000ED2 373C                   ADD         R3,R7
    00000ED4 6283                   MOV         R8,R2
    00000ED6 4208                   SHLL2       R2
    00000ED8 4200                   SHLL        R2
    00000EDA 372C                   ADD         R2,R7
    00000EDC 1F25                   MOV.L       R2,@(20,R15)
    00000EDE 1F76                   MOV.L       R7,@(24,R15)
    00000EE0 63D2                   MOV.L       @R13,R3
    00000EE2 5771                   MOV.L       @(4,R7),R7
    00000EE4 56F6                   MOV.L       @(24,R15),R6
    00000EE6 373C                   ADD         R3,R7
    00000EE8 65D2                   MOV.L       @R13,R5
    00000EEA 63E2                   MOV.L       @R14,R3
    00000EEC 6662                   MOV.L       @R6,R6
    00000EEE 363C                   ADD         R3,R6
    00000EF0 BE87                   BSR         _rotatePiece
    00000EF2 6433                   MOV         R3,R4
    00000EF4 7F0C                   ADD         #12,R15
        TETRIS.c   998                ax += kickTable[isNotIPiece][aState][newState][i][0];
        TETRIS.c   999                ay += kickTable[isNotIPiece][aState][newState][i][1];
        TETRIS.c  1000                aState = newState;
        TETRIS.c  1001                drawGhost(ax, ay, aPiece, aState);
    00000EF6 67A3                   MOV         R10,R7
    00000EF8 64C2                   MOV.L       @R12,R4
    00000EFA 6343                   MOV         R4,R3
    00000EFC 52F1                   MOV.L       @(4,R15),R2
    00000EFE 4408                   SHLL2       R4
    00000F00 51F2                   MOV.L       @(8,R15),R1
    00000F02 343C                   ADD         R3,R4
    00000F04 60E2                   MOV.L       @R14,R0
    00000F06 4408                   SHLL2       R4
    00000F08 63F2                   MOV.L       @R15,R3
    00000F0A 4408                   SHLL2       R4
    00000F0C 4400                   SHLL        R4
    00000F0E 342C                   ADD         R2,R4
    00000F10 343C                   ADD         R3,R4
    00000F12 341C                   ADD         R1,R4
    00000F14 6342                   MOV.L       @R4,R3
    00000F16 303C                   ADD         R3,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   55


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000F18 2E02                   MOV.L       R0,@R14
    00000F1A 5341                   MOV.L       @(4,R4),R3
    00000F1C 62D2                   MOV.L       @R13,R2
    00000F1E 323C                   ADD         R3,R2
    00000F20 2D22                   MOV.L       R2,@R13
    00000F22 2CA2                   MOV.L       R10,@R12
    00000F24 66B2                   MOV.L       @R11,R6
    00000F26 65D2                   MOV.L       @R13,R5
    00000F28 BDD2                   BSR         _drawGhost
    00000F2A 64E2                   MOV.L       @R14,R4
        TETRIS.c  1002                if(forceLockCounter < FORCE_LOCK_MOVES) {
    00000F2C 6392                   MOV.L       @R9,R3
    00000F2E E20F                   MOV         #15,R2
    00000F30 3323                   CMP/GE      R2,R3
    00000F32 8D06                   BT/S        L1055
        TETRIS.c  1003                    lockDelayCounter = 0;
        TETRIS.c  1004                    ++forceLockCounter;
        TETRIS.c  1005                }
        TETRIS.c  1006                rotatedBefore = 1;
    00000F34 E201                   MOV         #1,R2
    00000F36 E000                   MOV         #0,R0
    00000F38 D11D                   MOV.L       L1240+8,R1 ; _lockDelayCounter
    00000F3A 2102                   MOV.L       R0,@R1
    00000F3C 6392                   MOV.L       @R9,R3
    00000F3E 7301                   ADD         #1,R3
    00000F40 2932                   MOV.L       R3,@R9
    00000F42              L1055:                            
    00000F42 D11C                   MOV.L       L1240+12,R1; _rotatedBefore
    00000F44 2122                   MOV.L       R2,@R1
        TETRIS.c  1007                return i;
    00000F46 A005                   BRA         L1051
    00000F48 6083                   MOV         R8,R0
    00000F4A              L1054:                            
    00000F4A 7801                   ADD         #1,R8
    00000F4C E305                   MOV         #5,R3
    00000F4E 3833                   CMP/GE      R3,R8
    00000F50 8B8F                   BF          L1053
    00000F52              L810:
        TETRIS.c  1008            }
        TETRIS.c  1009        }
        TETRIS.c  1010        return -1;
    00000F52 E0FF                   MOV         #-1,R0
        TETRIS.c  1011    }
    00000F54              L1051:                            
    00000F54 7F10                   ADD         #16,R15
    00000F56 4F26                   LDS.L       @R15+,PR
    00000F58 68F6                   MOV.L       @R15+,R8
    00000F5A 69F6                   MOV.L       @R15+,R9
    00000F5C 6AF6                   MOV.L       @R15+,R10
    00000F5E 6BF6                   MOV.L       @R15+,R11
    00000F60 6CF6                   MOV.L       @R15+,R12
    00000F62 6DF6                   MOV.L       @R15+,R13
    00000F64 000B                   RTS
    00000F66 6EF6                   MOV.L       @R15+,R14
        TETRIS.c  1012    
        TETRIS.c  1013    // Clears lines, redraws board
        TETRIS.c  1014    // Return line clears




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   56


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1015    int updateBoard() {
    00000F68              _updateBoard:                    ; function: updateBoard
                                                           ; frame size=32
    00000F68 2FE6                   MOV.L       R14,@-R15
    00000F6A 2FD6                   MOV.L       R13,@-R15
    00000F6C 2FC6                   MOV.L       R12,@-R15
        TETRIS.c  1016        int i = 0;
        TETRIS.c  1017        int j = 0;
        TETRIS.c  1018        int k = 0;
        TETRIS.c  1019        int rowFull = 0;
        TETRIS.c  1020        int lines = 0;
    00000F6E ED00                   MOV         #0,R13
    00000F70 D411                   MOV.L       L1240+16,R4; _board
        TETRIS.c  1021        
        TETRIS.c  1022        // Clear rows loop
        TETRIS.c  1023        for(j = 0; j<40; ++j) {
    00000F72 67D3                   MOV         R13,R7
    00000F74 9E18                   MOV.W       L1240,R14  ; H'0640
    00000F76 2FB6                   MOV.L       R11,@-R15
    00000F78 2FA6                   MOV.L       R10,@-R15
    00000F7A 3E4C                   ADD         R4,R14
    00000F7C 9115                   MOV.W       L1240+2,R1 ; H'009C
    00000F7E EB28                   MOV         #40,R11
    00000F80 2F96                   MOV.L       R9,@-R15
    00000F82 6A43                   MOV         R4,R10
    00000F84 4F22                   STS.L       PR,@-R15
    00000F86 6513                   MOV         R1,R5
    00000F88 7FFC                   ADD         #-4,R15
    00000F8A 2FD2                   MOV.L       R13,@R15
    00000F8C A036                   BRA         L1056
    00000F8E 7504                   ADD         #4,R5
    00000F90              L1057:                            
        TETRIS.c  1024            rowFull = 1;
    00000F90 E601                   MOV         #1,R6
    00000F92 64A3                   MOV         R10,R4
    00000F94 6C73                   MOV         R7,R12
        TETRIS.c  1025            for(i = 0; i<10; ++i) {
    00000F96 34E2                   CMP/HS      R14,R4
    00000F98 8D13                   BT/S        L1058
    00000F9A 4C08                   SHLL2       R12
    00000F9C              L1059:                            
        TETRIS.c  1026                // Not using getCell() because unneeded out of bounds check
        TETRIS.c  1027                if(!board[i][j]) {
    00000F9C 60C3                   MOV         R12,R0
    00000F9E 034E                   MOV.L       @(R0,R4),R3
    00000FA0 2338                   TST         R3,R3
    00000FA2 8B0B                   BF          L1060
        TETRIS.c  1028                    rowFull = 0;
        TETRIS.c  1029                    break;
    00000FA4 A00D                   BRA         L1058
    00000FA6 66D3                   MOV         R13,R6
    00000FA8              L1240:                            
    00000FA8 0640                   .DATA.W     H'0640
    00000FAA 009C                   .DATA.W     H'009C
    00000FAC <00000000>             .DATA.L     _kickTable
    00000FB0 <00000000>             .DATA.L     _lockDelayCounter
    00000FB4 <00000000>             .DATA.L     _rotatedBefore




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   57


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FB8 <00000000>             .DATA.L     _board
    00000FBC              L1060:                            
    00000FBC 345C                   ADD         R5,R4
    00000FBE 34E2                   CMP/HS      R14,R4
    00000FC0 8BEC                   BF          L1059
    00000FC2              L1058:                            
        TETRIS.c  1030                }
        TETRIS.c  1031            }
        TETRIS.c  1032            if(rowFull) {
    00000FC2 2668                   TST         R6,R6
    00000FC4 8919                   BT          L1062
        TETRIS.c  1033                ++lines;
    00000FC6 62F2                   MOV.L       @R15,R2
    00000FC8 7201                   ADD         #1,R2
    00000FCA 2F22                   MOV.L       R2,@R15
        TETRIS.c  1034                // Shift rows down
        TETRIS.c  1035                for(k = j; k<39; ++k) {
    00000FCC A00B                   BRA         L1063
    00000FCE 6673                   MOV         R7,R6
    00000FD0              L1064:                            
    00000FD0 64A3                   MOV         R10,R4
    00000FD2 6963                   MOV         R6,R9
    00000FD4 4908                   SHLL2       R9
        TETRIS.c  1036                    for(i = 0; i<10; ++i) {
    00000FD6              L1065:                            
        TETRIS.c  1037                        board[i][k] = board[i][k+1];
    00000FD6 6C43                   MOV         R4,R12
    00000FD8 3C9C                   ADD         R9,R12
    00000FDA 345C                   ADD         R5,R4
    00000FDC 52C1                   MOV.L       @(4,R12),R2
    00000FDE 34E2                   CMP/HS      R14,R4
    00000FE0 8FF9                   BF/S        L1065
    00000FE2 2C22                   MOV.L       R2,@R12
    00000FE4 7601                   ADD         #1,R6
    00000FE6              L1063:                            
    00000FE6 E227                   MOV         #39,R2
    00000FE8 3623                   CMP/GE      R2,R6
    00000FEA 8BF1                   BF          L1064
    00000FEC 64A3                   MOV         R10,R4
        TETRIS.c  1038                    }
        TETRIS.c  1039                }
        TETRIS.c  1040                // Empty top row
        TETRIS.c  1041                for(k = 0; k<10; ++k) {
    00000FEE              L1066:                            
        TETRIS.c  1042                    board[k][39] = 0;
    00000FEE 6013                   MOV         R1,R0
    00000FF0 04D6                   MOV.L       R13,@(R0,R4)
    00000FF2 345C                   ADD         R5,R4
    00000FF4 34E2                   CMP/HS      R14,R4
    00000FF6 8BFA                   BF          L1066
        TETRIS.c  1043                }
        TETRIS.c  1044                --j;
    00000FF8 77FF                   ADD         #-1,R7
    00000FFA              L1062:                            
    00000FFA 7701                   ADD         #1,R7
    00000FFC              L1056:                            
    00000FFC 37B3                   CMP/GE      R11,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   58


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000FFE 8BC7                   BF          L1057
        TETRIS.c  1045            }
        TETRIS.c  1046        }
        TETRIS.c  1047        
        TETRIS.c  1048        // Redraw board loop
        TETRIS.c  1049        for(i = 0; i<10; ++i) {
    00001000 E90A                   MOV         #10,R9
    00001002 6CD3                   MOV         R13,R12
    00001004              L1067:                            
    00001004 D266                   MOV.L       L1241+2,R2 ; _board
        TETRIS.c  1050            for(j = 0; j<40; ++j) {
    00001006 6ED3                   MOV         R13,R14
    00001008 6AC3                   MOV         R12,R10
    0000100A 63C3                   MOV         R12,R3
    0000100C 4A08                   SHLL2       R10
    0000100E 3A3C                   ADD         R3,R10
    00001010 4A08                   SHLL2       R10
    00001012 4A08                   SHLL2       R10
    00001014 4A00                   SHLL        R10
    00001016 3A2C                   ADD         R2,R10
    00001018              L1068:                            
        TETRIS.c  1051                if(board[i][j]) {
    00001018 60E3                   MOV         R14,R0
    0000101A 4008                   SHLL2       R0
    0000101C 03AE                   MOV.L       @(R0,R10),R3
    0000101E 2338                   TST         R3,R3
    00001020 8904                   BT          L1069
        TETRIS.c  1052                    drawCell(i,j);
    00001022 65E3                   MOV         R14,R5
    00001024 BA8D                   BSR         _drawCell
    00001026 64C3                   MOV         R12,R4
    00001028 A003                   BRA         L1070
    0000102A 0009                   NOP
    0000102C              L1069:                            
        TETRIS.c  1053                }
        TETRIS.c  1054                else {
        TETRIS.c  1055                    clearCell(i,j);
    0000102C 65E3                   MOV         R14,R5
    0000102E BAC5                   BSR         _clearCell
    00001030 64C3                   MOV         R12,R4
    00001032              L1070:                            
    00001032 7E01                   ADD         #1,R14
    00001034 3EB3                   CMP/GE      R11,R14
    00001036 8BEF                   BF          L1068
    00001038 7C01                   ADD         #1,R12
    0000103A 3C93                   CMP/GE      R9,R12
    0000103C 8BE2                   BF          L1067
        TETRIS.c  1056                }
        TETRIS.c  1057            }
        TETRIS.c  1058        }
        TETRIS.c  1059        return lines;
    0000103E 60F2                   MOV.L       @R15,R0
        TETRIS.c  1060    }
    00001040 7F04                   ADD         #4,R15
    00001042 4F26                   LDS.L       @R15+,PR
    00001044 69F6                   MOV.L       @R15+,R9
    00001046 6AF6                   MOV.L       @R15+,R10




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   59


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001048 6BF6                   MOV.L       @R15+,R11
    0000104A 6CF6                   MOV.L       @R15+,R12
    0000104C 6DF6                   MOV.L       @R15+,R13
    0000104E 000B                   RTS
    00001050 6EF6                   MOV.L       @R15+,R14
        TETRIS.c  1061    
        TETRIS.c  1062    // Main game logic
        TETRIS.c  1063    // 20 FPS as of now
        TETRIS.c  1064    // Controls:
        TETRIS.c  1065    //   Left, Right: Movement
        TETRIS.c  1066    //   Down: Soft drop
        TETRIS.c  1067    //   9: Hold
        TETRIS.c  1068    //   7, 8: Rotate ACW/CW
        TETRIS.c  1069    //   5: Hard drop
        TETRIS.c  1070    //   4: Rotate 180
        TETRIS.c  1071    int frame() {
    00001052              _frame:                          ; function: frame
                                                           ; frame size=92
                                                           ; used runtime library name:
                                                           ; __divls, __modls, __adds, __subs, __muls, __divs, __itos, __ges
    00001052 2FE6                   MOV.L       R14,@-R15
    00001054 2FD6                   MOV.L       R13,@-R15
    00001056 2FC6                   MOV.L       R12,@-R15
    00001058 2FB6                   MOV.L       R11,@-R15
    0000105A 2FA6                   MOV.L       R10,@-R15
    0000105C 2F96                   MOV.L       R9,@-R15
        TETRIS.c  1072        int key = 0;
        TETRIS.c  1073        int usedTSpinKick = 0;
    0000105E EA00                   MOV         #0,R10
    00001060 2F86                   MOV.L       R8,@-R15
    00001062 4F22                   STS.L       PR,@-R15
    00001064 7FCC                   ADD         #-52,R15
    00001066 2FA2                   MOV.L       R10,@R15
        TETRIS.c  1074        if(KeyDown(KEY_CTRL_EXIT) || KeyDown(KEY_CTRL_MENU)) {
    00001068 B866                   BSR         _KeyDown
    0000106A E42F                   MOV         #47,R4
    0000106C 600C                   EXTU.B      R0,R0
    0000106E 2008                   TST         R0,R0
    00001070 8B04                   BF          L1073
    00001072 B861                   BSR         _KeyDown
    00001074 E430                   MOV         #48,R4
    00001076 600C                   EXTU.B      R0,R0
    00001078 2008                   TST         R0,R0
    0000107A 8928                   BT          L1072
    0000107C              L1073:                            
        TETRIS.c  1075            KillTimer(FRAME_TIMER_ID);
    0000107C D349                   MOV.L       L1241+6,R3 ; _KillTimer
    0000107E 430B                   JSR         @R3
    00001080 E401                   MOV         #1,R4
        TETRIS.c  1076            if(KeyDown(KEY_CTRL_MENU)) {
    00001082 B859                   BSR         _KeyDown
    00001084 E430                   MOV         #48,R4
    00001086 600C                   EXTU.B      R0,R0
    00001088 2008                   TST         R0,R0
    0000108A 891C                   BT          L1074
        TETRIS.c  1077                Bdisp_AllClr_DDVRAM();
    0000108C D246                   MOV.L       L1241+10,R2; _Bdisp_AllClr_DDVRAM




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   60


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000108E 420B                   JSR         @R2
    00001090 0009                   NOP
        TETRIS.c  1078                isGameActive = 0;
    00001092 D346                   MOV.L       L1241+14,R3; _isGameActive
        TETRIS.c  1079                PopUpWin(3);
    00001094 D246                   MOV.L       L1241+18,R2; _PopUpWin
    00001096 23A2                   MOV.L       R10,@R3
    00001098 420B                   JSR         @R2
    0000109A E403                   MOV         #3,R4
        TETRIS.c  1080                locate(8,3);
    0000109C D345                   MOV.L       L1241+22,R3; _locate
    0000109E E503                   MOV         #3,R5
    000010A0 430B                   JSR         @R3
    000010A2 E408                   MOV         #8,R4
        TETRIS.c  1081                Print("STOPPED");
    000010A4 D444                   MOV.L       L1241+26,R4; L676
    000010A6 D245                   MOV.L       L1241+30,R2; _Print
    000010A8 420B                   JSR         @R2
    000010AA 0009                   NOP
        TETRIS.c  1082                locate(5,5);
    000010AC D341                   MOV.L       L1241+22,R3; _locate
    000010AE E505                   MOV         #5,R5
    000010B0 430B                   JSR         @R3
    000010B2 6453                   MOV         R5,R4
        TETRIS.c  1083                Print("Press any key");
    000010B4 D442                   MOV.L       L1241+34,R4; L677
    000010B6 D241                   MOV.L       L1241+30,R2; _Print
    000010B8 420B                   JSR         @R2
    000010BA 0009                   NOP
        TETRIS.c  1084                Bdisp_PutDisp_DD();
    000010BC D341                   MOV.L       L1241+38,R3; _Bdisp_PutDisp_DD
    000010BE 430B                   JSR         @R3
    000010C0 0009                   NOP
    000010C2 A4E9                   BRA         L820
    000010C4 0009                   NOP
    000010C6              L1074:                            
        TETRIS.c  1085            }
        TETRIS.c  1086            else {
        TETRIS.c  1087                mainMenu(1);
    000010C6 B4F2                   BSR         _mainMenu
    000010C8 E401                   MOV         #1,R4
    000010CA A4E5                   BRA         L820
    000010CC 0009                   NOP
    000010CE              L1072:                            
        TETRIS.c  1088            }
        TETRIS.c  1089            return 1;
        TETRIS.c  1090        }
        TETRIS.c  1091        isGameActive = 1;
    000010CE E201                   MOV         #1,R2
    000010D0 D336                   MOV.L       L1241+14,R3; _isGameActive
        TETRIS.c  1092        
        TETRIS.c  1093        SetTimer(ID_USER_TIMER1, 1000/FPS, frame);
    000010D2 6423                   MOV         R2,R4
    000010D4 D63C                   MOV.L       L1241+42,R6; _frame
    000010D6 2322                   MOV.L       R2,@R3
    000010D8 D23C                   MOV.L       L1241+46,R2; _SetTimer
    000010DA 420B                   JSR         @R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   61


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000010DC E532                   MOV         #50,R5
        TETRIS.c  1094        
        TETRIS.c  1095        // Hold
        TETRIS.c  1096        if(KeyDown(HOLD_KEY) && !holdingHold && !usedHold) {
    000010DE D83C                   MOV.L       L1241+50,R8; _gravityCounter
    000010E0 DB3C                   MOV.L       L1241+54,R11; _aPiece
    000010E2 DC3D                   MOV.L       L1241+58,R12; _aState
    000010E4 DD3D                   MOV.L       L1241+62,R13; _ax
    000010E6 DE3E                   MOV.L       L1241+66,R14; _ay
    000010E8 B826                   BSR         _KeyDown
    000010EA E436                   MOV         #54,R4
    000010EC 600C                   EXTU.B      R0,R0
    000010EE 2008                   TST         R0,R0
    000010F0 8B01                   BF          L1242
    000010F2 A087                   BRA         L1077
    000010F4 0009                   NOP
    000010F6              L1242:                            
    000010F6 D23B                   MOV.L       L1241+70,R2; _holdingHold
    000010F8 6322                   MOV.L       @R2,R3
    000010FA 2338                   TST         R3,R3
    000010FC 8901                   BT          L1243
    000010FE A081                   BRA         L1077
    00001100 0009                   NOP
    00001102              L1243:                            
    00001102 D139                   MOV.L       L1241+74,R1; _usedHold
    00001104 6312                   MOV.L       @R1,R3
    00001106 2338                   TST         R3,R3
    00001108 8901                   BT          L1244
    0000110A A07B                   BRA         L1077
    0000110C 0009                   NOP
    0000110E              L1244:                            
        TETRIS.c  1097            clearPiece(ax, ay, aPiece, aState);
    0000110E 67C2                   MOV.L       @R12,R7
    00001110 66B2                   MOV.L       @R11,R6
    00001112 65E2                   MOV.L       @R14,R5
    00001114 BD28                   BSR         _clearPiece
    00001116 64D2                   MOV.L       @R13,R4
        TETRIS.c  1098            clearGhost(ax, ay, aPiece, aState);
    00001118 67C2                   MOV.L       @R12,R7
    0000111A 66B2                   MOV.L       @R11,R6
    0000111C 65E2                   MOV.L       @R14,R5
    0000111E BD15                   BSR         _clearGhost
    00001120 64D2                   MOV.L       @R13,R4
        TETRIS.c  1099            ax = SPAWN_X;
    00001122 E303                   MOV         #3,R3
        TETRIS.c  1100            ay = SPAWN_Y;
        TETRIS.c  1101            aState = 0;
        TETRIS.c  1102            gravityCounter = 0;
        TETRIS.c  1103            lockDelayCounter = 0;
        TETRIS.c  1104            forceLockCounter = 0;
        TETRIS.c  1105            rotatedBefore = 0;
    00001124 D133                   MOV.L       L1241+86,R1; _rotatedBefore
    00001126 E212                   MOV         #18,R2
    00001128 D933                   MOV.L       L1241+90,R9; _holdPiece
    0000112A 2D32                   MOV.L       R3,@R13
    0000112C 2E22                   MOV.L       R2,@R14
    0000112E E300                   MOV         #0,R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   62


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001130 2CA2                   MOV.L       R10,@R12
    00001132 2832                   MOV.L       R3,@R8
    00001134 D22D                   MOV.L       L1241+78,R2; _lockDelayCounter
    00001136 22A2                   MOV.L       R10,@R2
    00001138 D32D                   MOV.L       L1241+82,R3; _forceLockCounter
    0000113A 23A2                   MOV.L       R10,@R3
    0000113C 21A2                   MOV.L       R10,@R1
    0000113E 6092                   MOV.L       @R9,R0
    00001140 88FF                   CMP/EQ      #-1,R0
    00001142 8F16                   BF/S        L1078
    00001144 6403                   MOV         R0,R4
        TETRIS.c  1106            if(holdPiece == -1) {
        TETRIS.c  1107                int i = 0;
        TETRIS.c  1108                holdPiece = aPiece;
    00001146 60B2                   MOV.L       @R11,R0
        TETRIS.c  1109                aPiece = nextQueue[0];
    00001148 D22C                   MOV.L       L1241+94,R2; _nextQueue
    0000114A 2902                   MOV.L       R0,@R9
    0000114C 6322                   MOV.L       @R2,R3
    0000114E 2B32                   MOV.L       R3,@R11
    00001150 D52B                   MOV.L       L1241+98,R5; H'00000010+_nextQueue
        TETRIS.c  1110                // Shift queue
        TETRIS.c  1111                for(i = 0; i<NEXT_QUEUE_SIZE-1; ++i) {
    00001152 A003                   BRA         L1079
    00001154 6423                   MOV         R2,R4
    00001156              L1080:                            
        TETRIS.c  1112                    nextQueue[i] = nextQueue[i+1];
    00001156 5341                   MOV.L       @(4,R4),R3
    00001158 2432                   MOV.L       R3,@R4
    0000115A 7404                   ADD         #4,R4
    0000115C              L1079:                            
    0000115C 3452                   CMP/HS      R5,R4
    0000115E 8BFA                   BF          L1080
        TETRIS.c  1113                }
        TETRIS.c  1114                nextQueue[NEXT_QUEUE_SIZE-1] = getPiece();
    00001160 D327                   MOV.L       L1241+98,R3; H'00000010+_nextQueue
    00001162 B887                   BSR         _getPiece
    00001164 2F36                   MOV.L       R3,@-R15
    00001166 61F6                   MOV.L       @R15+,R1
        TETRIS.c  1115                drawNextQueue(nextQueue);
    00001168 D424                   MOV.L       L1241+94,R4; _nextQueue
    0000116A BA8B                   BSR         _drawNextQueue
    0000116C 2102                   MOV.L       R0,@R1
    0000116E A003                   BRA         L1081
    00001170 0009                   NOP
    00001172              L1078:                            
        TETRIS.c  1116            }
        TETRIS.c  1117            else {
        TETRIS.c  1118                int temp = aPiece;
    00001172 65B2                   MOV.L       @R11,R5
        TETRIS.c  1119                aPiece = holdPiece;
    00001174 2B42                   MOV.L       R4,@R11
        TETRIS.c  1120                holdPiece = temp;
    00001176 2952                   MOV.L       R5,@R9
    00001178              L1081:                            
        TETRIS.c  1121            }
        TETRIS.c  1122            usedHold = 1;




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   63


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001178 D21B                   MOV.L       L1241+74,R2; _usedHold
    0000117A E301                   MOV         #1,R3
    0000117C 2232                   MOV.L       R3,@R2
        TETRIS.c  1123            drawHold(holdPiece);
    0000117E BAA4                   BSR         _drawHold
    00001180 6492                   MOV.L       @R9,R4
        TETRIS.c  1124            drawPiece(ax, ay, aPiece, aState);
    00001182 67C2                   MOV.L       @R12,R7
    00001184 66B2                   MOV.L       @R11,R6
    00001186 65E2                   MOV.L       @R14,R5
    00001188 BA45                   BSR         _drawPiece
    0000118A 64D2                   MOV.L       @R13,R4
        TETRIS.c  1125            drawGhost(ax, ay, aPiece, aState);
    0000118C 67C2                   MOV.L       @R12,R7
    0000118E 66B2                   MOV.L       @R11,R6
    00001190 65E2                   MOV.L       @R14,R5
    00001192 BC9D                   BSR         _drawGhost
    00001194 64D2                   MOV.L       @R13,R4
        TETRIS.c  1126            holdingHold = 1;
    00001196 E201                   MOV         #1,R2
    00001198 D312                   MOV.L       L1241+70,R3; _holdingHold
    0000119A A035                   BRA         L1082
    0000119C 2322                   MOV.L       R2,@R3
    0000119E              L1241:                            
    0000119E 0000                   .DATA.W     0
    000011A0 <00000000>             .DATA.L     _board
    000011A4 <00000000>             .DATA.L     _KillTimer
    000011A8 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    000011AC <00000000>             .DATA.L     _isGameActive
    000011B0 <00000000>             .DATA.L     _PopUpWin
    000011B4 <00000000>             .DATA.L     _locate
    000011B8 <00000000>             .DATA.L     L676
    000011BC <00000000>             .DATA.L     _Print
    000011C0 <00000000>             .DATA.L     L677
    000011C4 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    000011C8 <00000000>             .DATA.L     _frame
    000011CC <00000000>             .DATA.L     _SetTimer
    000011D0 <00000000>             .DATA.L     _gravityCounter
    000011D4 <00000000>             .DATA.L     _aPiece
    000011D8 <00000000>             .DATA.L     _aState
    000011DC <00000000>             .DATA.L     _ax
    000011E0 <00000000>             .DATA.L     _ay
    000011E4 <00000000>             .DATA.L     _holdingHold
    000011E8 <00000000>             .DATA.L     _usedHold
    000011EC <00000000>             .DATA.L     _lockDelayCounter
    000011F0 <00000000>             .DATA.L     _forceLockCounter
    000011F4 <00000000>             .DATA.L     _rotatedBefore
    000011F8 <00000000>             .DATA.L     _holdPiece
    000011FC <00000000>             .DATA.L     _nextQueue
    00001200 <00000010>             .DATA.L     H'00000010+_nextQueue
    00001204              L1077:                            
        TETRIS.c  1127        }
        TETRIS.c  1128        else {
        TETRIS.c  1129            holdingHold = 0;
    00001204 D073                   MOV.L       L1245+2,R0 ; _holdingHold
    00001206 20A2                   MOV.L       R10,@R0
    00001208              L1082:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   64


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1130        }
        TETRIS.c  1131    
        TETRIS.c  1132        if(KeyDown(KEY_CTRL_LEFT)) {
    00001208 D973                   MOV.L       L1245+6,R9 ; _moveInputFrames
    0000120A D374                   MOV.L       L1245+10,R3; _KeyDown
    0000120C 430B                   JSR         @R3
    0000120E E426                   MOV         #38,R4
    00001210 600C                   EXTU.B      R0,R0
    00001212 2008                   TST         R0,R0
    00001214 890D                   BT          L1083
        TETRIS.c  1133            switch(currentMoveDir) {
    00001216 D372                   MOV.L       L1245+14,R3; _currentMoveDir
    00001218 6032                   MOV.L       @R3,R0
    0000121A 88FF                   CMP/EQ      #-1,R0
    0000121C 8B03                   BF          L882
    0000121E              L881:                            ; case label 
        TETRIS.c  1134                case -1:
        TETRIS.c  1135                    ++moveInputFrames;
    0000121E 6292                   MOV.L       @R9,R2
    00001220 7201                   ADD         #1,R2
        TETRIS.c  1136                    break;
    00001222 A01D                   BRA         L1085
    00001224 2922                   MOV.L       R2,@R9
    00001226              L882:                            ; default label 
        TETRIS.c  1137                default:
        TETRIS.c  1138                    moveInputFrames = 1;
    00001226 E001                   MOV         #1,R0
        TETRIS.c  1139                    currentMoveDir = -1;
    00001228 D16D                   MOV.L       L1245+14,R1; _currentMoveDir
    0000122A E2FF                   MOV         #-1,R2
    0000122C 2902                   MOV.L       R0,@R9
    0000122E A017                   BRA         L1085
    00001230 2122                   MOV.L       R2,@R1
    00001232              L1083:                            
        TETRIS.c  1140            }
        TETRIS.c  1141        }
        TETRIS.c  1142        else if(KeyDown(KEY_CTRL_RIGHT)) {
    00001232 D26A                   MOV.L       L1245+10,R2; _KeyDown
    00001234 420B                   JSR         @R2
    00001236 E41B                   MOV         #27,R4
    00001238 600C                   EXTU.B      R0,R0
    0000123A 2008                   TST         R0,R0
    0000123C 890D                   BT          L1086
        TETRIS.c  1143            switch(currentMoveDir) {
    0000123E D268                   MOV.L       L1245+14,R2; _currentMoveDir
    00001240 6022                   MOV.L       @R2,R0
    00001242 8801                   CMP/EQ      #1,R0
    00001244 8B03                   BF          L884
    00001246              L883:                            ; case label 
        TETRIS.c  1144                case 1:
        TETRIS.c  1145                    ++moveInputFrames;
    00001246 6392                   MOV.L       @R9,R3
    00001248 7301                   ADD         #1,R3
        TETRIS.c  1146                    break;
    0000124A A009                   BRA         L1085
    0000124C 2932                   MOV.L       R3,@R9
    0000124E              L884:                            ; default label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   65


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1147                default:
        TETRIS.c  1148                    moveInputFrames = 1;
    0000124E E001                   MOV         #1,R0
        TETRIS.c  1149                    currentMoveDir = 1;
    00001250 D163                   MOV.L       L1245+14,R1; _currentMoveDir
    00001252 6303                   MOV         R0,R3
    00001254 2902                   MOV.L       R0,@R9
    00001256 A003                   BRA         L1085
    00001258 2102                   MOV.L       R0,@R1
    0000125A              L1086:                            
        TETRIS.c  1150            }
        TETRIS.c  1151        }
        TETRIS.c  1152        else {
        TETRIS.c  1153            moveInputFrames = 0;
    0000125A 29A2                   MOV.L       R10,@R9
        TETRIS.c  1154            currentMoveDir = 0;
    0000125C D360                   MOV.L       L1245+14,R3; _currentMoveDir
    0000125E 23A2                   MOV.L       R10,@R3
    00001260              L1085:                            
        TETRIS.c  1155        }
        TETRIS.c  1156        if( (moveInputFrames == 1 || moveInputFrames > DAS+1)
        TETRIS.c  1157            && pieceFits(ax+currentMoveDir, ay, aPiece, aState) ) {
    00001260 6092                   MOV.L       @R9,R0
    00001262 8801                   CMP/EQ      #1,R0
    00001264 8903                   BT          L1090
    00001266 E304                   MOV         #4,R3
    00001268 6292                   MOV.L       @R9,R2
    0000126A 3237                   CMP/GT      R3,R2
    0000126C 8B37                   BF          L1089
    0000126E              L1090:                            
    0000126E D05D                   MOV.L       L1245+18,R0; _aState
    00001270 D35D                   MOV.L       L1245+22,R3; _aPiece
    00001272 6702                   MOV.L       @R0,R7
    00001274 6632                   MOV.L       @R3,R6
    00001276 D25D                   MOV.L       L1245+26,R2; _ay
    00001278 D159                   MOV.L       L1245+14,R1; _currentMoveDir
    0000127A 6522                   MOV.L       @R2,R5
    0000127C 6312                   MOV.L       @R1,R3
    0000127E D25C                   MOV.L       L1245+30,R2; _ax
    00001280 6422                   MOV.L       @R2,R4
    00001282 BD00                   BSR         _pieceFits
    00001284 343C                   ADD         R3,R4
    00001286 2008                   TST         R0,R0
    00001288 8929                   BT          L1089
        TETRIS.c  1158            
        TETRIS.c  1159            clearGhost(ax, ay, aPiece, aState);
    0000128A 67C2                   MOV.L       @R12,R7
    0000128C 66B2                   MOV.L       @R11,R6
    0000128E 65E2                   MOV.L       @R14,R5
    00001290 BC5C                   BSR         _clearGhost
    00001292 64D2                   MOV.L       @R13,R4
        TETRIS.c  1160            movePiece(ax, ay, currentMoveDir, 0, aPiece, aState);
    00001294 63C2                   MOV.L       @R12,R3
    00001296 E700                   MOV         #0,R7
    00001298 2F36                   MOV.L       R3,@-R15
    0000129A 62B2                   MOV.L       @R11,R2
    0000129C D350                   MOV.L       L1245+14,R3; _currentMoveDir




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   66


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000129E 2F26                   MOV.L       R2,@-R15
    000012A0 6632                   MOV.L       @R3,R6
    000012A2 65E2                   MOV.L       @R14,R5
    000012A4 BC97                   BSR         _movePiece
    000012A6 64D2                   MOV.L       @R13,R4
        TETRIS.c  1161            ax += currentMoveDir;
    000012A8 D14D                   MOV.L       L1245+14,R1; _currentMoveDir
    000012AA 7F08                   ADD         #8,R15
    000012AC 6312                   MOV.L       @R1,R3
    000012AE 62D2                   MOV.L       @R13,R2
    000012B0 323C                   ADD         R3,R2
    000012B2 2D22                   MOV.L       R2,@R13
        TETRIS.c  1162            drawGhost(ax, ay, aPiece, aState);
    000012B4 67C2                   MOV.L       @R12,R7
    000012B6 66B2                   MOV.L       @R11,R6
    000012B8 65E2                   MOV.L       @R14,R5
    000012BA BC09                   BSR         _drawGhost
    000012BC 6423                   MOV         R2,R4
        TETRIS.c  1163            if(forceLockCounter < FORCE_LOCK_MOVES) {
    000012BE E20F                   MOV         #15,R2
    000012C0 D14C                   MOV.L       L1245+34,R1; _forceLockCounter
    000012C2 6312                   MOV.L       @R1,R3
    000012C4 3323                   CMP/GE      R2,R3
    000012C6 8908                   BT          L1091
        TETRIS.c  1164                lockDelayCounter = 0;
    000012C8 D34B                   MOV.L       L1245+38,R3; _lockDelayCounter
    000012CA 23A2                   MOV.L       R10,@R3
        TETRIS.c  1165                if(moveInputFrames == 1) {
    000012CC 6092                   MOV.L       @R9,R0
    000012CE 8801                   CMP/EQ      #1,R0
    000012D0 8B03                   BF          L1091
        TETRIS.c  1166                    ++forceLockCounter;
    000012D2 D048                   MOV.L       L1245+34,R0; _forceLockCounter
    000012D4 6102                   MOV.L       @R0,R1
    000012D6 7101                   ADD         #1,R1
    000012D8 2012                   MOV.L       R1,@R0
    000012DA              L1091:                            
        TETRIS.c  1167                }
        TETRIS.c  1168            }
        TETRIS.c  1169            rotatedBefore = 0;
    000012DA D348                   MOV.L       L1245+42,R3; _rotatedBefore
    000012DC 23A2                   MOV.L       R10,@R3
    000012DE              L1089:                            
        TETRIS.c  1170        }
        TETRIS.c  1171    
        TETRIS.c  1172        if(KeyDown(ROTATE_CW_KEY)) {
    000012DE D23F                   MOV.L       L1245+10,R2; _KeyDown
    000012E0 420B                   JSR         @R2
    000012E2 E440                   MOV         #64,R4
    000012E4 600C                   EXTU.B      R0,R0
    000012E6 2008                   TST         R0,R0
    000012E8 8924                   BT          L1093
        TETRIS.c  1173            if(!holdingRotateCW) {
    000012EA D345                   MOV.L       L1245+46,R3; _holdingRotateCW
    000012EC 6232                   MOV.L       @R3,R2
    000012EE 2228                   TST         R2,R2
    000012F0 8B22                   BF          L1099




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   67


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1174                int newState = (aState+1)%4;
    000012F2 60C2                   MOV.L       @R12,R0
    000012F4 7001                   ADD         #1,R0
    000012F6 4011                   CMP/PZ      R0
    000012F8 8B01                   BF          L1095
    000012FA A005                   BRA         L1096
    000012FC C903                   AND         #3,R0
    000012FE              L1095:                            
    000012FE 6007                   NOT         R0,R0
    00001300 7001                   ADD         #1,R0
    00001302 C903                   AND         #3,R0
    00001304 6007                   NOT         R0,R0
    00001306 7001                   ADD         #1,R0
    00001308              L1096:                            
        TETRIS.c  1175                holdingRotateCW = 1;
    00001308 D23D                   MOV.L       L1245+46,R2; _holdingRotateCW
    0000130A 6903                   MOV         R0,R9
    0000130C E101                   MOV         #1,R1
    0000130E 2212                   MOV.L       R1,@R2
        TETRIS.c  1176                if(attemptRotation(ax, ay, aPiece, aState, newState) == 3 &&
        TETRIS.c  1177                    (newState == 1 || newState == 3)) {  // TST kick or FIN kick
    00001310 2F96                   MOV.L       R9,@-R15
    00001312 67C2                   MOV.L       @R12,R7
    00001314 66B2                   MOV.L       @R11,R6
    00001316 65E2                   MOV.L       @R14,R5
    00001318 BD46                   BSR         _attemptRotation
    0000131A 64D2                   MOV.L       @R13,R4
    0000131C 8803                   CMP/EQ      #3,R0
    0000131E 8F0B                   BF/S        L1099
    00001320 7F04                   ADD         #4,R15
    00001322 6093                   MOV         R9,R0
    00001324 8801                   CMP/EQ      #1,R0
    00001326 8902                   BT          L1098
    00001328 6093                   MOV         R9,R0
    0000132A 8803                   CMP/EQ      #3,R0
    0000132C 8B04                   BF          L1099
    0000132E              L1098:                            
        TETRIS.c  1178    
        TETRIS.c  1179                    usedTSpinKick = 1;
    0000132E E201                   MOV         #1,R2
        TETRIS.c  1180                };
    00001330 A002                   BRA         L1099
    00001332 2F22                   MOV.L       R2,@R15
    00001334              L1093:                            
        TETRIS.c  1181            }
        TETRIS.c  1182        }
        TETRIS.c  1183        else {
        TETRIS.c  1184            holdingRotateCW = 0;
    00001334 D132                   MOV.L       L1245+46,R1; _holdingRotateCW
    00001336 21A2                   MOV.L       R10,@R1
    00001338              L1099:                            
        TETRIS.c  1185        }
        TETRIS.c  1186        if(KeyDown(ROTATE_ACW_KEY)) {
    00001338 D328                   MOV.L       L1245+10,R3; _KeyDown
    0000133A 430B                   JSR         @R3
    0000133C E44A                   MOV         #74,R4
    0000133E 600C                   EXTU.B      R0,R0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   68


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001340 2008                   TST         R0,R0
    00001342 8924                   BT          L1100
        TETRIS.c  1187            if(!holdingRotateACW) {
    00001344 D22F                   MOV.L       L1245+50,R2; _holdingRotateACW
    00001346 6322                   MOV.L       @R2,R3
    00001348 2338                   TST         R3,R3
    0000134A 8B22                   BF          L1106
        TETRIS.c  1188                int newState = (aState+3)%4;
    0000134C 60C2                   MOV.L       @R12,R0
    0000134E 7003                   ADD         #3,R0
    00001350 4011                   CMP/PZ      R0
    00001352 8B01                   BF          L1102
    00001354 A005                   BRA         L1103
    00001356 C903                   AND         #3,R0
    00001358              L1102:                            
    00001358 6007                   NOT         R0,R0
    0000135A 7001                   ADD         #1,R0
    0000135C C903                   AND         #3,R0
    0000135E 6007                   NOT         R0,R0
    00001360 7001                   ADD         #1,R0
    00001362              L1103:                            
    00001362 6903                   MOV         R0,R9
        TETRIS.c  1189                holdingRotateACW = 1;
    00001364 D327                   MOV.L       L1245+50,R3; _holdingRotateACW
    00001366 E101                   MOV         #1,R1
    00001368 2312                   MOV.L       R1,@R3
        TETRIS.c  1190                if(attemptRotation(ax, ay, aPiece, aState, newState) == 3 &&
        TETRIS.c  1191                    (newState == 1 || newState == 3)) {  // TST kick or FIN kick
    0000136A 2F96                   MOV.L       R9,@-R15
    0000136C 67C2                   MOV.L       @R12,R7
    0000136E 66B2                   MOV.L       @R11,R6
    00001370 65E2                   MOV.L       @R14,R5
    00001372 BD19                   BSR         _attemptRotation
    00001374 64D2                   MOV.L       @R13,R4
    00001376 8803                   CMP/EQ      #3,R0
    00001378 8F0B                   BF/S        L1106
    0000137A 7F04                   ADD         #4,R15
    0000137C 6093                   MOV         R9,R0
    0000137E 8801                   CMP/EQ      #1,R0
    00001380 8902                   BT          L1105
    00001382 6093                   MOV         R9,R0
    00001384 8803                   CMP/EQ      #3,R0
    00001386 8B04                   BF          L1106
    00001388              L1105:                            
        TETRIS.c  1192    
        TETRIS.c  1193                    usedTSpinKick = 1;
    00001388 E201                   MOV         #1,R2
        TETRIS.c  1194                };
    0000138A A002                   BRA         L1106
    0000138C 2F22                   MOV.L       R2,@R15
    0000138E              L1100:                            
        TETRIS.c  1195            }
        TETRIS.c  1196        }
        TETRIS.c  1197        else {
        TETRIS.c  1198            holdingRotateACW = 0;
    0000138E D11D                   MOV.L       L1245+50,R1; _holdingRotateACW
    00001390 21A2                   MOV.L       R10,@R1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   69


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001392              L1106:                            
        TETRIS.c  1199        }
        TETRIS.c  1200        if(KeyDown(ROTATE_180_KEY)) {
    00001392 D91D                   MOV.L       L1245+54,R9; _holdingRotate180
    00001394 D311                   MOV.L       L1245+10,R3; _KeyDown
    00001396 430B                   JSR         @R3
    00001398 E449                   MOV         #73,R4
    0000139A 600C                   EXTU.B      R0,R0
    0000139C 2008                   TST         R0,R0
    0000139E 8935                   BT          L1107
        TETRIS.c  1201            if(!holdingRotate180) {
    000013A0 6392                   MOV.L       @R9,R3
    000013A2 2338                   TST         R3,R3
    000013A4 8B33                   BF          L1111
        TETRIS.c  1202                int newState = (aState+2)%4;
    000013A6 60C2                   MOV.L       @R12,R0
    000013A8 7002                   ADD         #2,R0
    000013AA 4011                   CMP/PZ      R0
    000013AC 8B01                   BF          L1109
    000013AE A005                   BRA         L1110
    000013B0 C903                   AND         #3,R0
    000013B2              L1109:                            
    000013B2 6007                   NOT         R0,R0
    000013B4 7001                   ADD         #1,R0
    000013B6 C903                   AND         #3,R0
    000013B8 6007                   NOT         R0,R0
    000013BA 7001                   ADD         #1,R0
    000013BC              L1110:                            
    000013BC 6403                   MOV         R0,R4
        TETRIS.c  1203                holdingRotate180 = 1;
    000013BE E201                   MOV         #1,R2
    000013C0 2922                   MOV.L       R2,@R9
        TETRIS.c  1204                attemptRotation(ax, ay, aPiece, aState, newState);
    000013C2 2F46                   MOV.L       R4,@-R15
    000013C4 67C2                   MOV.L       @R12,R7
    000013C6 66B2                   MOV.L       @R11,R6
    000013C8 65E2                   MOV.L       @R14,R5
    000013CA BCED                   BSR         _attemptRotation
    000013CC 64D2                   MOV.L       @R13,R4
    000013CE A01E                   BRA         L1111
    000013D0 7F04                   ADD         #4,R15
    000013D2              L1245:                            
    000013D2 0000                   .DATA.W     0
    000013D4 <00000000>             .DATA.L     _holdingHold
    000013D8 <00000000>             .DATA.L     _moveInputFrames
    000013DC <00000000>             .DATA.L     _KeyDown
    000013E0 <00000000>             .DATA.L     _currentMoveDir
    000013E4 <00000000>             .DATA.L     _aState
    000013E8 <00000000>             .DATA.L     _aPiece
    000013EC <00000000>             .DATA.L     _ay
    000013F0 <00000000>             .DATA.L     _ax
    000013F4 <00000000>             .DATA.L     _forceLockCounter
    000013F8 <00000000>             .DATA.L     _lockDelayCounter
    000013FC <00000000>             .DATA.L     _rotatedBefore
    00001400 <00000000>             .DATA.L     _holdingRotateCW
    00001404 <00000000>             .DATA.L     _holdingRotateACW
    00001408 <00000000>             .DATA.L     _holdingRotate180




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   70


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000140C              L1107:                            
        TETRIS.c  1205            }
        TETRIS.c  1206        }
        TETRIS.c  1207        else {
        TETRIS.c  1208            holdingRotate180 = 0;
    0000140C 29A2                   MOV.L       R10,@R9
    0000140E              L1111:                            
        TETRIS.c  1209        }
        TETRIS.c  1210    
        TETRIS.c  1211        // Hard drop
        TETRIS.c  1212        if(KeyDown(HARD_DROP_KEY) && !holdingHardDrop) {
    0000140E D974                   MOV.L       L1246+2,R9 ; _score
    00001410 D374                   MOV.L       L1246+6,R3 ; _KeyDown
    00001412 430B                   JSR         @R3
    00001414 E43F                   MOV         #63,R4
    00001416 600C                   EXTU.B      R0,R0
    00001418 2008                   TST         R0,R0
    0000141A 892F                   BT          L1112
    0000141C D272                   MOV.L       L1246+10,R2; _holdingHardDrop
    0000141E 6322                   MOV.L       @R2,R3
    00001420 2338                   TST         R3,R3
    00001422 8B2B                   BF          L1112
        TETRIS.c  1213            gravityCounter = 1.0f;
    00001424 D371                   MOV.L       L1246+14,R3; H'3F800000
        TETRIS.c  1214            lockDelayCounter = LOCK_DELAY;
    00001426 E20A                   MOV         #10,R2
    00001428 D171                   MOV.L       L1246+18,R1; _lockDelayCounter
    0000142A 2832                   MOV.L       R3,@R8
    0000142C 2122                   MOV.L       R2,@R1
        TETRIS.c  1215            holdingHardDrop = 1;
    0000142E E301                   MOV         #1,R3
    00001430 D06D                   MOV.L       L1246+10,R0; _holdingHardDrop
        TETRIS.c  1216            while(pieceFits(ax,ay-1,aPiece,aState)) {
    00001432 A013                   BRA         L1113
    00001434 2032                   MOV.L       R3,@R0
    00001436              L1114:                            
        TETRIS.c  1217                movePiece(ax, ay, 0, -1, aPiece, aState);
    00001436 E7FF                   MOV         #-1,R7
    00001438 61C2                   MOV.L       @R12,R1
    0000143A E600                   MOV         #0,R6
    0000143C 2F16                   MOV.L       R1,@-R15
    0000143E 63B2                   MOV.L       @R11,R3
    00001440 2F36                   MOV.L       R3,@-R15
    00001442 65E2                   MOV.L       @R14,R5
    00001444 BBC7                   BSR         _movePiece
    00001446 64D2                   MOV.L       @R13,R4
        TETRIS.c  1218                --ay;
        TETRIS.c  1219                score += 2;
        TETRIS.c  1220                rotatedBefore = 0;
    00001448 D16A                   MOV.L       L1246+22,R1; _rotatedBefore
    0000144A 7F08                   ADD         #8,R15
    0000144C 63E2                   MOV.L       @R14,R3
    0000144E 73FF                   ADD         #-1,R3
    00001450 2E32                   MOV.L       R3,@R14
    00001452 E300                   MOV         #0,R3
    00001454 6292                   MOV.L       @R9,R2
    00001456 7202                   ADD         #2,R2




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   71


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001458 2922                   MOV.L       R2,@R9
    0000145A 2132                   MOV.L       R3,@R1
    0000145C              L1113:                            
    0000145C 67C2                   MOV.L       @R12,R7
    0000145E 66B2                   MOV.L       @R11,R6
    00001460 65E2                   MOV.L       @R14,R5
    00001462 75FF                   ADD         #-1,R5
    00001464 BC0F                   BSR         _pieceFits
    00001466 64D2                   MOV.L       @R13,R4
    00001468 2008                   TST         R0,R0
    0000146A 8BE4                   BF          L1114
        TETRIS.c  1221            }
        TETRIS.c  1222            if(gameMode != SPRINT_MODE) drawScore(score);
    0000146C D362                   MOV.L       L1246+26,R3; _gameMode
    0000146E 6032                   MOV.L       @R3,R0
    00001470 8802                   CMP/EQ      #2,R0
    00001472 890B                   BT          L1116
    00001474 B965                   BSR         _drawScore
    00001476 6492                   MOV.L       @R9,R4
    00001478 A008                   BRA         L1116
    0000147A 0009                   NOP
    0000147C              L1112:                            
        TETRIS.c  1223        }
        TETRIS.c  1224        else if(!KeyDown(HARD_DROP_KEY)){
    0000147C D259                   MOV.L       L1246+6,R2 ; _KeyDown
    0000147E 420B                   JSR         @R2
    00001480 E43F                   MOV         #63,R4
    00001482 600C                   EXTU.B      R0,R0
    00001484 2008                   TST         R0,R0
    00001486 8B01                   BF          L1116
        TETRIS.c  1225            holdingHardDrop = 0;
    00001488 D257                   MOV.L       L1246+10,R2; _holdingHardDrop
    0000148A 22A2                   MOV.L       R10,@R2
    0000148C              L1116:                            
        TETRIS.c  1226        }
        TETRIS.c  1227    
        TETRIS.c  1228        gravityCounter += ( 1.0f / ((float)FPS) /
        TETRIS.c  1229            powFI( (0.8f-((level-1)*0.007f)),(level-1) ) )
        TETRIS.c  1230            * (KeyDown(SOFT_DROP_KEY)?SDF:1.0f);
    0000148C D35B                   MOV.L       L1246+30,R3; _level
    0000148E 6532                   MOV.L       @R3,R5
    00001490 D25B                   MOV.L       L1246+34,R2; __itos
    00001492 75FF                   ADD         #-1,R5
    00001494 1F51                   MOV.L       R5,@(4,R15)
    00001496 420B                   JSR         @R2
    00001498 6053                   MOV         R5,R0
    0000149A D15A                   MOV.L       L1246+38,R1; H'3BE56042
    0000149C D25A                   MOV.L       L1246+42,R2; __muls
    0000149E 420B                   JSR         @R2
    000014A0 0009                   NOP
    000014A2 D15A                   MOV.L       L1246+46,R1; H'3F4CCCCD
    000014A4 D25A                   MOV.L       L1246+50,R2; __subs
    000014A6 420B                   JSR         @R2
    000014A8 0009                   NOP
    000014AA D15A                   MOV.L       L1246+54,R1; _powFI
    000014AC 410B                   JSR         @R1
    000014AE 6403                   MOV         R0,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   72


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000014B0 D159                   MOV.L       L1246+58,R1; H'3D4CCCCD
    000014B2 D35A                   MOV.L       L1246+62,R3; __divs
    000014B4 430B                   JSR         @R3
    000014B6 0009                   NOP
    000014B8 2F06                   MOV.L       R0,@-R15
    000014BA D34A                   MOV.L       L1246+6,R3 ; _KeyDown
    000014BC 430B                   JSR         @R3
    000014BE E425                   MOV         #37,R4
    000014C0 600C                   EXTU.B      R0,R0
    000014C2 2008                   TST         R0,R0
    000014C4 8D03                   BT/S        L1118
    000014C6 60F6                   MOV.L       @R15+,R0
    000014C8 D155                   MOV.L       L1246+66,R1; H'41200000
    000014CA A001                   BRA         L1119
    000014CC 0009                   NOP
    000014CE              L1118:                            
    000014CE D147                   MOV.L       L1246+14,R1; H'3F800000
    000014D0              L1119:                            
    000014D0 D24D                   MOV.L       L1246+42,R2; __muls
    000014D2 420B                   JSR         @R2
    000014D4 0009                   NOP
    000014D6 D353                   MOV.L       L1246+70,R3; __adds
    000014D8 430B                   JSR         @R3
    000014DA 6182                   MOV.L       @R8,R1
    000014DC 2802                   MOV.L       R0,@R8
        TETRIS.c  1231    
        TETRIS.c  1232        if(!pieceFits(ax,ay-1,aPiece,aState)) {
    000014DE 67C2                   MOV.L       @R12,R7
    000014E0 66B2                   MOV.L       @R11,R6
    000014E2 65E2                   MOV.L       @R14,R5
    000014E4 75FF                   ADD         #-1,R5
    000014E6 BBCE                   BSR         _pieceFits
    000014E8 64D2                   MOV.L       @R13,R4
    000014EA 2008                   TST         R0,R0
    000014EC 8901                   BT          L1247
    000014EE A1D2                   BRA         L1166
    000014F0 0009                   NOP
    000014F2              L1247:                            
        TETRIS.c  1233            if(lockDelayCounter < LOCK_DELAY) {
    000014F2 E20A                   MOV         #10,R2
    000014F4 D13E                   MOV.L       L1246+18,R1; _lockDelayCounter
    000014F6 6312                   MOV.L       @R1,R3
    000014F8 3323                   CMP/GE      R2,R3
    000014FA 8906                   BT          L1121
        TETRIS.c  1234                ++lockDelayCounter;
    000014FC D33C                   MOV.L       L1246+18,R3; _lockDelayCounter
    000014FE 6032                   MOV.L       @R3,R0
    00001500 7001                   ADD         #1,R0
    00001502 2302                   MOV.L       R0,@R3
        TETRIS.c  1235                gravityCounter = 1.0f;
    00001504 D339                   MOV.L       L1246+14,R3; H'3F800000
    00001506 A1D8                   BRA         L1165
    00001508 2832                   MOV.L       R3,@R8
    0000150A              L1121:                            
        TETRIS.c  1236            }
        TETRIS.c  1237            else {
        TETRIS.c  1238                // Lock piece




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   73


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1239                int i = 0;
        TETRIS.c  1240                int lines = 0;
        TETRIS.c  1241                int tSpin = 0;  // 0: no, 1: mini, 2: regular
    0000150A 1FA1                   MOV.L       R10,@(4,R15)
        TETRIS.c  1242                int isPerfectClear = 0;
        TETRIS.c  1243                usedHold = 0;
    0000150C D346                   MOV.L       L1246+74,R3; _usedHold
    0000150E 23A2                   MOV.L       R10,@R3
        TETRIS.c  1244                lockDelayCounter = 0;
    00001510 D137                   MOV.L       L1246+18,R1; _lockDelayCounter
    00001512 21A2                   MOV.L       R10,@R1
        TETRIS.c  1245                forceLockCounter = 0;
    00001514 D245                   MOV.L       L1246+78,R2; _forceLockCounter
    00001516 22A2                   MOV.L       R10,@R2
        TETRIS.c  1246    
        TETRIS.c  1247                // T-spin check
        TETRIS.c  1248                if(aPiece == T_PIECE && rotatedBefore) {
    00001518 60B2                   MOV.L       @R11,R0
    0000151A 8805                   CMP/EQ      #5,R0
    0000151C 8901                   BT          L1248
    0000151E A08A                   BRA         L1123
    00001520 0009                   NOP
    00001522              L1248:                            
    00001522 D334                   MOV.L       L1246+22,R3; _rotatedBefore
    00001524 6032                   MOV.L       @R3,R0
    00001526 2008                   TST         R0,R0
    00001528 8B01                   BF          L1249
    0000152A A084                   BRA         L1123
    0000152C 0009                   NOP
    0000152E              L1249:                            
        TETRIS.c  1249                    int NE = getCell(ax+1 +1, ay+1 +2);
    0000152E 65E2                   MOV.L       @R14,R5
    00001530 64D2                   MOV.L       @R13,R4
    00001532 7503                   ADD         #3,R5
    00001534 BB73                   BSR         _getCell
    00001536 7402                   ADD         #2,R4
    00001538 1F03                   MOV.L       R0,@(12,R15)
        TETRIS.c  1250                    int NW = getCell(ax-1 +1, ay+1 +2);  //  NW â  NE
    0000153A 65E2                   MOV.L       @R14,R5
    0000153C 7503                   ADD         #3,R5
    0000153E BB6E                   BSR         _getCell
    00001540 64D2                   MOV.L       @R13,R4
    00001542 1F04                   MOV.L       R0,@(16,R15)
        TETRIS.c  1251                    int SE = getCell(ax+1 +1, ay-1 +2);  //  â   â   â 
    00001544 65E2                   MOV.L       @R14,R5
    00001546 7501                   ADD         #1,R5
    00001548 64D2                   MOV.L       @R13,R4
    0000154A BB68                   BSR         _getCell
    0000154C 7402                   ADD         #2,R4
    0000154E 1F02                   MOV.L       R0,@(8,R15)
        TETRIS.c  1252                    int SW = getCell(ax-1 +1, ay-1 +2);  //  SW â  SE
    00001550 65E2                   MOV.L       @R14,R5
    00001552 7501                   ADD         #1,R5
    00001554 BB63                   BSR         _getCell
    00001556 64D2                   MOV.L       @R13,R4
        TETRIS.c  1253                    if(NE+NW+SE+SW >= 3) {
    00001558 53F4                   MOV.L       @(16,R15),R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   74


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000155A 6403                   MOV         R0,R4
    0000155C 52F3                   MOV.L       @(12,R15),R2
    0000155E E003                   MOV         #3,R0
    00001560 51F2                   MOV.L       @(8,R15),R1
    00001562 323C                   ADD         R3,R2
    00001564 321C                   ADD         R1,R2
    00001566 324C                   ADD         R4,R2
    00001568 3203                   CMP/GE      R0,R2
    0000156A 8B64                   BF          L1123
        TETRIS.c  1254                        if(usedTSpinKick) {
    0000156C 62F2                   MOV.L       @R15,R2
    0000156E 2228                   TST         R2,R2
    00001570 8902                   BT          L1125
        TETRIS.c  1255                            tSpin = 2;
    00001572 E302                   MOV         #2,R3
    00001574 A05F                   BRA         L1123
    00001576 1F31                   MOV.L       R3,@(4,R15)
    00001578              L1125:                            
        TETRIS.c  1256                        }
        TETRIS.c  1257                        else {
        TETRIS.c  1258                            switch(aState) {
    00001578 60C2                   MOV.L       @R12,R0
    0000157A 8800                   CMP/EQ      #0,R0
    0000157C 8907                   BT          L885
    0000157E 8801                   CMP/EQ      #1,R0
    00001580 890F                   BT          L886
    00001582 8802                   CMP/EQ      #2,R0
    00001584 8919                   BT          L887
    00001586 8803                   CMP/EQ      #3,R0
    00001588 8922                   BT          L888
    0000158A A054                   BRA         L1123
    0000158C 0009                   NOP
    0000158E              L885:                            ; case label 
        TETRIS.c  1259                                case 0:
        TETRIS.c  1260                                    tSpin = (NW&&NE)+1;
    0000158E 53F4                   MOV.L       @(16,R15),R3
    00001590 2338                   TST         R3,R3
    00001592 8904                   BT          L1128
    00001594 53F3                   MOV.L       @(12,R15),R3
    00001596 2338                   TST         R3,R3
    00001598 8901                   BT          L1128
    0000159A A04A                   BRA         L1228
    0000159C E301                   MOV         #1,R3
    0000159E              L1128:                            
        TETRIS.c  1261                                    break;
    0000159E A048                   BRA         L1228
    000015A0 E300                   MOV         #0,R3
    000015A2              L886:                            ; case label 
        TETRIS.c  1262                                case 1:
        TETRIS.c  1263                                    tSpin = (NE&&SE)+1;
    000015A2 51F3                   MOV.L       @(12,R15),R1
    000015A4 2118                   TST         R1,R1
    000015A6 8904                   BT          L1130
    000015A8 52F2                   MOV.L       @(8,R15),R2
    000015AA 2228                   TST         R2,R2
    000015AC 8901                   BT          L1130
    000015AE A001                   BRA         L1131




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   75


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000015B0 E201                   MOV         #1,R2
    000015B2              L1130:                            
    000015B2 E200                   MOV         #0,R2
    000015B4              L1131:                            
    000015B4 7201                   ADD         #1,R2
        TETRIS.c  1264                                    break;
    000015B6 A03E                   BRA         L1123
    000015B8 1F21                   MOV.L       R2,@(4,R15)
    000015BA              L887:                            ; case label 
        TETRIS.c  1265                                case 2:
        TETRIS.c  1266                                    tSpin = (SE&&SW)+1;
    000015BA 51F2                   MOV.L       @(8,R15),R1
    000015BC 2118                   TST         R1,R1
    000015BE 8903                   BT          L1132
    000015C0 2448                   TST         R4,R4
    000015C2 8901                   BT          L1132
    000015C4 A001                   BRA         L1133
    000015C6 E101                   MOV         #1,R1
    000015C8              L1132:                            
    000015C8 E100                   MOV         #0,R1
    000015CA              L1133:                            
    000015CA 7101                   ADD         #1,R1
        TETRIS.c  1267                                    break;
    000015CC A033                   BRA         L1123
    000015CE 1F11                   MOV.L       R1,@(4,R15)
    000015D0              L888:                            ; case label 
        TETRIS.c  1268                                case 3:
        TETRIS.c  1269                                    tSpin = (SW&&NW)+1;
    000015D0 2448                   TST         R4,R4
    000015D2 892D                   BT          L1134
    000015D4 53F4                   MOV.L       @(16,R15),R3
    000015D6 2338                   TST         R3,R3
    000015D8 892A                   BT          L1134
    000015DA A02A                   BRA         L1228
    000015DC E301                   MOV         #1,R3
    000015DE              L1246:                            
    000015DE 0000                   .DATA.W     0
    000015E0 <00000000>             .DATA.L     _score
    000015E4 <00000000>             .DATA.L     _KeyDown
    000015E8 <00000000>             .DATA.L     _holdingHardDrop
    000015EC 3F800000               .DATA.L     H'3F800000
    000015F0 <00000000>             .DATA.L     _lockDelayCounter
    000015F4 <00000000>             .DATA.L     _rotatedBefore
    000015F8 <00000000>             .DATA.L     _gameMode
    000015FC <00000000>             .DATA.L     _level
    00001600 <00000000>             .DATA.L     __itos
    00001604 3BE56042               .DATA.L     H'3BE56042
    00001608 <00000000>             .DATA.L     __muls
    0000160C 3F4CCCCD               .DATA.L     H'3F4CCCCD
    00001610 <00000000>             .DATA.L     __subs
    00001614 <00000000>             .DATA.L     _powFI
    00001618 3D4CCCCD               .DATA.L     H'3D4CCCCD
    0000161C <00000000>             .DATA.L     __divs
    00001620 41200000               .DATA.L     H'41200000
    00001624 <00000000>             .DATA.L     __adds
    00001628 <00000000>             .DATA.L     _usedHold
    0000162C <00000000>             .DATA.L     _forceLockCounter




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   76


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001630              L1134:                            
    00001630 E300                   MOV         #0,R3
    00001632              L1228:                            
    00001632 7301                   ADD         #1,R3
    00001634 1F31                   MOV.L       R3,@(4,R15)
    00001636              L1123:                            
        TETRIS.c  1270                                    break;
        TETRIS.c  1271                            }
        TETRIS.c  1272                        }
        TETRIS.c  1273                    }
        TETRIS.c  1274                }
        TETRIS.c  1275    
        TETRIS.c  1276                // Spawn new piece
        TETRIS.c  1277                lockPiece(ax, ay, aPiece, aState);
    00001636 67C2                   MOV.L       @R12,R7
    00001638 66B2                   MOV.L       @R11,R6
    0000163A 65E2                   MOV.L       @R14,R5
    0000163C BB7F                   BSR         _lockPiece
    0000163E 64D2                   MOV.L       @R13,R4
    00001640 D55A                   MOV.L       L1250+4,R5 ; H'00000010+_nextQueue
        TETRIS.c  1278                ax = SPAWN_X;
    00001642 E203                   MOV         #3,R2
    00001644 2D22                   MOV.L       R2,@R13
        TETRIS.c  1279                ay = SPAWN_Y;
    00001646 E312                   MOV         #18,R3
        TETRIS.c  1280                aPiece = nextQueue[0];
    00001648 D257                   MOV.L       L1250,R2   ; _nextQueue
    0000164A 2E32                   MOV.L       R3,@R14
    0000164C 6322                   MOV.L       @R2,R3
    0000164E 2B32                   MOV.L       R3,@R11
        TETRIS.c  1281                // Shift queue
        TETRIS.c  1282                for(i = 0; i<NEXT_QUEUE_SIZE-1; ++i) {
    00001650 A003                   BRA         L1136
    00001652 6423                   MOV         R2,R4
    00001654              L1137:                            
        TETRIS.c  1283                    nextQueue[i] = nextQueue[i+1];
    00001654 5341                   MOV.L       @(4,R4),R3
    00001656 2432                   MOV.L       R3,@R4
    00001658 7404                   ADD         #4,R4
    0000165A              L1136:                            
    0000165A 3452                   CMP/HS      R5,R4
    0000165C 8BFA                   BF          L1137
        TETRIS.c  1284                }
        TETRIS.c  1285                nextQueue[NEXT_QUEUE_SIZE-1] = getPiece();
    0000165E D353                   MOV.L       L1250+4,R3 ; H'00000010+_nextQueue
    00001660 D253                   MOV.L       L1250+8,R2 ; _getPiece
    00001662 420B                   JSR         @R2
    00001664 2F36                   MOV.L       R3,@-R15
    00001666 61F6                   MOV.L       @R15+,R1
        TETRIS.c  1286                drawNextQueue(nextQueue);
    00001668 D44F                   MOV.L       L1250,R4   ; _nextQueue
    0000166A B80B                   BSR         _drawNextQueue
    0000166C 2102                   MOV.L       R0,@R1
        TETRIS.c  1287    
        TETRIS.c  1288                aState = 0;
        TETRIS.c  1289                lines = updateBoard();
    0000166E BC7B                   BSR         _updateBoard




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   77


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001670 2CA2                   MOV.L       R10,@R12
        TETRIS.c  1290                isPerfectClear = lines && checkPerfectClear();
    00001672 2008                   TST         R0,R0
    00001674 8D06                   BT/S        L1138
    00001676 2F02                   MOV.L       R0,@R15
    00001678 BB46                   BSR         _checkPerfectClear
    0000167A 0009                   NOP
    0000167C 2008                   TST         R0,R0
    0000167E 8901                   BT          L1138
    00001680 A001                   BRA         L1139
    00001682 E201                   MOV         #1,R2
    00001684              L1138:                            
    00001684 E200                   MOV         #0,R2
    00001686              L1139:                            
    00001686 1F22                   MOV.L       R2,@(8,R15)
        TETRIS.c  1291                if(lines || tSpin) {
    00001688 63F2                   MOV.L       @R15,R3
    0000168A 2338                   TST         R3,R3
    0000168C 8B02                   BF          L1141
    0000168E 53F1                   MOV.L       @(4,R15),R3
    00001690 2338                   TST         R3,R3
    00001692 8950                   BT          L1140
    00001694              L1141:                            
        TETRIS.c  1292                    if(!tSpin && lines < 4 && lines > 0) {
    00001694 53F1                   MOV.L       @(4,R15),R3
    00001696 2338                   TST         R3,R3
    00001698 8B08                   BF          L1142
    0000169A E304                   MOV         #4,R3
    0000169C 61F2                   MOV.L       @R15,R1
    0000169E 3133                   CMP/GE      R3,R1
    000016A0 8904                   BT          L1142
    000016A2 62F2                   MOV.L       @R15,R2
    000016A4 4215                   CMP/PL      R2
    000016A6 8B01                   BF          L1142
        TETRIS.c  1293                        isB2B = 0;
    000016A8 D342                   MOV.L       L1250+12,R3; _isB2B
    000016AA 23A2                   MOV.L       R10,@R3
    000016AC              L1142:                            
        TETRIS.c  1294                    }
        TETRIS.c  1295                    drawLineClearText(lines, tSpin, 
        TETRIS.c  1296                        lines?isB2B:0, lines?combo:0, lines?isPerfectClear:0);
    000016AC 62F2                   MOV.L       @R15,R2
    000016AE 2228                   TST         R2,R2
    000016B0 8903                   BT          L1143
    000016B2 52F2                   MOV.L       @(8,R15),R2
    000016B4 2F26                   MOV.L       R2,@-R15
    000016B6 A002                   BRA         L1146
    000016B8 0009                   NOP
    000016BA              L1143:                            
    000016BA E300                   MOV         #0,R3
    000016BC 2F36                   MOV.L       R3,@-R15
    000016BE              L1146:                            
    000016BE 51F1                   MOV.L       @(4,R15),R1
    000016C0 2118                   TST         R1,R1
    000016C2 8902                   BT          L1144
    000016C4 D23C                   MOV.L       L1250+16,R2; _combo
    000016C6 A001                   BRA         L1147




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   78


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000016C8 6722                   MOV.L       @R2,R7
    000016CA              L1144:                            
    000016CA E700                   MOV         #0,R7
    000016CC              L1147:                            
    000016CC 52F1                   MOV.L       @(4,R15),R2
    000016CE 2228                   TST         R2,R2
    000016D0 8902                   BT          L1145
    000016D2 D338                   MOV.L       L1250+12,R3; _isB2B
    000016D4 A001                   BRA         L1148
    000016D6 6632                   MOV.L       @R3,R6
    000016D8              L1145:                            
    000016D8 E600                   MOV         #0,R6
    000016DA              L1148:                            
    000016DA 55F2                   MOV.L       @(8,R15),R5
    000016DC B936                   BSR         _drawLineClearText
    000016DE 54F1                   MOV.L       @(4,R15),R4
    000016E0 7F04                   ADD         #4,R15
        TETRIS.c  1297                    score += getScore(level, lines, tSpin, 
        TETRIS.c  1298                        lines?isB2B:0, lines?combo:0, lines?isPerfectClear:0);
    000016E2 62F2                   MOV.L       @R15,R2
    000016E4 2228                   TST         R2,R2
    000016E6 8903                   BT          L1149
    000016E8 53F2                   MOV.L       @(8,R15),R3
    000016EA 2F36                   MOV.L       R3,@-R15
    000016EC A002                   BRA         L1152
    000016EE 0009                   NOP
    000016F0              L1149:                            
    000016F0 E200                   MOV         #0,R2
    000016F2 2F26                   MOV.L       R2,@-R15
    000016F4              L1152:                            
    000016F4 51F1                   MOV.L       @(4,R15),R1
    000016F6 2118                   TST         R1,R1
    000016F8 8904                   BT          L1150
    000016FA D12F                   MOV.L       L1250+16,R1; _combo
    000016FC 6312                   MOV.L       @R1,R3
    000016FE 2F36                   MOV.L       R3,@-R15
    00001700 A002                   BRA         L1153
    00001702 0009                   NOP
    00001704              L1150:                            
    00001704 E200                   MOV         #0,R2
    00001706 2F26                   MOV.L       R2,@-R15
    00001708              L1153:                            
    00001708 51F2                   MOV.L       @(8,R15),R1
    0000170A 2118                   TST         R1,R1
    0000170C 8902                   BT          L1151
    0000170E D329                   MOV.L       L1250+12,R3; _isB2B
    00001710 A001                   BRA         L1154
    00001712 6732                   MOV.L       @R3,R7
    00001714              L1151:                            
    00001714 E700                   MOV         #0,R7
    00001716              L1154:                            
    00001716 56F3                   MOV.L       @(12,R15),R6
    00001718 55F2                   MOV.L       @(8,R15),R5
    0000171A D328                   MOV.L       L1250+20,R3; _level
    0000171C D228                   MOV.L       L1250+24,R2; _getScore
    0000171E 420B                   JSR         @R2
    00001720 6432                   MOV.L       @R3,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   79


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001722 6192                   MOV.L       @R9,R1
        TETRIS.c  1299                    if(gameMode != SPRINT_MODE) drawScore(score);
    00001724 D327                   MOV.L       L1250+28,R3; _gameMode
    00001726 310C                   ADD         R0,R1
    00001728 2912                   MOV.L       R1,@R9
    0000172A 6032                   MOV.L       @R3,R0
    0000172C 8802                   CMP/EQ      #2,R0
    0000172E 8D02                   BT/S        L1140
    00001730 7F08                   ADD         #8,R15
    00001732 B806                   BSR         _drawScore
    00001734 6492                   MOV.L       @R9,R4
    00001736              L1140:                            
        TETRIS.c  1300                }
        TETRIS.c  1301                if(lines) {
    00001736 D420                   MOV.L       L1250+16,R4; _combo
    00001738 63F2                   MOV.L       @R15,R3
    0000173A 2338                   TST         R3,R3
    0000173C 8946                   BT          L1156
        TETRIS.c  1302                    // B2B check
        TETRIS.c  1303                    if(tSpin || lines == 4) {
    0000173E 53F1                   MOV.L       @(4,R15),R3
    00001740 2338                   TST         R3,R3
    00001742 8B02                   BF          L1158
    00001744 60F2                   MOV.L       @R15,R0
    00001746 8804                   CMP/EQ      #4,R0
    00001748 8B03                   BF          L1157
    0000174A              L1158:                            
        TETRIS.c  1304                        isB2B = 1;
    0000174A E201                   MOV         #1,R2
    0000174C D319                   MOV.L       L1250+12,R3; _isB2B
    0000174E A002                   BRA         L1159
    00001750 2322                   MOV.L       R2,@R3
    00001752              L1157:                            
        TETRIS.c  1305                    }
        TETRIS.c  1306                    else {
        TETRIS.c  1307                        isB2B = 0;
    00001752 D018                   MOV.L       L1250+12,R0; _isB2B
    00001754 20A2                   MOV.L       R10,@R0
    00001756              L1159:                            
        TETRIS.c  1308                    }
        TETRIS.c  1309                    ++combo;
    00001756 6342                   MOV.L       @R4,R3
        TETRIS.c  1310                    linesTotal += lines;
    00001758 DA1B                   MOV.L       L1250+32,R10; _linesTotal
    0000175A 7301                   ADD         #1,R3
        TETRIS.c  1311                    if(gameMode == SPRINT_MODE) drawLinesTotal(linesTotal, 40);
    0000175C D119                   MOV.L       L1250+28,R1; _gameMode
    0000175E 2432                   MOV.L       R3,@R4
    00001760 63F2                   MOV.L       @R15,R3
    00001762 62A2                   MOV.L       @R10,R2
    00001764 323C                   ADD         R3,R2
    00001766 2A22                   MOV.L       R2,@R10
    00001768 6012                   MOV.L       @R1,R0
    0000176A 8802                   CMP/EQ      #2,R0
    0000176C 8B02                   BF          L1160
    0000176E E528                   MOV         #40,R5
    00001770 B822                   BSR         _drawLinesTotal




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   80


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001772 64A2                   MOV.L       @R10,R4
    00001774              L1160:                            
        TETRIS.c  1312                    // Level up
        TETRIS.c  1313                    if(gameMode==ENDLESS_MODE && level*LINES_PER_LEVEL<=linesTotal
        TETRIS.c  1314                        && level<MAX_LEVEL) {
    00001774 D313                   MOV.L       L1250+28,R3; _gameMode
    00001776 6032                   MOV.L       @R3,R0
    00001778 8801                   CMP/EQ      #1,R0
    0000177A 8B28                   BF          L1162
    0000177C D00F                   MOV.L       L1250+20,R0; _level
    0000177E 6102                   MOV.L       @R0,R1
    00001780 D311                   MOV.L       L1250+32,R3; _linesTotal
    00001782 6213                   MOV         R1,R2
    00001784 4108                   SHLL2       R1
    00001786 312C                   ADD         R2,R1
    00001788 6232                   MOV.L       @R3,R2
    0000178A 4100                   SHLL        R1
    0000178C 3127                   CMP/GT      R2,R1
    0000178E 891E                   BT          L1162
    00001790 6102                   MOV.L       @R0,R1
    00001792 E20F                   MOV         #15,R2
    00001794 3123                   CMP/GE      R2,R1
    00001796 891A                   BT          L1162
        TETRIS.c  1315                        ++level;
    00001798 D308                   MOV.L       L1250+20,R3; _level
    0000179A 6032                   MOV.L       @R3,R0
    0000179C 7001                   ADD         #1,R0
    0000179E 2302                   MOV.L       R0,@R3
        TETRIS.c  1316                        drawLevel(level);
    000017A0 B891                   BSR         _drawLevel
    000017A2 6403                   MOV         R0,R4
    000017A4 A013                   BRA         L1162
    000017A6 0009                   NOP
    000017A8              L1250:                            
    000017A8 <00000000>             .DATA.L     _nextQueue
    000017AC <00000010>             .DATA.L     H'00000010+_nextQueue
    000017B0 <00000000>             .DATA.L     _getPiece
    000017B4 <00000000>             .DATA.L     _isB2B
    000017B8 <00000000>             .DATA.L     _combo
    000017BC <00000000>             .DATA.L     _level
    000017C0 <00000000>             .DATA.L     _getScore
    000017C4 <00000000>             .DATA.L     _gameMode
    000017C8 <00000000>             .DATA.L     _linesTotal
    000017CC              L1156:                            
        TETRIS.c  1317                    }
        TETRIS.c  1318                }
        TETRIS.c  1319                else {
        TETRIS.c  1320                    combo = 0;
    000017CC 24A2                   MOV.L       R10,@R4
    000017CE              L1162:                            
        TETRIS.c  1321                }
        TETRIS.c  1322                drawPiece(ax, ay, aPiece, aState);
    000017CE 67C2                   MOV.L       @R12,R7
    000017D0 66B2                   MOV.L       @R11,R6
    000017D2 65E2                   MOV.L       @R14,R5
    000017D4 D376                   MOV.L       L1251+2,R3 ; _drawPiece
    000017D6 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   81


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000017D8 64D2                   MOV.L       @R13,R4
        TETRIS.c  1323                drawGhost(ax, ay, aPiece, aState);
    000017DA 67C2                   MOV.L       @R12,R7
    000017DC 66B2                   MOV.L       @R11,R6
    000017DE 65E2                   MOV.L       @R14,R5
    000017E0 B976                   BSR         _drawGhost
    000017E2 64D2                   MOV.L       @R13,R4
        TETRIS.c  1324                if(!pieceFits(ax,ay,aPiece,aState)) {
    000017E4 67C2                   MOV.L       @R12,R7
    000017E6 66B2                   MOV.L       @R11,R6
    000017E8 65E2                   MOV.L       @R14,R5
    000017EA BA4C                   BSR         _pieceFits
    000017EC 64D2                   MOV.L       @R13,R4
    000017EE 2008                   TST         R0,R0
    000017F0 8B26                   BF          L1163
        TETRIS.c  1325                    char str[20];
        TETRIS.c  1326                    // Top out
        TETRIS.c  1327                    PopUpWin(3);
    000017F2 D370                   MOV.L       L1251+6,R3 ; _PopUpWin
    000017F4 430B                   JSR         @R3
    000017F6 E403                   MOV         #3,R4
        TETRIS.c  1328                    locate(8,3);
    000017F8 D26F                   MOV.L       L1251+10,R2; _locate
    000017FA E503                   MOV         #3,R5
    000017FC 420B                   JSR         @R2
    000017FE E408                   MOV         #8,R4
        TETRIS.c  1329                    Print("TOP OUT");
    00001800 D46E                   MOV.L       L1251+14,R4; L738
    00001802 D36F                   MOV.L       L1251+18,R3; _Print
    00001804 430B                   JSR         @R3
    00001806 0009                   NOP
        TETRIS.c  1330                    locate(6,4);
    00001808 D26B                   MOV.L       L1251+10,R2; _locate
    0000180A E504                   MOV         #4,R5
    0000180C 420B                   JSR         @R2
    0000180E E406                   MOV         #6,R4
        TETRIS.c  1331                    if(gameMode==ENDLESS_MODE){
    00001810 D36C                   MOV.L       L1251+22,R3; _gameMode
    00001812 6032                   MOV.L       @R3,R0
    00001814 8801                   CMP/EQ      #1,R0
    00001816 8901                   BT          L1252
    00001818 A12F                   BRA         L815
    0000181A 0009                   NOP
    0000181C              L1252:                            
        TETRIS.c  1332                        Print("Score: ");
    0000181C D46A                   MOV.L       L1251+26,R4; L740
    0000181E D168                   MOV.L       L1251+18,R1; _Print
    00001820 410B                   JSR         @R1
    00001822 0009                   NOP
        TETRIS.c  1333                        itoa(str, score);
    00001824 6592                   MOV.L       @R9,R5
    00001826 64F3                   MOV         R15,R4
    00001828 D368                   MOV.L       L1251+30,R3; _itoa
    0000182A 430B                   JSR         @R3
    0000182C 7420                   ADD         #32,R4
        TETRIS.c  1334                        PrintMini(70, 25, str, 0);
    0000182E E700                   MOV         #0,R7




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   82


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001830 D267                   MOV.L       L1251+34,R2; _PrintMini
    00001832 66F3                   MOV         R15,R6
    00001834 7620                   ADD         #32,R6
    00001836 E519                   MOV         #25,R5
    00001838 420B                   JSR         @R2
    0000183A E446                   MOV         #70,R4
    0000183C A11D                   BRA         L815
    0000183E 0009                   NOP
    00001840              L1163:                            
        TETRIS.c  1335                    }
        TETRIS.c  1336                    locate(7,5);
        TETRIS.c  1337                    Print("Press EXE");
        TETRIS.c  1338                    endGame();
        TETRIS.c  1339                    return 1;
        TETRIS.c  1340                }
        TETRIS.c  1341                gravityCounter = 0;
    00001840 E200                   MOV         #0,R2
    00001842 A03A                   BRA         L1165
    00001844 2822                   MOV.L       R2,@R8
    00001846              L1167:                            
        TETRIS.c  1342            }
        TETRIS.c  1343        }
        TETRIS.c  1344        else {  // Can go down
        TETRIS.c  1345            // Apply gravity
        TETRIS.c  1346            while(gravityCounter >= 1.0f && pieceFits(ax,ay-1,aPiece,aState)) {
        TETRIS.c  1347                movePiece(ax, ay, 0, -1, aPiece, aState);
    00001846 E7FF                   MOV         #-1,R7
    00001848 63C2                   MOV.L       @R12,R3
    0000184A E600                   MOV         #0,R6
    0000184C 2F36                   MOV.L       R3,@-R15
    0000184E 62B2                   MOV.L       @R11,R2
    00001850 2F26                   MOV.L       R2,@-R15
    00001852 65E2                   MOV.L       @R14,R5
    00001854 B9BF                   BSR         _movePiece
    00001856 64D2                   MOV.L       @R13,R4
        TETRIS.c  1348                --ay;
        TETRIS.c  1349                gravityCounter -= 1.0f;
    00001858 D05E                   MOV.L       L1251+38,R0; H'3F800000
    0000185A 7F08                   ADD         #8,R15
    0000185C D35E                   MOV.L       L1251+42,R3; __subs
    0000185E 62E2                   MOV.L       @R14,R2
    00001860 72FF                   ADD         #-1,R2
    00001862 2E22                   MOV.L       R2,@R14
    00001864 430B                   JSR         @R3
    00001866 6182                   MOV.L       @R8,R1
    00001868 2802                   MOV.L       R0,@R8
        TETRIS.c  1350                lockDelayCounter = 0;
    0000186A E200                   MOV         #0,R2
    0000186C D15B                   MOV.L       L1251+46,R1; _lockDelayCounter
        TETRIS.c  1351                rotatedBefore = 0;
    0000186E 6323                   MOV         R2,R3
    00001870 D05B                   MOV.L       L1251+50,R0; _rotatedBefore
    00001872 2122                   MOV.L       R2,@R1
    00001874 2022                   MOV.L       R2,@R0
        TETRIS.c  1352                if(KeyDown(SOFT_DROP_KEY)) {
    00001876 D35B                   MOV.L       L1251+54,R3; _KeyDown
    00001878 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   83


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000187A E425                   MOV         #37,R4
    0000187C 600C                   EXTU.B      R0,R0
    0000187E 2008                   TST         R0,R0
    00001880 8909                   BT          L1166
        TETRIS.c  1353                    score += 1;
    00001882 6392                   MOV.L       @R9,R3
        TETRIS.c  1354                    if(gameMode != SPRINT_MODE) drawScore(score);
    00001884 D24F                   MOV.L       L1251+22,R2; _gameMode
    00001886 7301                   ADD         #1,R3
    00001888 2932                   MOV.L       R3,@R9
    0000188A 6022                   MOV.L       @R2,R0
    0000188C 8802                   CMP/EQ      #2,R0
    0000188E 8902                   BT          L1166
    00001890 D155                   MOV.L       L1251+58,R1; _drawScore
    00001892 410B                   JSR         @R1
    00001894 6492                   MOV.L       @R9,R4
    00001896              L1166:                            
    00001896 D04F                   MOV.L       L1251+38,R0; H'3F800000
    00001898 D354                   MOV.L       L1251+62,R3; __ges
    0000189A 430B                   JSR         @R3
    0000189C 6182                   MOV.L       @R8,R1
    0000189E 8800                   CMP/EQ      #0,R0
    000018A0 890B                   BT          L1165
    000018A2 D253                   MOV.L       L1251+66,R2; _aState
    000018A4 D353                   MOV.L       L1251+70,R3; _aPiece
    000018A6 6722                   MOV.L       @R2,R7
    000018A8 6632                   MOV.L       @R3,R6
    000018AA D153                   MOV.L       L1251+74,R1; _ay
    000018AC D353                   MOV.L       L1251+78,R3; _ax
    000018AE 6512                   MOV.L       @R1,R5
    000018B0 75FF                   ADD         #-1,R5
    000018B2 B9E8                   BSR         _pieceFits
    000018B4 6432                   MOV.L       @R3,R4
    000018B6 2008                   TST         R0,R0
    000018B8 8BC5                   BF          L1167
    000018BA              L1165:                            
        TETRIS.c  1355                }
        TETRIS.c  1356            }
        TETRIS.c  1357        }
        TETRIS.c  1358        drawLockDelay(lockDelayCounter);
    000018BA D248                   MOV.L       L1251+46,R2; _lockDelayCounter
    000018BC D350                   MOV.L       L1251+82,R3; _drawLockDelay
    000018BE 430B                   JSR         @R3
    000018C0 6422                   MOV.L       @R2,R4
        TETRIS.c  1359        ++framesPassed;
    000018C2 DE50                   MOV.L       L1251+86,R14; _framesPassed
        TETRIS.c  1360        if(gameMode != ENDLESS_MODE)drawTime(framesPassed);
    000018C4 D33F                   MOV.L       L1251+22,R3; _gameMode
    000018C6 62E2                   MOV.L       @R14,R2
    000018C8 7201                   ADD         #1,R2
    000018CA 2E22                   MOV.L       R2,@R14
    000018CC 6032                   MOV.L       @R3,R0
    000018CE 8801                   CMP/EQ      #1,R0
    000018D0 8902                   BT          L1171
    000018D2 D14D                   MOV.L       L1251+90,R1; _drawTime
    000018D4 410B                   JSR         @R1
    000018D6 64E2                   MOV.L       @R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   84


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    000018D8              L1171:                            
    000018D8 D33A                   MOV.L       L1251+22,R3; _gameMode
    000018DA 6432                   MOV.L       @R3,R4
    000018DC 6043                   MOV         R4,R0
    000018DE 8802                   CMP/EQ      #2,R0
    000018E0 8D02                   BT/S        L1253
    000018E2 65E2                   MOV.L       @R14,R5
    000018E4 A0A4                   BRA         L1172
    000018E6 0009                   NOP
    000018E8              L1253:                            
    000018E8 D048                   MOV.L       L1251+94,R0; _linesTotal
    000018EA E128                   MOV         #40,R1
    000018EC 6202                   MOV.L       @R0,R2
    000018EE 3213                   CMP/GE      R1,R2
    000018F0 8901                   BT          L1254
    000018F2 A09D                   BRA         L1172
    000018F4 0009                   NOP
    000018F6              L1254:                            
        TETRIS.c  1361        // Check if objective reached
        TETRIS.c  1362        if(gameMode == SPRINT_MODE && linesTotal >= 40) {
        TETRIS.c  1363            char strA[20];
        TETRIS.c  1364            char strB[10];
        TETRIS.c  1365            int minutes = (framesPassed / FPS) / 60;
    000018F6 E73C                   MOV         #60,R7
    000018F8 D245                   MOV.L       L1251+98,R2; __divls
    000018FA 6153                   MOV         R5,R1
    000018FC 420B                   JSR         @R2
    000018FE E014                   MOV         #20,R0
    00001900 D343                   MOV.L       L1251+98,R3; __divls
    00001902 6603                   MOV         R0,R6
    00001904 6103                   MOV         R0,R1
    00001906 430B                   JSR         @R3
    00001908 6073                   MOV         R7,R0
    0000190A 6403                   MOV         R0,R4
        TETRIS.c  1366            int seconds = (framesPassed / FPS) % 60;
    0000190C D241                   MOV.L       L1251+102,R2; __modls
    0000190E 6163                   MOV         R6,R1
    00001910 420B                   JSR         @R2
    00001912 6073                   MOV         R7,R0
        TETRIS.c  1367            int deciSeconds = (framesPassed/2) % 10;
    00001914 D23F                   MOV.L       L1251+102,R2; __modls
    00001916 6D03                   MOV         R0,R13
    00001918 E300                   MOV         #0,R3
    0000191A 3357                   CMP/GT      R5,R3
    0000191C 353E                   ADDC        R3,R5
    0000191E 4521                   SHAR        R5
    00001920 6153                   MOV         R5,R1
    00001922 420B                   JSR         @R2
    00001924 E00A                   MOV         #10,R0
        TETRIS.c  1368            itoa(strA, minutes);
    00001926 6EF3                   MOV         R15,R14
    00001928 D328                   MOV.L       L1251+30,R3; _itoa
    0000192A 6543                   MOV         R4,R5
    0000192C 2F02                   MOV.L       R0,@R15
    0000192E 7E20                   ADD         #32,R14
    00001930 430B                   JSR         @R3
    00001932 64E3                   MOV         R14,R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   85


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1369            strcat(strA, ":");
    00001934 D538                   MOV.L       L1251+106,R5; L510
    00001936 D239                   MOV.L       L1251+110,R2; _strcat
    00001938 420B                   JSR         @R2
    0000193A 64E3                   MOV         R14,R4
        TETRIS.c  1370            if(seconds < 10) strcat(strA, "0");
    0000193C E30A                   MOV         #10,R3
    0000193E 3D33                   CMP/GE      R3,R13
    00001940 8903                   BT          L1173
    00001942 D537                   MOV.L       L1251+114,R5; L511
    00001944 D135                   MOV.L       L1251+110,R1; _strcat
    00001946 410B                   JSR         @R1
    00001948 64E3                   MOV         R14,R4
    0000194A              L1173:                            
        TETRIS.c  1371            itoa(strB, seconds);
    0000194A 6CF3                   MOV         R15,R12
    0000194C D31F                   MOV.L       L1251+30,R3; _itoa
    0000194E 65D3                   MOV         R13,R5
    00001950 7C14                   ADD         #20,R12
    00001952 430B                   JSR         @R3
    00001954 64C3                   MOV         R12,R4
        TETRIS.c  1372            strcat(strA, strB);
    00001956 65C3                   MOV         R12,R5
    00001958 D230                   MOV.L       L1251+110,R2; _strcat
    0000195A 420B                   JSR         @R2
    0000195C 64E3                   MOV         R14,R4
        TETRIS.c  1373            strcat(strA, ".");
    0000195E D531                   MOV.L       L1251+118,R5; L512
    00001960 D32E                   MOV.L       L1251+110,R3; _strcat
    00001962 430B                   JSR         @R3
    00001964 64E3                   MOV         R14,R4
        TETRIS.c  1374            itoa(strB, deciSeconds);
    00001966 65F2                   MOV.L       @R15,R5
    00001968 D318                   MOV.L       L1251+30,R3; _itoa
    0000196A 430B                   JSR         @R3
    0000196C 64C3                   MOV         R12,R4
        TETRIS.c  1375            strcat(strA, strB);
    0000196E 65C3                   MOV         R12,R5
    00001970 D22A                   MOV.L       L1251+110,R2; _strcat
    00001972 420B                   JSR         @R2
    00001974 64E3                   MOV         R14,R4
        TETRIS.c  1376    
        TETRIS.c  1377            PopUpWin(3);
    00001976 D30F                   MOV.L       L1251+6,R3 ; _PopUpWin
    00001978 430B                   JSR         @R3
    0000197A E403                   MOV         #3,R4
        TETRIS.c  1378            locate(8,3);
    0000197C D20E                   MOV.L       L1251+10,R2; _locate
    0000197E E503                   MOV         #3,R5
    00001980 420B                   JSR         @R2
    00001982 E408                   MOV         #8,R4
        TETRIS.c  1379            Print("COMPLETE");
    00001984 D428                   MOV.L       L1251+122,R4; L752
    00001986 D30E                   MOV.L       L1251+18,R3; _Print
    00001988 430B                   JSR         @R3
    0000198A 0009                   NOP
        TETRIS.c  1380            locate(5,4);




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   86


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    0000198C D20A                   MOV.L       L1251+10,R2; _locate
    0000198E E504                   MOV         #4,R5
    00001990 420B                   JSR         @R2
    00001992 E405                   MOV         #5,R4
        TETRIS.c  1381            Print("Time: ");
    00001994 D425                   MOV.L       L1251+126,R4; L753
    00001996 D30A                   MOV.L       L1251+18,R3; _Print
    00001998 430B                   JSR         @R3
    0000199A 0009                   NOP
        TETRIS.c  1382            locate(11,4);
    0000199C D206                   MOV.L       L1251+10,R2; _locate
    0000199E E504                   MOV         #4,R5
    000019A0 420B                   JSR         @R2
    000019A2 E40B                   MOV         #11,R4
        TETRIS.c  1383            Print(strA);
    000019A4 D306                   MOV.L       L1251+18,R3; _Print
    000019A6 430B                   JSR         @R3
    000019A8 64E3                   MOV         R14,R4
    000019AA A066                   BRA         L815
    000019AC 0009                   NOP
    000019AE              L1251:                            
    000019AE 0000                   .DATA.W     0
    000019B0 <00000000>             .DATA.L     _drawPiece
    000019B4 <00000000>             .DATA.L     _PopUpWin
    000019B8 <00000000>             .DATA.L     _locate
    000019BC <00000000>             .DATA.L     L738
    000019C0 <00000000>             .DATA.L     _Print
    000019C4 <00000000>             .DATA.L     _gameMode
    000019C8 <00000000>             .DATA.L     L740
    000019CC <00000000>             .DATA.L     _itoa
    000019D0 <00000000>             .DATA.L     _PrintMini
    000019D4 3F800000               .DATA.L     H'3F800000
    000019D8 <00000000>             .DATA.L     __subs
    000019DC <00000000>             .DATA.L     _lockDelayCounter
    000019E0 <00000000>             .DATA.L     _rotatedBefore
    000019E4 <00000000>             .DATA.L     _KeyDown
    000019E8 <00000000>             .DATA.L     _drawScore
    000019EC <00000000>             .DATA.L     __ges
    000019F0 <00000000>             .DATA.L     _aState
    000019F4 <00000000>             .DATA.L     _aPiece
    000019F8 <00000000>             .DATA.L     _ay
    000019FC <00000000>             .DATA.L     _ax
    00001A00 <00000000>             .DATA.L     _drawLockDelay
    00001A04 <00000000>             .DATA.L     _framesPassed
    00001A08 <00000000>             .DATA.L     _drawTime
    00001A0C <00000000>             .DATA.L     _linesTotal
    00001A10 <00000000>             .DATA.L     __divls
    00001A14 <00000000>             .DATA.L     __modls
    00001A18 <00000000>             .DATA.L     L510
    00001A1C <00000000>             .DATA.L     _strcat
    00001A20 <00000000>             .DATA.L     L511
    00001A24 <00000000>             .DATA.L     L512
    00001A28 <00000000>             .DATA.L     L752
    00001A2C <00000000>             .DATA.L     L753
    00001A30              L1172:                            
        TETRIS.c  1384            locate(7,5);
        TETRIS.c  1385            Print("Press EXE");




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   87


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1386            endGame();
        TETRIS.c  1387            return 1;
        TETRIS.c  1388        }
        TETRIS.c  1389        else if(gameMode == ULTRA_MODE && framesPassed >= 120*FPS) {
    00001A30 6043                   MOV         R4,R0
    00001A32 8803                   CMP/EQ      #3,R0
    00001A34 8B2D                   BF          L1174
    00001A36 927E                   MOV.W       L1255,R2   ; H'0960
    00001A38 3523                   CMP/GE      R2,R5
    00001A3A 8B2A                   BF          L1174
        TETRIS.c  1390            char strA[20];
        TETRIS.c  1391            PopUpWin(3);
    00001A3C D23E                   MOV.L       L1255+2,R2 ; _PopUpWin
    00001A3E 420B                   JSR         @R2
    00001A40 E403                   MOV         #3,R4
        TETRIS.c  1392            locate(8,3);
    00001A42 E503                   MOV         #3,R5
    00001A44 D33D                   MOV.L       L1255+6,R3 ; _locate
    00001A46 430B                   JSR         @R3
    00001A48 E408                   MOV         #8,R4
        TETRIS.c  1393            Print("COMPLETE");
    00001A4A D43D                   MOV.L       L1255+10,R4; L752
    00001A4C D23D                   MOV.L       L1255+14,R2; _Print
    00001A4E 420B                   JSR         @R2
    00001A50 0009                   NOP
        TETRIS.c  1394            locate(6,4);
    00001A52 E504                   MOV         #4,R5
    00001A54 D339                   MOV.L       L1255+6,R3 ; _locate
    00001A56 430B                   JSR         @R3
    00001A58 E406                   MOV         #6,R4
        TETRIS.c  1395            Print("Score: ");
    00001A5A D43B                   MOV.L       L1255+18,R4; L740
    00001A5C D239                   MOV.L       L1255+14,R2; _Print
    00001A5E 420B                   JSR         @R2
    00001A60 0009                   NOP
        TETRIS.c  1396            itoa(strA, score);
    00001A62 64F3                   MOV         R15,R4
    00001A64 D339                   MOV.L       L1255+22,R3; _itoa
    00001A66 6592                   MOV.L       @R9,R5
    00001A68 430B                   JSR         @R3
    00001A6A 7420                   ADD         #32,R4
        TETRIS.c  1397            PrintMini(70, 25, strA, 0);
    00001A6C D238                   MOV.L       L1255+26,R2; _PrintMini
    00001A6E E700                   MOV         #0,R7
    00001A70 66F3                   MOV         R15,R6
    00001A72 7620                   ADD         #32,R6
    00001A74 E519                   MOV         #25,R5
    00001A76 420B                   JSR         @R2
    00001A78 E446                   MOV         #70,R4
    00001A7A              L815:
        TETRIS.c  1398            locate(7,5);
    00001A7A E505                   MOV         #5,R5
    00001A7C D32F                   MOV.L       L1255+6,R3 ; _locate
    00001A7E 430B                   JSR         @R3
    00001A80 E407                   MOV         #7,R4
        TETRIS.c  1399            Print("Press EXE");
    00001A82 D434                   MOV.L       L1255+30,R4; L741




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   88


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001A84 D22F                   MOV.L       L1255+14,R2; _Print
    00001A86 420B                   JSR         @R2
    00001A88 0009                   NOP
        TETRIS.c  1400            endGame();
    00001A8A B089                   BSR         _endGame
    00001A8C 0009                   NOP
    00001A8E A003                   BRA         L820
    00001A90 0009                   NOP
    00001A92              L1174:                            
        TETRIS.c  1401            return 1;
        TETRIS.c  1402        }
        TETRIS.c  1403    
        TETRIS.c  1404        Bdisp_PutDisp_DD();
    00001A92 D331                   MOV.L       L1255+34,R3; _Bdisp_PutDisp_DD
    00001A94 430B                   JSR         @R3
    00001A96 0009                   NOP
    00001A98              L820:
        TETRIS.c  1405        return 1;
    00001A98 E001                   MOV         #1,R0
        TETRIS.c  1406    }
    00001A9A 7F34                   ADD         #52,R15
    00001A9C 4F26                   LDS.L       @R15+,PR
    00001A9E 68F6                   MOV.L       @R15+,R8
    00001AA0 69F6                   MOV.L       @R15+,R9
    00001AA2 6AF6                   MOV.L       @R15+,R10
    00001AA4 6BF6                   MOV.L       @R15+,R11
    00001AA6 6CF6                   MOV.L       @R15+,R12
    00001AA8 6DF6                   MOV.L       @R15+,R13
    00001AAA 000B                   RTS
    00001AAC 6EF6                   MOV.L       @R15+,R14
        TETRIS.c  1407    
        TETRIS.c  1408    int mainMenu(int updateScreen) {
    00001AAE              _mainMenu:                       ; function: mainMenu
                                                           ; frame size=28
    00001AAE 2FE6                   MOV.L       R14,@-R15
    00001AB0 2FD6                   MOV.L       R13,@-R15
        TETRIS.c  1409        int key = 0;
    00001AB2 EE00                   MOV         #0,R14
    00001AB4 2FC6                   MOV.L       R12,@-R15
    00001AB6 2FB6                   MOV.L       R11,@-R15
    00001AB8 4F22                   STS.L       PR,@-R15
    00001ABA 7FF8                   ADD         #-8,R15
        TETRIS.c  1410    
        TETRIS.c  1411        if(isAtMenu) return 1;
    00001ABC DD27                   MOV.L       L1255+38,R13; _isAtMenu
    00001ABE 1F41                   MOV.L       R4,@(4,R15)
    00001AC0 2FE2                   MOV.L       R14,@R15
    00001AC2 63D2                   MOV.L       @R13,R3
    00001AC4 2338                   TST         R3,R3
    00001AC6 8B63                   BF          L824
        TETRIS.c  1412        isAtMenu = 1;
        TETRIS.c  1413    
        TETRIS.c  1414        Bdisp_AllClr_DDVRAM();
    00001AC8 D325                   MOV.L       L1255+42,R3; _Bdisp_AllClr_DDVRAM
    00001ACA E201                   MOV         #1,R2
    00001ACC 430B                   JSR         @R3
    00001ACE 2D22                   MOV.L       R2,@R13




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   89


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1415        locate(3,2);
    00001AD0 DB1A                   MOV.L       L1255+6,R11; _locate
    00001AD2 E502                   MOV         #2,R5
    00001AD4 4B0B                   JSR         @R11
    00001AD6 E403                   MOV         #3,R4
        TETRIS.c  1416        Print("TETRIS");
    00001AD8 DC1A                   MOV.L       L1255+14,R12; _Print
    00001ADA D422                   MOV.L       L1255+46,R4; L759
    00001ADC 4C0B                   JSR         @R12
    00001ADE 0009                   NOP
        TETRIS.c  1417        locate(3,5);
    00001AE0 E505                   MOV         #5,R5
    00001AE2 4B0B                   JSR         @R11
    00001AE4 E403                   MOV         #3,R4
        TETRIS.c  1418        Print("1: Endless");
    00001AE6 D420                   MOV.L       L1255+50,R4; L760
    00001AE8 4C0B                   JSR         @R12
    00001AEA 0009                   NOP
        TETRIS.c  1419        locate(3,6);
    00001AEC E506                   MOV         #6,R5
    00001AEE 4B0B                   JSR         @R11
    00001AF0 E403                   MOV         #3,R4
        TETRIS.c  1420        Print("2: 40L Sprint");
    00001AF2 D41E                   MOV.L       L1255+54,R4; L761
    00001AF4 4C0B                   JSR         @R12
    00001AF6 0009                   NOP
        TETRIS.c  1421        locate(3,7);
    00001AF8 E507                   MOV         #7,R5
    00001AFA 4B0B                   JSR         @R11
    00001AFC E403                   MOV         #3,R4
        TETRIS.c  1422        Print("3: 2min Ultra");
    00001AFE D41C                   MOV.L       L1255+58,R4; L762
    00001B00 4C0B                   JSR         @R12
    00001B02 0009                   NOP
        TETRIS.c  1423        if(updateScreen) Bdisp_PutDisp_DD();
    00001B04 52F1                   MOV.L       @(4,R15),R2
    00001B06 2228                   TST         R2,R2
    00001B08 8902                   BT          L1180
    00001B0A D313                   MOV.L       L1255+34,R3; _Bdisp_PutDisp_DD
    00001B0C 430B                   JSR         @R3
    00001B0E 0009                   NOP
        TETRIS.c  1424    
        TETRIS.c  1425        while(1) {
    00001B10              L1180:                            
        TETRIS.c  1426            GetKeyMod(&key);
    00001B10 D318                   MOV.L       L1255+62,R3; _GetKeyMod
    00001B12 430B                   JSR         @R3
    00001B14 64F3                   MOV         R15,R4
        TETRIS.c  1427            if(key == KEY_CHAR_1) {
    00001B16 60F2                   MOV.L       @R15,R0
    00001B18 8848                   CMP/EQ      #72,R0
    00001B1A 8B03                   BF          L1181
        TETRIS.c  1428                isAtMenu = 0;
    00001B1C 2DE2                   MOV.L       R14,@R13
        TETRIS.c  1429                startGame(ENDLESS_MODE);
    00001B1E E401                   MOV         #1,R4
    00001B20 A005                   BRA         L1230




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   90


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001B22 0009                   NOP
    00001B24              L1181:                            
        TETRIS.c  1430                return 1;
        TETRIS.c  1431            }
        TETRIS.c  1432            else if(key == KEY_CHAR_2) {
    00001B24 60F2                   MOV.L       @R15,R0
    00001B26 883E                   CMP/EQ      #62,R0
    00001B28 8B26                   BF          L1183
        TETRIS.c  1433                isAtMenu = 0;
        TETRIS.c  1434                startGame(SPRINT_MODE);
    00001B2A E402                   MOV         #2,R4
    00001B2C 2DE2                   MOV.L       R14,@R13
    00001B2E              L1230:                            
    00001B2E B069                   BSR         _startGame
    00001B30 0009                   NOP
    00001B32 A02D                   BRA         L824
    00001B34 0009                   NOP
    00001B36              L1255:                            
    00001B36 0960                   .DATA.W     H'0960
    00001B38 <00000000>             .DATA.L     _PopUpWin
    00001B3C <00000000>             .DATA.L     _locate
    00001B40 <00000000>             .DATA.L     L752
    00001B44 <00000000>             .DATA.L     _Print
    00001B48 <00000000>             .DATA.L     L740
    00001B4C <00000000>             .DATA.L     _itoa
    00001B50 <00000000>             .DATA.L     _PrintMini
    00001B54 <00000000>             .DATA.L     L741
    00001B58 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001B5C <00000000>             .DATA.L     _isAtMenu
    00001B60 <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001B64 <00000000>             .DATA.L     L759
    00001B68 <00000000>             .DATA.L     L760
    00001B6C <00000000>             .DATA.L     L761
    00001B70 <00000000>             .DATA.L     L762
    00001B74 <00000000>             .DATA.L     _GetKeyMod
    00001B78              L1183:                            
        TETRIS.c  1435                return 1;
        TETRIS.c  1436            }
        TETRIS.c  1437            else if(key == KEY_CHAR_3) {
    00001B78 60F2                   MOV.L       @R15,R0
    00001B7A 8834                   CMP/EQ      #52,R0
    00001B7C 8B02                   BF          L1185
        TETRIS.c  1438                isAtMenu = 0;
    00001B7E 2DE2                   MOV.L       R14,@R13
    00001B80 AFD5                   BRA         L1230
        TETRIS.c  1439                startGame(ULTRA_MODE);
    00001B82 E403                   MOV         #3,R4
    00001B84              L1185:                            
        TETRIS.c  1440                return 1;
        TETRIS.c  1441            }
        TETRIS.c  1442            else if(key == KEY_CTRL_MENU) {
    00001B84 60F2                   MOV.L       @R15,R0
    00001B86 8830                   CMP/EQ      #48,R0
    00001B88 8BC2                   BF          L1180
        TETRIS.c  1443                isGameActive = 0;
    00001B8A D459                   MOV.L       L1256+2,R4 ; _isGameActive
    00001B8C 24E2                   MOV.L       R14,@R4




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   91


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1444                isAtMenu = 0;
        TETRIS.c  1445                return 1;
        TETRIS.c  1446            }
        TETRIS.c  1447        }
        TETRIS.c  1448        isAtMenu = 0;
    00001B8E 2DE2                   MOV.L       R14,@R13
    00001B90              L824:
        TETRIS.c  1449        return 1;
    00001B90 E001                   MOV         #1,R0
        TETRIS.c  1450    }
    00001B92 7F08                   ADD         #8,R15
    00001B94 4F26                   LDS.L       @R15+,PR
    00001B96 6BF6                   MOV.L       @R15+,R11
    00001B98 6CF6                   MOV.L       @R15+,R12
    00001B9A 6DF6                   MOV.L       @R15+,R13
    00001B9C 000B                   RTS
    00001B9E 6EF6                   MOV.L       @R15+,R14
        TETRIS.c  1451    
        TETRIS.c  1452    int endGame() {
    00001BA0              _endGame:                        ; function: endGame
                                                           ; frame size=12
    00001BA0 2FE6                   MOV.L       R14,@-R15
    00001BA2 2FD6                   MOV.L       R13,@-R15
    00001BA4 4F22                   STS.L       PR,@-R15
        TETRIS.c  1453        int menuPressed = 0;
        TETRIS.c  1454    
        TETRIS.c  1455        Bdisp_PutDisp_DD();
    00001BA6 D353                   MOV.L       L1256+6,R3 ; _Bdisp_PutDisp_DD
    00001BA8 430B                   JSR         @R3
    00001BAA ED00                   MOV         #0,R13
        TETRIS.c  1456        KillTimer(ID_USER_TIMER1);
    00001BAC D252                   MOV.L       L1256+10,R2; _KillTimer
    00001BAE 420B                   JSR         @R2
    00001BB0 E401                   MOV         #1,R4
    00001BB2 DE52                   MOV.L       L1256+14,R14; _rSeed
        TETRIS.c  1457    
        TETRIS.c  1458        while(KeyDown(KEY_CTRL_MENU)) {
    00001BB4 A003                   BRA         L1188
    00001BB6 0009                   NOP
    00001BB8              L1189:                            
        TETRIS.c  1459            ++rSeed;  // Wait for menu release
    00001BB8 62E2                   MOV.L       @R14,R2
    00001BBA 7201                   ADD         #1,R2
    00001BBC 2E22                   MOV.L       R2,@R14
    00001BBE              L1188:                            
    00001BBE D350                   MOV.L       L1256+18,R3; _KeyDown
    00001BC0 430B                   JSR         @R3
    00001BC2 E430                   MOV         #48,R4
    00001BC4 600C                   EXTU.B      R0,R0
    00001BC6 2008                   TST         R0,R0
    00001BC8 8BF6                   BF          L1189
        TETRIS.c  1460        }
        TETRIS.c  1461    
        TETRIS.c  1462        while(!KeyDown(KEY_CTRL_EXE) && !KeyDown(KEY_CTRL_MENU)) {
    00001BCA A007                   BRA         L1190
    00001BCC 0009                   NOP
    00001BCE              L1191:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   92


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1463            ++rSeed; // At this point this is just "do nothing"
    00001BCE 62E2                   MOV.L       @R14,R2
        TETRIS.c  1464            menuPressed = KeyDown(KEY_CTRL_MENU);
    00001BD0 D34B                   MOV.L       L1256+18,R3; _KeyDown
    00001BD2 7201                   ADD         #1,R2
    00001BD4 2E22                   MOV.L       R2,@R14
    00001BD6 430B                   JSR         @R3
    00001BD8 E430                   MOV         #48,R4
    00001BDA 6D0C                   EXTU.B      R0,R13
    00001BDC              L1190:                            
    00001BDC D248                   MOV.L       L1256+18,R2; _KeyDown
    00001BDE 420B                   JSR         @R2
    00001BE0 E41F                   MOV         #31,R4
    00001BE2 600C                   EXTU.B      R0,R0
    00001BE4 2008                   TST         R0,R0
    00001BE6 8B05                   BF          L1192
    00001BE8 D245                   MOV.L       L1256+18,R2; _KeyDown
    00001BEA 420B                   JSR         @R2
    00001BEC E430                   MOV         #48,R4
    00001BEE 600C                   EXTU.B      R0,R0
    00001BF0 2008                   TST         R0,R0
    00001BF2 89EC                   BT          L1191
    00001BF4              L1192:                            
        TETRIS.c  1465        }
        TETRIS.c  1466        mainMenu(!menuPressed);
    00001BF4 2DD8                   TST         R13,R13
    00001BF6 BF5A                   BSR         _mainMenu
    00001BF8 0429                   MOVT        R4
        TETRIS.c  1467        return 1;
    00001BFA E001                   MOV         #1,R0
        TETRIS.c  1468    }
    00001BFC 4F26                   LDS.L       @R15+,PR
    00001BFE 6DF6                   MOV.L       @R15+,R13
    00001C00 000B                   RTS
    00001C02 6EF6                   MOV.L       @R15+,R14
        TETRIS.c  1469    
        TETRIS.c  1470    // Idk why but compiler is unhappy with void return
        TETRIS.c  1471    int startGame(int mode) {
    00001C04              _startGame:                      ; function: startGame
                                                           ; frame size=108
    00001C04 2FE6                   MOV.L       R14,@-R15
    00001C06 2FD6                   MOV.L       R13,@-R15
    00001C08 2FC6                   MOV.L       R12,@-R15
    00001C0A 2FB6                   MOV.L       R11,@-R15
    00001C0C 2FA6                   MOV.L       R10,@-R15
    00001C0E 2F86                   MOV.L       R8,@-R15
    00001C10 4F22                   STS.L       PR,@-R15
    00001C12 7FB0                   ADD         #-80,R15
    00001C14 D83B                   MOV.L       L1256+22,R8; _aPiece
    00001C16 DA3C                   MOV.L       L1256+26,R10; _aState
        TETRIS.c  1472    
        TETRIS.c  1473        int i = 0;
        TETRIS.c  1474        int j = 0;
        TETRIS.c  1475        int menuPressed = 0;
        TETRIS.c  1476        char testStr[80];
        TETRIS.c  1477    
        TETRIS.c  1478        Bdisp_AllClr_DDVRAM();




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   93


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001C18 D33C                   MOV.L       L1256+30,R3; _Bdisp_AllClr_DDVRAM
    00001C1A 430B                   JSR         @R3
    00001C1C 6B43                   MOV         R4,R11
    00001C1E DD37                   MOV.L       L1256+14,R13; _rSeed
        TETRIS.c  1479    
        TETRIS.c  1480        // Wait till EXE is released
        TETRIS.c  1481        while(KeyDown(KEY_CTRL_EXE)) {
    00001C20 A003                   BRA         L1195
    00001C22 0009                   NOP
    00001C24              L1196:                            
        TETRIS.c  1482            ++rSeed;
    00001C24 63D2                   MOV.L       @R13,R3
    00001C26 7301                   ADD         #1,R3
    00001C28 2D32                   MOV.L       R3,@R13
    00001C2A              L1195:                            
    00001C2A D235                   MOV.L       L1256+18,R2; _KeyDown
    00001C2C 420B                   JSR         @R2
    00001C2E E41F                   MOV         #31,R4
    00001C30 600C                   EXTU.B      R0,R0
    00001C32 2008                   TST         R0,R0
    00001C34 8BF6                   BF          L1196
        TETRIS.c  1483        }
        TETRIS.c  1484    
        TETRIS.c  1485        locate(3,2);
    00001C36 E502                   MOV         #2,R5
    00001C38 DE35                   MOV.L       L1256+34,R14; _locate
    00001C3A 4E0B                   JSR         @R14
    00001C3C E403                   MOV         #3,R4
        TETRIS.c  1486        Print("Hold: 9");
    00001C3E DC35                   MOV.L       L1256+38,R12; _Print
    00001C40 D435                   MOV.L       L1256+42,R4; L780
    00001C42 4C0B                   JSR         @R12
    00001C44 0009                   NOP
        TETRIS.c  1487        locate(3,3);
    00001C46 E503                   MOV         #3,R5
    00001C48 4E0B                   JSR         @R14
    00001C4A 6453                   MOV         R5,R4
        TETRIS.c  1488        Print("Soft/Hard drop:");
    00001C4C D433                   MOV.L       L1256+46,R4; L781
    00001C4E 4C0B                   JSR         @R12
    00001C50 0009                   NOP
        TETRIS.c  1489        locate(3,4);
    00001C52 E504                   MOV         #4,R5
    00001C54 4E0B                   JSR         @R14
    00001C56 E403                   MOV         #3,R4
        TETRIS.c  1490        Print("  Down/5");
    00001C58 D431                   MOV.L       L1256+50,R4; L782
    00001C5A 4C0B                   JSR         @R12
    00001C5C 0009                   NOP
        TETRIS.c  1491        locate(3,5);
    00001C5E E505                   MOV         #5,R5
    00001C60 4E0B                   JSR         @R14
    00001C62 E403                   MOV         #3,R4
        TETRIS.c  1492        Print("Rotate 180/CW/ACW:");
    00001C64 D42F                   MOV.L       L1256+54,R4; L783
    00001C66 4C0B                   JSR         @R12
    00001C68 0009                   NOP




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   94


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1493        locate(3,6);
    00001C6A E506                   MOV         #6,R5
    00001C6C 4E0B                   JSR         @R14
    00001C6E E403                   MOV         #3,R4
        TETRIS.c  1494        Print("  4/7/8");
    00001C70 D42D                   MOV.L       L1256+58,R4; L784
    00001C72 4C0B                   JSR         @R12
    00001C74 0009                   NOP
        TETRIS.c  1495        locate(3,7);
    00001C76 E507                   MOV         #7,R5
    00001C78 4E0B                   JSR         @R14
    00001C7A E403                   MOV         #3,R4
        TETRIS.c  1496        Print("EXE to start");
    00001C7C D42B                   MOV.L       L1256+62,R4; L785
    00001C7E 4C0B                   JSR         @R12
    00001C80 0009                   NOP
        TETRIS.c  1497    
        TETRIS.c  1498        Bdisp_PutDisp_DD();
    00001C82 D21C                   MOV.L       L1256+6,R2 ; _Bdisp_PutDisp_DD
    00001C84 420B                   JSR         @R2
    00001C86 0009                   NOP
        TETRIS.c  1499    
        TETRIS.c  1500        //char str[800];
        TETRIS.c  1501        //int k = 0;
        TETRIS.c  1502        
        TETRIS.c  1503        
        TETRIS.c  1504        //GetKey(&k);
        TETRIS.c  1505        //k = 3;
        TETRIS.c  1506        //sprintf(str,"%d", k);
        TETRIS.c  1507        //locate(1,4);
        TETRIS.c  1508        //Print((unsigned char*)str);
        TETRIS.c  1509    
        TETRIS.c  1510        ax = SPAWN_X;
    00001C88 D229                   MOV.L       L1256+66,R2; _ax
        TETRIS.c  1511        ay = SPAWN_Y;
    00001C8A E112                   MOV         #18,R1
    00001C8C D029                   MOV.L       L1256+70,R0; _ay
        TETRIS.c  1512        //aPiece = getPiece();
        TETRIS.c  1513        aState = 0;
    00001C8E EE00                   MOV         #0,R14
    00001C90 E303                   MOV         #3,R3
    00001C92 2232                   MOV.L       R3,@R2
    00001C94 2012                   MOV.L       R1,@R0
        TETRIS.c  1514        holdPiece = -1;
    00001C96 E3FF                   MOV         #-1,R3
        TETRIS.c  1515        usedHold = 0;
    00001C98 D228                   MOV.L       L1256+78,R2; _usedHold
    00001C9A 2AE2                   MOV.L       R14,@R10
    00001C9C D126                   MOV.L       L1256+74,R1; _holdPiece
    00001C9E 2132                   MOV.L       R3,@R1
    00001CA0 22E2                   MOV.L       R14,@R2
        TETRIS.c  1516    
        TETRIS.c  1517        moveInputFrames = 0;
    00001CA2 D327                   MOV.L       L1256+82,R3; _moveInputFrames
        TETRIS.c  1518        currentMoveDir = 0;  // -1, 0, 1 each mean left, none, right
    00001CA4 D127                   MOV.L       L1256+86,R1; _currentMoveDir
    00001CA6 23E2                   MOV.L       R14,@R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   95


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001CA8 21E2                   MOV.L       R14,@R1
        TETRIS.c  1519    
        TETRIS.c  1520        holdingRotateCW = 0;
    00001CAA D227                   MOV.L       L1256+90,R2; _holdingRotateCW
        TETRIS.c  1521        holdingRotateACW = 0;
    00001CAC D327                   MOV.L       L1256+94,R3; _holdingRotateACW
    00001CAE 22E2                   MOV.L       R14,@R2
    00001CB0 23E2                   MOV.L       R14,@R3
        TETRIS.c  1522        holdingRotate180 = 0;
    00001CB2 D127                   MOV.L       L1256+98,R1; _holdingRotate180
        TETRIS.c  1523        holdingHold = 0;
    00001CB4 D227                   MOV.L       L1256+102,R2; _holdingHold
    00001CB6 21E2                   MOV.L       R14,@R1
    00001CB8 22E2                   MOV.L       R14,@R2
        TETRIS.c  1524        holdingHardDrop = 0;
    00001CBA D327                   MOV.L       L1256+106,R3; _holdingHardDrop
        TETRIS.c  1525        rotatedBefore = 0;
    00001CBC D127                   MOV.L       L1256+110,R1; _rotatedBefore
    00001CBE 23E2                   MOV.L       R14,@R3
    00001CC0 21E2                   MOV.L       R14,@R1
        TETRIS.c  1526        isB2B = 0;
    00001CC2 D227                   MOV.L       L1256+114,R2; _isB2B
        TETRIS.c  1527        combo = 0;
    00001CC4 D327                   MOV.L       L1256+118,R3; _combo
    00001CC6 22E2                   MOV.L       R14,@R2
    00001CC8 23E2                   MOV.L       R14,@R3
        TETRIS.c  1528    
        TETRIS.c  1529        gravityCounter = 0.0f;
    00001CCA 61E3                   MOV         R14,R1
    00001CCC D026                   MOV.L       L1256+122,R0; _gravityCounter
    00001CCE 20E2                   MOV.L       R14,@R0
        TETRIS.c  1530        lockDelayCounter = 0;
    00001CD0 D226                   MOV.L       L1256+126,R2; _lockDelayCounter
        TETRIS.c  1531        forceLockCounter = 0;
        TETRIS.c  1532        score = 0;
        TETRIS.c  1533        linesTotal = 0;
        TETRIS.c  1534        framesPassed = 0;
        TETRIS.c  1535        level = (mode==ENDLESS_MODE)?1:5;
    00001CD2 60B3                   MOV         R11,R0
    00001CD4 D326                   MOV.L       L1256+130,R3; _forceLockCounter
    00001CD6 8801                   CMP/EQ      #1,R0
    00001CD8 2212                   MOV.L       R1,@R2
    00001CDA 2312                   MOV.L       R1,@R3
    00001CDC D125                   MOV.L       L1256+134,R1; _score
    00001CDE 21E2                   MOV.L       R14,@R1
    00001CE0 D225                   MOV.L       L1256+138,R2; _linesTotal
    00001CE2 22E2                   MOV.L       R14,@R2
    00001CE4 D325                   MOV.L       L1256+142,R3; _framesPassed
    00001CE6 8F4B                   BF/S        L1197
    00001CE8 23E2                   MOV.L       R14,@R3
    00001CEA A04A                   BRA         L1198
    00001CEC E101                   MOV         #1,R1
    00001CEE              L1256:                            
    00001CEE 0000                   .DATA.W     0
    00001CF0 <00000000>             .DATA.L     _isGameActive
    00001CF4 <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001CF8 <00000000>             .DATA.L     _KillTimer




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   96


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001CFC <00000000>             .DATA.L     _rSeed
    00001D00 <00000000>             .DATA.L     _KeyDown
    00001D04 <00000000>             .DATA.L     _aPiece
    00001D08 <00000000>             .DATA.L     _aState
    00001D0C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001D10 <00000000>             .DATA.L     _locate
    00001D14 <00000000>             .DATA.L     _Print
    00001D18 <00000000>             .DATA.L     L780
    00001D1C <00000000>             .DATA.L     L781
    00001D20 <00000000>             .DATA.L     L782
    00001D24 <00000000>             .DATA.L     L783
    00001D28 <00000000>             .DATA.L     L784
    00001D2C <00000000>             .DATA.L     L785
    00001D30 <00000000>             .DATA.L     _ax
    00001D34 <00000000>             .DATA.L     _ay
    00001D38 <00000000>             .DATA.L     _holdPiece
    00001D3C <00000000>             .DATA.L     _usedHold
    00001D40 <00000000>             .DATA.L     _moveInputFrames
    00001D44 <00000000>             .DATA.L     _currentMoveDir
    00001D48 <00000000>             .DATA.L     _holdingRotateCW
    00001D4C <00000000>             .DATA.L     _holdingRotateACW
    00001D50 <00000000>             .DATA.L     _holdingRotate180
    00001D54 <00000000>             .DATA.L     _holdingHold
    00001D58 <00000000>             .DATA.L     _holdingHardDrop
    00001D5C <00000000>             .DATA.L     _rotatedBefore
    00001D60 <00000000>             .DATA.L     _isB2B
    00001D64 <00000000>             .DATA.L     _combo
    00001D68 <00000000>             .DATA.L     _gravityCounter
    00001D6C <00000000>             .DATA.L     _lockDelayCounter
    00001D70 <00000000>             .DATA.L     _forceLockCounter
    00001D74 <00000000>             .DATA.L     _score
    00001D78 <00000000>             .DATA.L     _linesTotal
    00001D7C <00000000>             .DATA.L     _framesPassed
    00001D80              L1197:                            
    00001D80 E105                   MOV         #5,R1
    00001D82              L1198:                            
        TETRIS.c  1536    
        TETRIS.c  1537        isGameActive = 1;
    00001D82 E301                   MOV         #1,R3
    00001D84 D023                   MOV.L       L1257+10,R0; _isGameActive
    00001D86 D222                   MOV.L       L1257+6,R2 ; _level
    00001D88 D424                   MOV.L       L1257+18,R4; _board
    00001D8A 2212                   MOV.L       R1,@R2
    00001D8C 2032                   MOV.L       R3,@R0
    00001D8E 6543                   MOV         R4,R5
    00001D90 9C3B                   MOV.W       L1257,R12  ; H'0640
        TETRIS.c  1538        gameMode = mode;
    00001D92 D221                   MOV.L       L1257+14,R2; _gameMode
    00001D94 903A                   MOV.W       L1257+2,R0 ; H'00A0
    00001D96 3C4C                   ADD         R4,R12
    00001D98 22B2                   MOV.L       R11,@R2
        TETRIS.c  1539    
        TETRIS.c  1540        // Clear board
        TETRIS.c  1541        for(i=0; i<10; ++i) {
    00001D9A A009                   BRA         L1199
    00001D9C E728                   MOV         #40,R7
    00001D9E              L1200:                            




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   97


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1542            for(j=0; j<40; ++j) {
    00001D9E 66E3                   MOV         R14,R6
    00001DA0 A003                   BRA         L1201
    00001DA2 6453                   MOV         R5,R4
    00001DA4              L1202:                            
        TETRIS.c  1543                board[i][j] = 0;
    00001DA4 24E2                   MOV.L       R14,@R4
    00001DA6 7601                   ADD         #1,R6
    00001DA8 7404                   ADD         #4,R4
    00001DAA              L1201:                            
    00001DAA 3673                   CMP/GE      R7,R6
    00001DAC 8BFA                   BF          L1202
    00001DAE 350C                   ADD         R0,R5
    00001DB0              L1199:                            
    00001DB0 35C2                   CMP/HS      R12,R5
    00001DB2 8BF4                   BF          L1200
    00001DB4              L1203:                            
        TETRIS.c  1544            }
        TETRIS.c  1545        }
        TETRIS.c  1546        do {
        TETRIS.c  1547            ++rSeed;
    00001DB4 63D2                   MOV.L       @R13,R3
    00001DB6 7301                   ADD         #1,R3
    00001DB8 2D32                   MOV.L       R3,@R13
        TETRIS.c  1548            menuPressed = KeyDown(KEY_CTRL_MENU);
    00001DBA D219                   MOV.L       L1257+22,R2; _KeyDown
    00001DBC 420B                   JSR         @R2
    00001DBE E430                   MOV         #48,R4
        TETRIS.c  1549        } while(!KeyDown(KEY_CTRL_EXE) && !menuPressed);
    00001DC0 D317                   MOV.L       L1257+22,R3; _KeyDown
    00001DC2 6C0C                   EXTU.B      R0,R12
    00001DC4 430B                   JSR         @R3
    00001DC6 E41F                   MOV         #31,R4
    00001DC8 600C                   EXTU.B      R0,R0
    00001DCA 2008                   TST         R0,R0
    00001DCC 8B01                   BF          L1204
    00001DCE 2CC8                   TST         R12,R12
    00001DD0 89F0                   BT          L1203
    00001DD2              L1204:                            
        TETRIS.c  1550        
        TETRIS.c  1551        if(menuPressed) {
    00001DD2 2CC8                   TST         R12,R12
    00001DD4 8905                   BT          L1205
        TETRIS.c  1552            isGameActive = 0;
    00001DD6 D30F                   MOV.L       L1257+10,R3; _isGameActive
    00001DD8 23E2                   MOV.L       R14,@R3
        TETRIS.c  1553            mainMenu(0);
    00001DDA BE68                   BSR         _mainMenu
    00001DDC E400                   MOV         #0,R4
    00001DDE A0B6                   BRA         L837
    00001DE0 0009                   NOP
    00001DE2              L1205:                            
        TETRIS.c  1554            return 1;
        TETRIS.c  1555        }
        TETRIS.c  1556        
        TETRIS.c  1557        // Reset bag
        TETRIS.c  1558        for(i=0; i<7; ++i) {




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   98


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001DE2 64E3                   MOV         R14,R4
    00001DE4 D60F                   MOV.L       L1257+26,R6; _bag
    00001DE6 A004                   BRA         L1207
    00001DE8 E507                   MOV         #7,R5
    00001DEA              L1208:                            
        TETRIS.c  1559            bag[i] = i;
    00001DEA 6043                   MOV         R4,R0
    00001DEC 4008                   SHLL2       R0
    00001DEE 0646                   MOV.L       R4,@(R0,R6)
    00001DF0 7401                   ADD         #1,R4
    00001DF2              L1207:                            
    00001DF2 3453                   CMP/GE      R5,R4
    00001DF4 8BF9                   BF          L1208
        TETRIS.c  1560        }
        TETRIS.c  1561        bagSize = 7;
    00001DF6 D20C                   MOV.L       L1257+30,R2; _bagSize
        TETRIS.c  1562        aPiece = getPiece();
    00001DF8 D30C                   MOV.L       L1257+34,R3; _getPiece
    00001DFA 430B                   JSR         @R3
    00001DFC 2252                   MOV.L       R5,@R2
    00001DFE 2802                   MOV.L       R0,@R8
    00001E00 DC0B                   MOV.L       L1257+38,R12; _nextQueue
    00001E02 6EC3                   MOV         R12,R14
    00001E04 6DC3                   MOV         R12,R13
        TETRIS.c  1563    
        TETRIS.c  1564        // Make new queue
        TETRIS.c  1565        for(i=0; i<NEXT_QUEUE_SIZE; ++i) {
    00001E06 A01A                   BRA         L1209
    00001E08 7D14                   ADD         #20,R13
    00001E0A              L1257:                            
    00001E0A 0640                   .DATA.W     H'0640
    00001E0C 00A0                   .DATA.W     H'00A0
    00001E0E 0000                   .DATA.W     0
    00001E10 <00000000>             .DATA.L     _level
    00001E14 <00000000>             .DATA.L     _isGameActive
    00001E18 <00000000>             .DATA.L     _gameMode
    00001E1C <00000000>             .DATA.L     _board
    00001E20 <00000000>             .DATA.L     _KeyDown
    00001E24 <00000000>             .DATA.L     _bag
    00001E28 <00000000>             .DATA.L     _bagSize
    00001E2C <00000000>             .DATA.L     _getPiece
    00001E30 <00000000>             .DATA.L     _nextQueue
    00001E34              L1210:                            
        TETRIS.c  1566            nextQueue[i] = getPiece();
    00001E34 D354                   MOV.L       L1258+2,R3 ; _getPiece
    00001E36 430B                   JSR         @R3
    00001E38 0009                   NOP
    00001E3A 2E02                   MOV.L       R0,@R14
    00001E3C 7E04                   ADD         #4,R14
    00001E3E              L1209:                            
    00001E3E 3ED2                   CMP/HS      R13,R14
    00001E40 8BF8                   BF          L1210
        TETRIS.c  1567        }
        TETRIS.c  1568    
        TETRIS.c  1569        Bdisp_AllClr_DDVRAM();
    00001E42 D352                   MOV.L       L1258+6,R3 ; _Bdisp_AllClr_DDVRAM
    00001E44 430B                   JSR         @R3




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE   99


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001E46 0009                   NOP
        TETRIS.c  1570    
        TETRIS.c  1571        // draw the walls of the board
        TETRIS.c  1572        Bdisp_DrawLineVRAM(48, 0,  48, 63);
    00001E48 DE51                   MOV.L       L1258+10,R14; _Bdisp_DrawLineVRAM
    00001E4A E73F                   MOV         #63,R7
    00001E4C E630                   MOV         #48,R6
    00001E4E E500                   MOV         #0,R5
    00001E50 4E0B                   JSR         @R14
    00001E52 6463                   MOV         R6,R4
        TETRIS.c  1573        Bdisp_DrawLineVRAM(79, 0,  79, 63);
    00001E54 E73F                   MOV         #63,R7
    00001E56 E64F                   MOV         #79,R6
    00001E58 E500                   MOV         #0,R5
    00001E5A 4E0B                   JSR         @R14
    00001E5C 6463                   MOV         R6,R4
        TETRIS.c  1574        Bdisp_DrawLineVRAM(48, 63, 79, 63);
    00001E5E E73F                   MOV         #63,R7
    00001E60 E64F                   MOV         #79,R6
    00001E62 6573                   MOV         R7,R5
    00001E64 4E0B                   JSR         @R14
    00001E66 E430                   MOV         #48,R4
        TETRIS.c  1575    
        TETRIS.c  1576        // Hold UI
        TETRIS.c  1577        PrintMini(32, 1, "HOLD", 0);
    00001E68 DD4A                   MOV.L       L1258+14,R13; _PrintMini
    00001E6A E700                   MOV         #0,R7
    00001E6C D64A                   MOV.L       L1258+18,R6; L792
    00001E6E E501                   MOV         #1,R5
    00001E70 4D0B                   JSR         @R13
    00001E72 E420                   MOV         #32,R4
        TETRIS.c  1578        Bdisp_DrawLineVRAM(31, 7, 47, 7);
    00001E74 E707                   MOV         #7,R7
    00001E76 E62F                   MOV         #47,R6
    00001E78 6573                   MOV         R7,R5
    00001E7A 4E0B                   JSR         @R14
    00001E7C E41F                   MOV         #31,R4
        TETRIS.c  1579        Bdisp_DrawLineVRAM(31, 16, 47, 16);
    00001E7E E710                   MOV         #16,R7
    00001E80 E62F                   MOV         #47,R6
    00001E82 6573                   MOV         R7,R5
    00001E84 4E0B                   JSR         @R14
    00001E86 E41F                   MOV         #31,R4
        TETRIS.c  1580        Bdisp_DrawLineVRAM(31, 8, 31, 15);
    00001E88 E70F                   MOV         #15,R7
    00001E8A E61F                   MOV         #31,R6
    00001E8C E508                   MOV         #8,R5
    00001E8E 4E0B                   JSR         @R14
    00001E90 6463                   MOV         R6,R4
        TETRIS.c  1581        drawHold(-1);
    00001E92 D242                   MOV.L       L1258+22,R2; _drawHold
    00001E94 420B                   JSR         @R2
    00001E96 E4FF                   MOV         #-1,R4
        TETRIS.c  1582        
        TETRIS.c  1583        // Next UI
        TETRIS.c  1584        PrintMini(81,1,"NEXT",0);
    00001E98 D641                   MOV.L       L1258+26,R6; L793




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  100


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001E9A E501                   MOV         #1,R5
    00001E9C E700                   MOV         #0,R7
    00001E9E 4D0B                   JSR         @R13
    00001EA0 E451                   MOV         #81,R4
        TETRIS.c  1585        Bdisp_DrawLineVRAM(80, 7, 96,7 );
    00001EA2 E707                   MOV         #7,R7
    00001EA4 E660                   MOV         #96,R6
    00001EA6 6573                   MOV         R7,R5
    00001EA8 4E0B                   JSR         @R14
    00001EAA E450                   MOV         #80,R4
        TETRIS.c  1586        Bdisp_DrawLineVRAM(96, 8, 96, 52);
    00001EAC E734                   MOV         #52,R7
    00001EAE E660                   MOV         #96,R6
    00001EB0 E508                   MOV         #8,R5
    00001EB2 4E0B                   JSR         @R14
    00001EB4 6463                   MOV         R6,R4
        TETRIS.c  1587        Bdisp_DrawLineVRAM(80, 52, 96, 52);
    00001EB6 E734                   MOV         #52,R7
    00001EB8 E660                   MOV         #96,R6
    00001EBA 6573                   MOV         R7,R5
    00001EBC 4E0B                   JSR         @R14
    00001EBE E450                   MOV         #80,R4
        TETRIS.c  1588        drawNextQueue(nextQueue);
    00001EC0 D338                   MOV.L       L1258+30,R3; _drawNextQueue
    00001EC2 430B                   JSR         @R3
    00001EC4 64C3                   MOV         R12,R4
        TETRIS.c  1589    
        TETRIS.c  1590        switch(mode) {
    00001EC6 60B3                   MOV         R11,R0
    00001EC8 8801                   CMP/EQ      #1,R0
    00001ECA 8905                   BT          L906
    00001ECC 8802                   CMP/EQ      #2,R0
    00001ECE 8910                   BT          L908
    00001ED0 8803                   CMP/EQ      #3,R0
    00001ED2 8919                   BT          L911
    00001ED4 A028                   BRA         L1211
    00001ED6 0009                   NOP
    00001ED8              L906:                            ; case label 
        TETRIS.c  1591            case ENDLESS_MODE:
        TETRIS.c  1592                PrintMini(3, 14, "SCORE", 0);
    00001ED8 D633                   MOV.L       L1258+34,R6; L795
    00001EDA E50E                   MOV         #14,R5
    00001EDC E700                   MOV         #0,R7
    00001EDE 4D0B                   JSR         @R13
    00001EE0 E403                   MOV         #3,R4
        TETRIS.c  1593                drawScore(0);
    00001EE2 D232                   MOV.L       L1258+38,R2; _drawScore
    00001EE4 420B                   JSR         @R2
    00001EE6 E400                   MOV         #0,R4
        TETRIS.c  1594                drawLevel(1);
    00001EE8 D331                   MOV.L       L1258+42,R3; _drawLevel
    00001EEA 430B                   JSR         @R3
    00001EEC E401                   MOV         #1,R4
        TETRIS.c  1595                break;
    00001EEE A01B                   BRA         L1211
    00001EF0 0009                   NOP
    00001EF2              L908:                            ; case label 




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  101


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1596            case SPRINT_MODE:
        TETRIS.c  1597                PrintMini(3, 28, "LINES", 0);
    00001EF2 E700                   MOV         #0,R7
    00001EF4 D62F                   MOV.L       L1258+46,R6; L796
    00001EF6 E51C                   MOV         #28,R5
    00001EF8 4D0B                   JSR         @R13
    00001EFA E403                   MOV         #3,R4
        TETRIS.c  1598                drawLinesTotal(0, 40);
    00001EFC D32E                   MOV.L       L1258+50,R3; _drawLinesTotal
    00001EFE E528                   MOV         #40,R5
    00001F00 430B                   JSR         @R3
    00001F02 E400                   MOV         #0,R4
    00001F04 A008                   BRA         L836
    00001F06 0009                   NOP
    00001F08              L911:                            ; case label 
        TETRIS.c  1599                PrintMini(3, 42, "TIME", 0);
        TETRIS.c  1600                drawTime(0);
        TETRIS.c  1601                break;
        TETRIS.c  1602            case ULTRA_MODE:
        TETRIS.c  1603                PrintMini(3, 14, "SCORE", 0);
    00001F08 D627                   MOV.L       L1258+34,R6; L795
    00001F0A E50E                   MOV         #14,R5
    00001F0C E700                   MOV         #0,R7
    00001F0E 4D0B                   JSR         @R13
    00001F10 E403                   MOV         #3,R4
        TETRIS.c  1604                drawScore(0);
    00001F12 D226                   MOV.L       L1258+38,R2; _drawScore
    00001F14 420B                   JSR         @R2
    00001F16 E400                   MOV         #0,R4
    00001F18              L836:
        TETRIS.c  1605                PrintMini(3, 42, "TIME", 0);
    00001F18 D628                   MOV.L       L1258+54,R6; L797
    00001F1A E52A                   MOV         #42,R5
    00001F1C E700                   MOV         #0,R7
    00001F1E 4D0B                   JSR         @R13
    00001F20 E403                   MOV         #3,R4
        TETRIS.c  1606                drawTime(0);
    00001F22 D327                   MOV.L       L1258+58,R3; _drawTime
    00001F24 430B                   JSR         @R3
    00001F26 E400                   MOV         #0,R4
        TETRIS.c  1607                break;
    00001F28              L1211:                            
        TETRIS.c  1608        }
        TETRIS.c  1609    
        TETRIS.c  1610        updateBoard();
    00001F28 B81E                   BSR         _updateBoard
    00001F2A 0009                   NOP
        TETRIS.c  1611        drawPiece(SPAWN_X, SPAWN_Y, aPiece, aState);
    00001F2C 67A2                   MOV.L       @R10,R7
    00001F2E E512                   MOV         #18,R5
    00001F30 D224                   MOV.L       L1258+62,R2; _drawPiece
    00001F32 6682                   MOV.L       @R8,R6
    00001F34 420B                   JSR         @R2
    00001F36 E403                   MOV         #3,R4
        TETRIS.c  1612        drawGhost(SPAWN_X, SPAWN_Y, aPiece, aState);
    00001F38 67A2                   MOV.L       @R10,R7
    00001F3A E512                   MOV         #18,R5




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  102


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001F3C D322                   MOV.L       L1258+66,R3; _drawGhost
    00001F3E 6682                   MOV.L       @R8,R6
    00001F40 430B                   JSR         @R3
    00001F42 E403                   MOV         #3,R4
        TETRIS.c  1613        Bdisp_PutDisp_DD();
    00001F44 D221                   MOV.L       L1258+70,R2; _Bdisp_PutDisp_DD
    00001F46 420B                   JSR         @R2
    00001F48 0009                   NOP
        TETRIS.c  1614        frame();
    00001F4A B882                   BSR         _frame
    00001F4C 0009                   NOP
    00001F4E              L837:
        TETRIS.c  1615        
        TETRIS.c  1616        return 1;
    00001F4E E001                   MOV         #1,R0
        TETRIS.c  1617    }
    00001F50 7F50                   ADD         #80,R15
    00001F52 4F26                   LDS.L       @R15+,PR
    00001F54 68F6                   MOV.L       @R15+,R8
    00001F56 6AF6                   MOV.L       @R15+,R10
    00001F58 6BF6                   MOV.L       @R15+,R11
    00001F5A 6CF6                   MOV.L       @R15+,R12
    00001F5C 6DF6                   MOV.L       @R15+,R13
    00001F5E 000B                   RTS
    00001F60 6EF6                   MOV.L       @R15+,R14
        TETRIS.c  1618    
        TETRIS.c  1619    int AddIn_main(int isAppli, unsigned short OptionNum)
    00001F62              _AddIn_main:                     ; function: AddIn_main
                                                           ; frame size=4
    00001F62 7FFC                   ADD         #-4,R15
        TETRIS.c  1620    {
        TETRIS.c  1621        unsigned int key = 0;
    00001F64 E300                   MOV         #0,R3
    00001F66 2F32                   MOV.L       R3,@R15
        TETRIS.c  1622    
        TETRIS.c  1623        mainMenu(1);
    00001F68 BDA1                   BSR         _mainMenu
    00001F6A E401                   MOV         #1,R4
    00001F6C DE18                   MOV.L       L1258+74,R14; _isGameActive
    00001F6E ED01                   MOV         #1,R13
        TETRIS.c  1624    
        TETRIS.c  1625        while(1){
    00001F70              L1213:                            
        TETRIS.c  1626            GetKeyMod(&key);
    00001F70 D318                   MOV.L       L1258+78,R3; _GetKeyMod
    00001F72 430B                   JSR         @R3
    00001F74 64F3                   MOV         R15,R4
        TETRIS.c  1627            if(!isGameActive) {
    00001F76 62E2                   MOV.L       @R14,R2
    00001F78 2228                   TST         R2,R2
    00001F7A 8BF9                   BF          L1213
        TETRIS.c  1628                isGameActive = 1;
    00001F7C 2ED2                   MOV.L       R13,@R14
        TETRIS.c  1629                mainMenu(1);
    00001F7E BD96                   BSR         _mainMenu
    00001F80 E401                   MOV         #1,R4
    00001F82 AFF5                   BRA         L1213




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  103


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00001F84 0009                   NOP
    00001F86              L1258:                            
    00001F86 0000                   .DATA.W     0
    00001F88 <00000000>             .DATA.L     _getPiece
    00001F8C <00000000>             .DATA.L     _Bdisp_AllClr_DDVRAM
    00001F90 <00000000>             .DATA.L     _Bdisp_DrawLineVRAM
    00001F94 <00000000>             .DATA.L     _PrintMini
    00001F98 <00000000>             .DATA.L     L792
    00001F9C <00000000>             .DATA.L     _drawHold
    00001FA0 <00000000>             .DATA.L     L793
    00001FA4 <00000000>             .DATA.L     _drawNextQueue
    00001FA8 <00000000>             .DATA.L     L795
    00001FAC <00000000>             .DATA.L     _drawScore
    00001FB0 <00000000>             .DATA.L     _drawLevel
    00001FB4 <00000000>             .DATA.L     L796
    00001FB8 <00000000>             .DATA.L     _drawLinesTotal
    00001FBC <00000000>             .DATA.L     L797
    00001FC0 <00000000>             .DATA.L     _drawTime
    00001FC4 <00000000>             .DATA.L     _drawPiece
    00001FC8 <00000000>             .DATA.L     _drawGhost
    00001FCC <00000000>             .DATA.L     _Bdisp_PutDisp_DD
    00001FD0 <00000000>             .DATA.L     _isGameActive
    00001FD4 <00000000>             .DATA.L     _GetKeyMod
        TETRIS.c  1630            }
        TETRIS.c  1631        }
        TETRIS.c  1632    
        TETRIS.c  1633        return 1;
        TETRIS.c  1634    }
        TETRIS.c  1635    
        TETRIS.c  1636    //****************************************************************************
        TETRIS.c  1637    //**************                                              ****************
        TETRIS.c  1638    //**************                 Notice!                      ****************
        TETRIS.c  1639    //**************                                              ****************
        TETRIS.c  1640    //**************  Please do not change the following source.  ****************
        TETRIS.c  1641    //**************                                              ****************
        TETRIS.c  1642    //****************************************************************************
        TETRIS.c  1643    
        TETRIS.c  1644    
        TETRIS.c  1645    #pragma section _BR_Size
        TETRIS.c  1646    unsigned long BR_Size;
        TETRIS.c  1647    #pragma section
        TETRIS.c  1648    
        TETRIS.c  1649    
        TETRIS.c  1650    #pragma section _TOP
        TETRIS.c  1651    
        TETRIS.c  1652    //****************************************************************************
        TETRIS.c  1653    //  InitializeSystem
        TETRIS.c  1654    //
        TETRIS.c  1655    //  param   :   isAppli   : 1 = Application / 0 = eActivity
        TETRIS.c  1656    //              OptionNum : Option Number (only eActivity)
        TETRIS.c  1657    //
        TETRIS.c  1658    //  retval  :   1 = No error / 0 = Error
        TETRIS.c  1659    //
        TETRIS.c  1660    //****************************************************************************
        TETRIS.c  1661    int InitializeSystem(int isAppli, unsigned short OptionNum)
P_T 00000000              _InitializeSystem:               ; function: InitializeSystem
                                                           ; frame size=0




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  104


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

        TETRIS.c  1662    {
        TETRIS.c  1663        return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
    00000000 D301                   MOV.L       L1259+2,R3 ; _INIT_ADDIN_APPLICATION
    00000002 432B                   JMP         @R3
    00000004 0009                   NOP
    00000006              L1259:                            
    00000006 0000                   .DATA.W     0
    00000008 <00000000>             .DATA.L     _INIT_ADDIN_APPLICATION
        TETRIS.c  1664    }
        TETRIS.c  1665    
        TETRIS.c  1666    #pragma section
        TETRIS.c  1667    
C   00000000              _sc0015:                         ; static: sc0015
    00000000 D201D00242             .DATA.L     H'D201D002,H'422B0009,H'80010070,H'00000015
             2B00098001   
             0070000000   
             15           
    00000010              _rotationTable:                  ; static: rotationTable
    00000010 0000000000             .DATA.L     H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000001,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,
             0001000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000001,H'00000001,H'00000001,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,
             0000010000 +                       H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000001,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000001,H'00000001,H'00000001,
             0000000100 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,H'00000000,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,
             0000000001 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000001,H'00000001,H'00000001,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,
             0000000000 +                       H'00000001,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000001,H'00000001,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,
             0000000001 +                       H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000001,H'00000001,
             0000000100 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000010000 +                       H'00000000,H'00000000,H'00000001,H'00000001,H'00000001,H'00000000,H'00000001,
             0001000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000001,H'00000001,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000001,
             0000000000 +                       H'00000001,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0100000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,H'00000000,H'00000001,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0001000000 +                       H'00000000,H'00000000
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  105


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0100000001   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0001000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000010000   
             0001000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000100   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0001000000   
             0100000001   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  106


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000100   
             0000010000   
             0000000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0001000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000000   
             0000010000   
             0001000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  107


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0000000000   
             0000000000   
             0001000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             000000       
    00000360 0000000000             .DATA.L     H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,H'00000000,H'00000001,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0001000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,
             0100000000 +                       H'00000000,H'00000001,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,
             0000010000 +                       H'00000001,H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,H'00000000,
             0001000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000001,H'00000001,H'00000000,H'00000000,H'00000000,H'00000001,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,H'00000001,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,H'00000001,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0100000001 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,H'00000000,H'00000001,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0001000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000001,H'00000001,H'00000000,
             0100000000 +                       H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000001,H'00000001,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,
             0000000000 +                       H'00000001,H'00000001,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,H'00000000,
             0000000000 +                       H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000001 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,
             0000000100 +                       H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,H'00000000,H'00000001,
             0000000000 +                       H'00000001,H'00000000
             0100000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  108


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000100   
             0000010000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0001000000   
             0000000001   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000010000   
             0001000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000100   
             0000000000   
             0001000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000001   
             0000000100   
             0000000000   
             0000000000   
             0100000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  109


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000100   
             0000010000   
             0000000000   
             0000000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000100   
             0000010000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000000   
             0000010000   
             0001000000   
             0100000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000100   
             0000000000   
             0000000000   
             0100000001   
             0000000000   
             0000000000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  110


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0100000001   
             0000000000   
             0000000000   
             0000000000   
             0100000001   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0000000001   
             0000000100   
             000000       
    000006B0 0000000000             .DATA.L     H'00000000,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000010000 +                       H'00000000,H'00000000,H'00000001,H'00000001,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000001,H'00000001,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000
             0000000000   
             0000000000   
             0000000000   
             0000000001   
             0000000100   
             0000000000   
             0000000000   
             0000000001   
             0000000100   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             00           
    00000710              _kickTable:                      ; static: kickTable
    00000710 0000000000             .DATA.L     H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'FFFFFFFE,H'00000000,H'00000001,H'00000000,
             0000000000 +                       H'FFFFFFFE,H'FFFFFFFF,H'00000001,H'00000002,H'00000000,H'00000000,H'FFFFFFFF,
             0000000000 +                       H'00000000,H'FFFFFFFE,H'00000000,H'00000001,H'00000000,H'00000002,H'00000000,
             0000000000 +                       H'00000000,H'00000001,H'FFFFFFFF,H'00000000,H'00000002,H'00000000,H'FFFFFFFF,
             0000000000 +                       H'00000002,H'00000002,H'FFFFFFFF,H'00000000,H'00000000,H'00000002,H'00000000,
             0000000000 +                       H'FFFFFFFF,H'00000000,H'00000002,H'00000001,H'FFFFFFFF,H'FFFFFFFE,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             FFFFFFFE00 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'FFFFFFFF,H'00000000,H'00000002,
             0000000000 +                       H'00000000,H'FFFFFFFF,H'00000002,H'00000002,H'FFFFFFFF,H'00000000,H'00000000,
             0001000000 +                       H'00000000,H'00000001,H'00000000,H'00000002,H'00000000,H'FFFFFFFF,H'00000000,
             00FFFFFFFE +                       H'FFFFFFFE,H'FFFFFFFF,H'00000000,H'00000001,H'00000000,H'00000002,H'00000000,
             FFFFFFFF00 +                       H'FFFFFFFF,H'00000000,H'FFFFFFFE,H'00000000,H'00000000,H'FFFFFFFF,H'00000001,
             0000010000 +                       H'00000000,H'FFFFFFFE,H'00000000,H'00000001,H'FFFFFFFE,H'FFFFFFFE,H'00000001,
             0002000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000002,H'00000000,
             FFFFFFFF00 +                       H'FFFFFFFF,H'00000000,H'00000002,H'00000001,H'FFFFFFFF,H'FFFFFFFE,H'00000000,
             000000FFFF +                       H'00000000,H'00000001,H'00000000,H'FFFFFFFE,H'00000000,H'00000001,H'FFFFFFFE,
             FFFE000000 +                       H'FFFFFFFE,H'00000001,H'00000000,H'00000000,H'00000000,H'00000001,H'00000000,
             0000000001 +                       H'00000002,H'00000000,H'FFFFFFFF,H'00000000,H'FFFFFFFE,H'00000001,H'00000000,




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  111


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000 +                       H'FFFFFFFE,H'00000000,H'00000001,H'00000000,H'FFFFFFFE,H'FFFFFFFF,H'00000001,
             0000020000 +                       H'00000002,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000001 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             FFFFFFFF00 +                       H'00000000,H'00000000,H'FFFFFFFF,H'00000000,H'FFFFFFFF,H'00000001,H'00000000,
             0000000000 +                       H'FFFFFFFE,H'FFFFFFFF,H'FFFFFFFE,H'00000000,H'00000000,H'00000000,H'00000001,
             0002000000 +                       H'00000001,H'00000001,H'FFFFFFFF,H'00000001,H'00000001,H'00000000,H'FFFFFFFF,
             00FFFFFFFF +                       H'00000000,H'00000001,H'00000000,H'00000001,H'00000001,H'00000000,H'FFFFFFFE,
             0000000200 +                       H'00000001,H'FFFFFFFE,H'00000000,H'00000000,H'00000001,H'00000000,H'00000001,
             000002FFFF +                       H'FFFFFFFF,H'00000000,H'00000002,H'00000001,H'00000002,H'00000000,H'00000000,
             FFFF000000 +                       H'00000000,H'00000000
             0000000000   
             0000000200   
             000000FFFF   
             FFFF000000   
             0000000002   
             00000001FF   
             FFFFFFFFFF   
             FFFE000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             FFFFFFFF00   
             0000000000   
             0002000000   
             00FFFFFFFF   
             0000000200   
             000002FFFF   
             FFFF000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0200000000   
             FFFFFFFF00   
             000000FFFF   
             FFFEFFFFFF   
             FF00000000   
             0000000100   
             0000000000   
             0002000000   
             00FFFFFFFF   
             00000000FF   
             FFFFFE0000   
             0000000000   
             00FFFFFFFF   
             0000000100   
             000000FFFF   
             FFFE000000   
             0000000001   
             FFFFFFFEFF   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  112


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             FFFFFE0000   
             0001000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000200   
             000000FFFF   
             FFFF000000   
             0000000002   
             00000001FF   
             FFFFFFFFFF   
             FFFE000000   
             0000000000   
             0000000100   
             000000FFFF   
             FFFE000000   
             0000000001   
             FFFFFFFEFF   
             FFFFFE0000   
             0001000000   
             0000000000   
             0000000000   
             0000010000   
             0000000000   
             0200000000   
             FFFFFFFF00   
             000000FFFF   
             FFFE000000   
             0100000000   
             FFFFFFFE00   
             0000000000   
             0001000000   
             00FFFFFFFE   
             FFFFFFFF00   
             0000010000   
             0002000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  113


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             FFFFFFFF00   
             000000FFFF   
             FFFF000000   
             0100000000   
             FFFFFFFEFF   
             FFFFFFFFFF   
             FFFE000000   
             0000000000   
             0000000000   
             0000010000   
             0001000000   
             01FFFFFFFF   
             0000000100   
             0000010000   
             0000FFFFFF   
             FF00000000   
             0000000100   
             0000000000   
             0001000000   
             0100000000   
             FFFFFFFE00   
             000001FFFF   
             FFFE000000   
             0000000000   
             0000000100   
             0000000000   
             0001FFFFFF   
             FF00000000   
             0000000200   
             0000010000   
             0002000000   
             0000000000   
             0000000000   
             000000       
    00000A60 0000000000             .DATA.L     H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000001,H'00000000,H'00000001,H'FFFFFFFF,H'00000000,H'00000002,
             0000000000 +                       H'00000001,H'00000002,H'00000000,H'00000000,H'00000001,H'00000000,H'00000001,
             0000000000 +                       H'00000002,H'00000001,H'00000001,H'00000000,H'00000002,H'00000000,H'00000001,
             0000000000 +                       H'00000000,H'FFFFFFFF,H'FFFFFFFF,H'FFFFFFFF,H'00000001,H'FFFFFFFF,H'FFFFFFFF,
             0000000000 +                       H'00000000,H'00000001,H'00000000,H'FFFFFFFF,H'00000000,H'FFFFFFFF,H'00000001,
             0000000000 +                       H'00000000,H'FFFFFFFE,H'FFFFFFFF,H'FFFFFFFE,H'00000000,H'00000000,H'00000000,
             0100000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             00000001FF +                       H'00000000,H'00000000,H'00000001,H'00000000,H'00000001,H'00000001,H'00000000,
             FFFFFF0000 +                       H'FFFFFFFE,H'00000001,H'FFFFFFFE,H'00000000,H'00000000,H'FFFFFFFF,H'00000000,
             0000000000 +                       H'FFFFFFFF,H'FFFFFFFF,H'00000000,H'00000002,H'FFFFFFFF,H'00000002,H'00000000,
             0200000001 +                       H'00000000,H'FFFFFFFF,H'00000000,H'FFFFFFFF,H'00000002,H'FFFFFFFF,H'00000001,
             0000000200 +                       H'00000000,H'00000002,H'00000000,H'00000001,H'FFFFFFFF,H'00000000,H'FFFFFFFF,
             0000000000 +                       H'FFFFFFFF,H'00000000,H'00000002,H'FFFFFFFF,H'00000002,H'00000000,H'00000000,
             0000000000 +                       H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,H'00000000,
             0100000000 +                       H'00000000,H'00000000,H'00000000
             0000000100   
             0000020000   
             0001000000   
             0100000000   
             0000000200   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  114


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0001000000   
             00FFFFFFFF   
             FFFFFFFFFF   
             FFFFFF0000   
             0001FFFFFF   
             FFFFFFFFFF   
             0000000000   
             0000010000   
             0000FFFFFF   
             FF00000000   
             FFFFFFFF00   
             0000010000   
             0000FFFFFF   
             FEFFFFFFFF   
             FFFFFFFE00   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0100000000   
             0000000100   
             0000010000   
             0000FFFFFF   
             FE00000001   
             FFFFFFFE00   
             0000000000   
             0000FFFFFF   
             FF00000000   
             FFFFFFFFFF   
             FFFFFF0000   
             0000000000   
             02FFFFFFFF   
             0000000200   
             0000000000   
             0000FFFFFF   
             FF00000000   
             FFFFFFFF00   
             000002FFFF   
             FFFF000000   
             0100000000   
             0000000200   
             0000000000   
             0001FFFFFF   
             FF00000000   
             FFFFFFFFFF   
             FFFFFF0000   
             0000000000   
             02FFFFFFFF   
             0000000200   
             0000000000   




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  115


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000000000   
             0000         
    00000C10              L499:
    00000C10 202F20                 .SDATA      " / "
    00000C13 00                     .DATA.B     H'00
    00000C14              L510:
    00000C14 3A                     .SDATA      ":"
    00000C15 00                     .DATA.B     H'00
    00000C16 00000002               .RES.W      1
    00000C18              L511:
    00000C18 30                     .SDATA      "0"
    00000C19 00                     .DATA.B     H'00
    00000C1A 00000002               .RES.W      1
    00000C1C              L512:
    00000C1C 2E                     .SDATA      "."
    00000C1D 00                     .DATA.B     H'00
    00000C1E              L518:
    00000C1E 4C4556454C             .SDATA      "LEVEL "
             20           
    00000C24 00                     .DATA.B     H'00
    00000C25 0000000D01             .DATAB.B    13,0
             00           
    00000C32              L533:
    00000C32 2B                     .SDATA      "+"
    00000C33 00                     .DATA.B     H'00
    00000C34 0000001201             .DATAB.B    18,0
             00           
    00000C46 00000002               .RES.W      1
    00000C48              L536:
    00000C48 53494E474C             .SDATA      "SINGLE"
             45           
    00000C4E 00                     .DATA.B     H'00
    00000C4F 00000001               .RES.B      1
    00000C50              L537:
    00000C50 444F55424C             .SDATA      "DOUBLE"
             45           
    00000C56 00                     .DATA.B     H'00
    00000C57 00000001               .RES.B      1
    00000C58              L538:
    00000C58 545249504C             .SDATA      "TRIPLE"
             45           
    00000C5E 00                     .DATA.B     H'00
    00000C5F 00000001               .RES.B      1
    00000C60              L539:
    00000C60 51554144               .SDATA      "QUAD"
    00000C64 00                     .DATA.B     H'00
    00000C65 00000001               .RES.B      1
    00000C66 00000002               .RES.W      1
    00000C68              L541:
    00000C68 4D54535049             .SDATA      "MTSPIN"




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  116


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

             4E           
    00000C6E 00                     .DATA.B     H'00
    00000C6F 00000001               .RES.B      1
    00000C70              L542:
    00000C70 545350494E             .SDATA      "TSPIN"
    00000C75 00                     .DATA.B     H'00
    00000C76 00000002               .RES.W      1
    00000C78              L544:
    00000C78 423242                 .SDATA      "B2B"
    00000C7B 00                     .DATA.B     H'00
    00000C7C              L547:
    00000C7C 20434D42               .SDATA      " CMB"
    00000C80 00                     .DATA.B     H'00
    00000C81 00000001               .RES.B      1
    00000C82 00000002               .RES.W      1
    00000C84              L549:
    00000C84 50462E434C             .SDATA      "PF.CLR"
             52           
    00000C8A 00                     .DATA.B     H'00
    00000C8B 00000001               .RES.B      1
    00000C8C              L676:
    00000C8C 53544F5050             .SDATA      "STOPPED"
             4544         
    00000C93 00                     .DATA.B     H'00
    00000C94              L677:
    00000C94 5072657373             .SDATA      "Press any key"
             20616E7920   
             6B6579       
    00000CA1 00                     .DATA.B     H'00
    00000CA2 00000002               .RES.W      1
    00000CA4              L738:
    00000CA4 544F50204F             .SDATA      "TOP OUT"
             5554         
    00000CAB 00                     .DATA.B     H'00
    00000CAC              L740:
    00000CAC 53636F7265             .SDATA      "Score: "
             3A20         
    00000CB3 00                     .DATA.B     H'00
    00000CB4              L741:
    00000CB4 5072657373             .SDATA      "Press EXE"
             20455845     
    00000CBD 00                     .DATA.B     H'00
    00000CBE 00000002               .RES.W      1
    00000CC0              L752:
    00000CC0 434F4D504C             .SDATA      "COMPLETE"
             455445       
    00000CC8 00                     .DATA.B     H'00
    00000CC9 00000001               .RES.B      1
    00000CCA 00000002               .RES.W      1
    00000CCC              L753:
    00000CCC 54696D653A             .SDATA      "Time: "
             20           
    00000CD2 00                     .DATA.B     H'00
    00000CD3 00000001               .RES.B      1
    00000CD4              L759:
    00000CD4 5445545249             .SDATA      "TETRIS"
             53           




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  117


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000CDA 00                     .DATA.B     H'00
    00000CDB 00000001               .RES.B      1
    00000CDC              L760:
    00000CDC 313A20456E             .SDATA      "1: Endless"
             646C657373   
    00000CE6 00                     .DATA.B     H'00
    00000CE7 00000001               .RES.B      1
    00000CE8              L761:
    00000CE8 323A203430             .SDATA      "2: 40L Sprint"
             4C20537072   
             696E74       
    00000CF5 00                     .DATA.B     H'00
    00000CF6 00000002               .RES.W      1
    00000CF8              L762:
    00000CF8 333A20326D             .SDATA      "3: 2min Ultra"
             696E20556C   
             747261       
    00000D05 00                     .DATA.B     H'00
    00000D06 00000002               .RES.W      1
    00000D08              L780:
    00000D08 486F6C643A             .SDATA      "Hold: 9"
             2039         
    00000D0F 00                     .DATA.B     H'00
    00000D10              L781:
    00000D10 536F66742F             .SDATA      "Soft/Hard drop:"
             4861726420   
             64726F703A   
    00000D1F 00                     .DATA.B     H'00
    00000D20              L782:
    00000D20 2020446F77             .SDATA      "  Down/5"
             6E2F35       
    00000D28 00                     .DATA.B     H'00
    00000D29 00000001               .RES.B      1
    00000D2A 00000002               .RES.W      1
    00000D2C              L783:
    00000D2C 526F746174             .SDATA      "Rotate 180/CW/ACW:"
             6520313830   
             2F43572F41   
             43573A       
    00000D3E 00                     .DATA.B     H'00
    00000D3F 00000001               .RES.B      1
    00000D40              L784:
    00000D40 2020342F37             .SDATA      "  4/7/8"
             2F38         
    00000D47 00                     .DATA.B     H'00
    00000D48              L785:
    00000D48 4558452074             .SDATA      "EXE to start"
             6F20737461   
             7274         
    00000D54 00                     .DATA.B     H'00
    00000D55 00000001               .RES.B      1
    00000D56 00000002               .RES.W      1
    00000D58              L792:
    00000D58 484F4C44               .SDATA      "HOLD"
    00000D5C 00                     .DATA.B     H'00
    00000D5D 00000001               .RES.B      1
    00000D5E 00000002               .RES.W      1




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  118


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000D60              L793:
    00000D60 4E455854               .SDATA      "NEXT"
    00000D64 00                     .DATA.B     H'00
    00000D65 00000001               .RES.B      1
    00000D66 00000002               .RES.W      1
    00000D68              L795:
    00000D68 53434F5245             .SDATA      "SCORE"
    00000D6D 00                     .DATA.B     H'00
    00000D6E 00000002               .RES.W      1
    00000D70              L796:
    00000D70 4C494E4553             .SDATA      "LINES"
    00000D75 00                     .DATA.B     H'00
    00000D76 00000002               .RES.W      1
    00000D78              L797:
    00000D78 54494D45               .SDATA      "TIME"
    00000D7C 00                     .DATA.B     H'00
D   00000000              _ax:                             ; static: ax
    00000000 00000003               .DATA.L     H'00000003
    00000004              _ay:                             ; static: ay
    00000004 00000012               .DATA.L     H'00000012
    00000008              _aPiece:                         ; static: aPiece
    00000008 00000000               .DATA.L     H'00000000
    0000000C              _aState:                         ; static: aState
    0000000C 00000000               .DATA.L     H'00000000
    00000010              _holdPiece:                      ; static: holdPiece
    00000010 FFFFFFFF               .DATA.L     H'FFFFFFFF
    00000014              _usedHold:                       ; static: usedHold
    00000014 00000000               .DATA.L     H'00000000
    00000018              _moveInputFrames:                ; static: moveInputFrames
    00000018 00000000               .DATA.L     H'00000000
    0000001C              _currentMoveDir:                 ; static: currentMoveDir
    0000001C 00000000               .DATA.L     H'00000000
    00000020              _holdingRotateCW:                ; static: holdingRotateCW
    00000020 00000000               .DATA.L     H'00000000
    00000024              _holdingRotateACW:               ; static: holdingRotateACW
    00000024 00000000               .DATA.L     H'00000000
    00000028              _holdingRotate180:               ; static: holdingRotate180
    00000028 00000000               .DATA.L     H'00000000
    0000002C              _holdingHold:                    ; static: holdingHold
    0000002C 00000000               .DATA.L     H'00000000
    00000030              _holdingHardDrop:                ; static: holdingHardDrop
    00000030 00000000               .DATA.L     H'00000000
    00000034              _rotatedBefore:                  ; static: rotatedBefore
    00000034 00000000               .DATA.L     H'00000000
    00000038              _isB2B:                          ; static: isB2B
    00000038 00000000               .DATA.L     H'00000000
    0000003C              _combo:                          ; static: combo
    0000003C 00000000               .DATA.L     H'00000000
    00000040              _gravityCounter:                 ; static: gravityCounter
    00000040 00000000               .DATA.L     H'00000000
    00000044              _lockDelayCounter:               ; static: lockDelayCounter
    00000044 00000000               .DATA.L     H'00000000
    00000048              _forceLockCounter:               ; static: forceLockCounter
    00000048 00000000               .DATA.L     H'00000000
    0000004C              _score:                          ; static: score
    0000004C 00000000               .DATA.L     H'00000000
    00000050              _linesTotal:                     ; static: linesTotal




SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE  119


SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

    00000050 00000000               .DATA.L     H'00000000
    00000054              _framesPassed:                   ; static: framesPassed
    00000054 00000001               .DATA.L     H'00000001
    00000058              _level:                          ; static: level
    00000058 00000001               .DATA.L     H'00000001
    0000005C              _board:                          ; static: board
    0000005C 00000000               .DATA.L     H'00000000
    00000060 0000063C01             .DATAB.B    1596,0
             00           
    0000069C              _nextQueue:                      ; static: nextQueue
    0000069C 00000000               .DATA.L     H'00000000
    000006A0 0000001001             .DATAB.B    16,0
             00           
    000006B0              _bag:                            ; static: bag
    000006B0 0000000000             .DATA.L     H'00000000,H'00000001,H'00000002,H'00000003,H'00000004,H'00000005,H'00000006
             0000010000   
             0002000000   
             0300000004   
             0000000500   
             000006       
    000006CC              _bagSize:                        ; static: bagSize
    000006CC 00000007               .DATA.L     H'00000007
    000006D0              _isGameActive:                   ; static: isGameActive
    000006D0 00000001               .DATA.L     H'00000001
    000006D4              _isAtMenu:                       ; static: isAtMenu
    000006D4 00000000               .DATA.L     H'00000000
    000006D8              _gameMode:                       ; static: gameMode
    000006D8 00000000               .DATA.L     H'00000000
    000006DC              _rSeed:                          ; static: rSeed
    000006DC 00003039               .DATA.L     H'00003039
B_B 00000000              _BR_Size:                        ; static: BR_Size
    00000000 00000004               .RES.L      1





























SH SERIES C/C++ Compiler (Ver. 6.0C)                                                                 07-Sep-2024 12:17:58  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:        48




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:     1667



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                               00001FD8 Byte(s)
PROGRAM  SECTION (P_BR_Size):                       00000000 Byte(s)
PROGRAM  SECTION (P_TOP):                           0000000C Byte(s)
CONSTANT SECTION (C):                               00000D7D Byte(s)
CONSTANT SECTION (C_BR_Size):                       00000000 Byte(s)
CONSTANT SECTION (C_TOP):                           00000000 Byte(s)
DATA     SECTION (D):                               000006E0 Byte(s)
DATA     SECTION (D_BR_Size):                       00000000 Byte(s)
DATA     SECTION (D_TOP):                           00000000 Byte(s)
BSS      SECTION (B):                               00000000 Byte(s)
BSS      SECTION (B_BR_Size):                       00000004 Byte(s)
BSS      SECTION (B_TOP):                           00000000 Byte(s)

 TOTAL PROGRAM SIZE: 00003445 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:           27
NUMBER OF EXTERNAL DEFINITION SYMBOLS:          78
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:           425






















*** COMMAND PARAMETER ***


  -subcommand=C:\Users\hojooni\AppData\Local\Temp\hmk5C21.tmp 

