/*****************************************************************/
/*                                                               */
/*   CASIO fx-9860G SDK Library                                  */
/*                                                               */
/*   File name : [ProjectName].c                                 */
/*                                                               */
/*   Copyright (c) 2006 CASIO COMPUTER CO., LTD.                 */
/*                                                               */
/*****************************************************************/

// thanks random internet user

#define __KEYBIOS_H__

#include "fxlib.h"
#include "timer.h"

#define KEY_CHAR_0 71
#define KEY_CHAR_1 72
#define KEY_CHAR_2 62
#define KEY_CHAR_3 52
#define KEY_CHAR_4 73
#define KEY_CHAR_5 63
#define KEY_CHAR_6 53
#define KEY_CHAR_7 74
#define KEY_CHAR_8 64
#define KEY_CHAR_9 54
#define KEY_CHAR_DP 61
#define KEY_CHAR_EXP 51
#define KEY_CHAR_PMINUS 41
#define KEY_CHAR_PLUS 42
#define KEY_CHAR_MINUS 32
#define KEY_CHAR_MULT 43
#define KEY_CHAR_DIV 33
#define KEY_CHAR_FRAC 75
#define KEY_CHAR_LPAR 55
#define KEY_CHAR_RPAR 45
#define KEY_CHAR_COMMA 35
#define KEY_CHAR_STORE 25
#define KEY_CHAR_LOG 66
#define KEY_CHAR_LN 56
#define KEY_CHAR_SIN 46
#define KEY_CHAR_COS 36
#define KEY_CHAR_TAN 26
#define KEY_CHAR_SQUARE 67
#define KEY_CHAR_POW 57
#define KEY_CTRL_EXE 31
#define KEY_CTRL_DEL 44
#define KEY_CTRL_AC 32
#define KEY_CTRL_FD 65
#define KEY_CTRL_EXIT 47
#define KEY_CTRL_SHIFT 78
#define KEY_CTRL_ALPHA 77
#define KEY_CTRL_OPTN 68
#define KEY_CTRL_VARS 58
#define KEY_CTRL_UP 28
#define KEY_CTRL_DOWN 37
#define KEY_CTRL_LEFT 38
#define KEY_CTRL_RIGHT 27
#define KEY_CTRL_F1 79
#define KEY_CTRL_F2 69
#define KEY_CTRL_F3 59
#define KEY_CTRL_F4 49
#define KEY_CTRL_F5 39
#define KEY_CTRL_F6 29
#define KEY_CTRL_MENU 48
#ifndef OS2Change
#define OS2Change
#ifndef OS2Change_GetOS2
#define OS2Change_GetOS2
typedef int(*sc_i2cp2sip)(char*, char*, short int*, short int*);
const unsigned int sc0015[] = { 0xD201D002, 0x422B0009, 0x80010070, 0x0015 };
#define GlibGetOSVersionInfo (*(sc_i2cp2sip)sc0015)
int OSVersionAsInt(void)
{
char mainversion;
char minorversion;
short release;
short build;
GlibGetOSVersionInfo( &mainversion, &minorversion, &release, &build );
return ( ( mainversion << 24 ) & 0xFF000000 ) | ( ( minorversion << 16 ) & 0x00FF0000 ) | ( release & 0x0000FFFF );
}
#define isOS2 (OSVersionAsInt() >= 0x02020000)
#define OS2(x,y) ((OSVersionAsInt() >= 0x02020000)?y:x)
#endif
#ifndef OS2Change_Keyboard
#define OS2Change_Keyboard
void delay(void)
{
char i;
for (i=0; i<5; i++){};
}
unsigned char CheckKeyRow(unsigned char code)
{
unsigned char result=0;
short*PORTB_CTRL=(void*)0xA4000102;
short*PORTM_CTRL=(void*)0xA4000118;
char*PORTB=(void*)0xA4000122;
char*PORTM=(void*)0xA4000138;
char*PORTA=(void*)0xA4000120;
short smask;
char cmask;
unsigned char column, row;
column = code>>4;
row = code &0x0F;
smask = 0x0003 << (( row %8)*2);
cmask = ~( 1 << ( row %8) );
if(row <8)
{
  *PORTB_CTRL = 0xAAAA ^ smask;
  *PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
  delay();
  *PORTB = cmask;
  *PORTM = (*PORTM & 0xF0 ) | 0x0F;
}
else
{
  *PORTB_CTRL = 0xAAAA;
  *PORTM_CTRL = ((*PORTM_CTRL & 0xFF00 ) | 0x00AA)  ^ smask;
  delay();
  *PORTB = 0xFF;
  *PORTM = (*PORTM & 0xF0 ) | cmask;
}

delay();
result = (~(*PORTA))>>column & 1;
delay();
*PORTB_CTRL = 0xAAAA;
*PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x00AA;
delay();
*PORTB_CTRL = 0x5555;
*PORTM_CTRL = (*PORTM_CTRL & 0xFF00 ) | 0x0055;
delay();

return result;
}

unsigned char KeyDown(unsigned char keycode)
{
unsigned short key[8];
const unsigned short* keyboardregister = (unsigned short*)0xA44B0000;
if(isOS2)
{
  unsigned char row = keycode%10;
  memcpy(key, keyboardregister, sizeof(unsigned short) << 3);
 
  return (0 != (key[row >> 1] & 1 << keycode / 10 - 1 + ((row & 1) << 3)));
}
else
{
  return CheckKeyRow((keycode % 10) + ((keycode / 10 - 1) << 4));
}
}
unsigned char GetKeyMod(unsigned int *key)
{
unsigned char x, ret;

ret = GetKey(key);

for(x = 0; x < 80; x++)
{
  if(KeyDown(x))
  {
   *key = x;
   break;
  }
}
return ret;
}
#endif
#endif

//****************************************************************************
//  AddIn_main (Sample program main function)
//
//  param   :   isAppli   : 1 = This application is launched by MAIN MENU.
//                        : 0 = This application is launched by a strip in
//                              eACT application.
//
//              OptionNum : Strip number (0~3)
//                         (This parameter is only used when isAppli parameter is 0.)
//
//  retval  :   1 = No error / 0 = Error
//
//****************************************************************************

#define FPS 20

#define I_PIECE 0
#define J_PIECE 1
#define L_PIECE 2
#define O_PIECE 3
#define S_PIECE 4
#define T_PIECE 5
#define Z_PIECE 6

#define MARATHON_MODE 1
#define SPRINT_MODE 2
#define ULTRA_MODE 3

#define SPAWN_X 3
#define SPAWN_Y 18

// 7 pieces, each with 4 rotation states, each occupying a 4*4 space
// Looks not like the SRS table but trust me it works
// TODO: Fix table - flip across Y axis and transpose
const unsigned int rotationTable[7][4][4][4] = {
    {  // I piece
        { // State 0
        {0,0,1,0},
        {0,0,1,0},
        {0,0,1,0},
        {0,0,1,0}
        },
        { // State 1
        {0,0,0,0},
        {0,0,0,0},
        {1,1,1,1},
        {0,0,0,0}
        },
        { // State 2
        {0,1,0,0},
        {0,1,0,0},
        {0,1,0,0},
        {0,1,0,0}
        },
        { // State 3
        {0,0,0,0},
        {1,1,1,1},
        {0,0,0,0},
        {0,0,0,0}
        }
    },    
    {  // J piece
        { // State 0
        {0,0,1,1},
        {0,0,1,0},
        {0,0,1,0},
        {0,0,0,0}
        },
        { // State 1
        {0,0,0,0},
        {0,1,1,1},
        {0,0,0,1},
        {0,0,0,0}
        },
        { // State 2
        {0,0,1,0},
        {0,0,1,0},
        {0,1,1,0},
        {0,0,0,0}
        },
        { // State 3
        {0,1,0,0},
        {0,1,1,1},
        {0,0,0,0},
        {0,0,0,0}
        }
    },    
    {  // L piece
        { // State 0
        {0,0,1,0},
        {0,0,1,0},
        {0,0,1,1},
        {0,0,0,0}
        },
        { // State 1
        {0,0,0,0},
        {0,1,1,1},
        {0,1,0,0},
        {0,0,0,0}
        },
        { // State 2
        {0,1,1,0},
        {0,0,1,0},
        {0,0,1,0},
        {0,0,0,0}
        },
        { // State 3
        {0,0,0,1},
        {0,1,1,1},
        {0,0,0,0},
        {0,0,0,0}
        }
    },    
    {  // O piece
        { // State 0
        {0,0,0,0},
        {0,0,1,1},
        {0,0,1,1},
        {0,0,0,0}
        },
        { // State 1
        {0,0,0,0},
        {0,0,1,1},
        {0,0,1,1},
        {0,0,0,0}
        },
        { // State 2
        {0,0,0,0},
        {0,0,1,1},
        {0,0,1,1},
        {0,0,0,0}
        },
        { // State 3
        {0,0,0,0},
        {0,0,1,1},
        {0,0,1,1},
        {0,0,0,0}
        }
    },    
    {  // S piece
        { // State 0
        {0,0,1,0},
        {0,0,1,1},
        {0,0,0,1},
        {0,0,0,0}
        },
        { // State 1
        {0,0,0,0},
        {0,0,1,1},
        {0,1,1,0},
        {0,0,0,0}
        },
        { // State 2
        {0,1,0,0},
        {0,1,1,0},
        {0,0,1,0},
        {0,0,0,0}
        },
        { // State 3
        {0,0,1,1},
        {0,1,1,0},
        {0,0,0,0},
        {0,0,0,0}
        }
    },    
    {  // T piece
        { // State 0
        {0,0,1,0},
        {0,0,1,1},
        {0,0,1,0},
        {0,0,0,0}
        },
        { // State 1
        {0,0,0,0},
        {0,1,1,1},
        {0,0,1,0},
        {0,0,0,0}
        },
        { // State 2
        {0,0,1,0},
        {0,1,1,0},
        {0,0,1,0},
        {0,0,0,0}
        },
        { // State 3
        {0,0,1,0},
        {0,1,1,1},
        {0,0,0,0},
        {0,0,0,0}
        }
    },    
    {  // Z piece
        { // State 0
        {0,0,0,1},
        {0,0,1,1},
        {0,0,1,0},
        {0,0,0,0}
        },
        { // State 1
        {0,0,0,0},
        {0,1,1,0},
        {0,0,1,1},
        {0,0,0,0}
        },
        { // State 2
        {0,0,1,0},
        {0,1,1,0},
        {0,1,0,0},
        {0,0,0,0}
        },
        { // State 3
        {0,1,1,0},
        {0,0,1,1},
        {0,0,0,0},
        {0,0,0,0}
        }
    }
};

// Global variable moment

// Measured in frames (50ms)
const int DAS = 3;
int ax = SPAWN_X;
int ay = SPAWN_Y;
int aPiece = 0;
int aState = 0;

int moveInputFrames = 0;
int currentMoveDir = 0;  // -1, 0, 1 each mean left, none, right

int holdingRotateCW = 0;
int holdingRotateACW = 0;
int holdingRotate180 = 0;

float gravityCounter = 0.0f;
int level = 1;

int board[10][40] = { 0 };

int isGameActive = 1;

// powf() doesn't work
float powFI(float f, unsigned int i) {
    float r = 1.0f;
    int j = 0;
    for(; j<i; ++j) r *= f;
    return r;
}

unsigned int rSeed = 12345;
int randInt(int min, int max) {
    int randomNum;
    // LCG parameters from Numerical Recipes
    rSeed = 1664525 * rSeed + 1013904223;
    
    // Generate a random number between min and max (inclusive)
    randomNum = (rSeed % (max - min + 1)) + min;
    return randomNum;
}

// Only visual, does not change board data
void drawCell(int x, int y) {
    const int blX = 49+3*x;  // meaning "X of bottom left corner"
    const int blY = 62-3*y;
    Bdisp_DrawLineVRAM(blX,blY,blX,blY-2);
    Bdisp_DrawLineVRAM(blX+1,blY,blX+1,blY-2);
    Bdisp_DrawLineVRAM(blX+2,blY,blX+2,blY-2);
}

// Only visual, does not change board data
void clearCell(int x, int y) {
    const int blX = 49+3*x;
    const int blY = 62-3*y;
    Bdisp_ClearLineVRAM(blX,blY,blX,blY-2);
    Bdisp_ClearLineVRAM(blX+1,blY,blX+1,blY-2);
    Bdisp_ClearLineVRAM(blX+2,blY,blX+2,blY-2);
}

void drawPiece(int x, int y, int pieceType, int state) {
    int i = 0;
    int j = 0;
    for(i = 0; i<4; ++i) {
        for(j = 0; j<4; ++j) {
            if(rotationTable[pieceType][state][i][j]) {
                drawCell(x+i, y+j);
            }
        }
    }
}

void clearPiece(int x, int y, int pieceType, int state) {
    int i = 0;
    int j = 0;
    for(i = 0; i<4; ++i) {
        for(j = 0; j<4; ++j) {
            if(rotationTable[pieceType][state][i][j]) {
                clearCell(x+i, y+j);
            }
        }
    }
}

// Only visual, does not change board data
void movePiece(int x, int y, int dx, int dy, int pieceType, int state) {
    clearPiece(x, y, pieceType, state);
    drawPiece(x+dx, y+dy, pieceType, state);
}

// Only visual, does not change board data
void rotatePiece(int x, int y, int pieceType, int state, int newState) {
    clearPiece(x, y, pieceType, state);
    drawPiece(x, y, pieceType, newState);
}

int getCell(int x, int y) {
     return x<0 || x>9 || y<0 || y>39 || board[x][y];
}

int pieceFits(int x, int y, int pieceType, int state) {
    int i = 0;
    int j = 0;
    for(i = 0; i<4; ++i) {
        for(j = 0; j<4; ++j) {
            if(rotationTable[pieceType][state][i][j]) {
                if(getCell(x+i, y+j)) return 0;
            }
        }
    }
    return 1;
}

// Only modifies board data, not visuals
void setPiece(int x, int y, int pieceType, int state) {
    int i = 0;
    int j = 0;
    for(i = 0; i<4; ++i) {
        for(j = 0; j<4; ++j) {
            if(rotationTable[pieceType][state][i][j]) {
                board[x+i][y+j] = 1;
            }
        }
    }
}

// Clears lines, redraws board
void updateBoard() {
    int i = 0;
    int j = 0;
    int k = 0;
    int rowFull = 0;
    
    // Clear rows loop
    for(j = 0; j<40; ++j) {
        rowFull = 1;
        for(i = 0; i<10; ++i) {
            // Not using getCell() because unneeded out of bounds check
            if(!board[i][j]) {
                rowFull = 0;
                break;
            }
        }
        if(rowFull) {
            // Shift rows down
            for(k = j; k<39; ++k) {
                for(i = 0; i<10; ++i) {
                    board[i][k] = board[i][k+1];
                }
            }
            // Empty top row
            for(k = 0; k<10; ++k) {
                board[k][39] = 0;
            }
            --j;
        }
    }
    
    // Redraw board loop
    for(i = 0; i<10; ++i) {
        for(j = 0; j<40; ++j) {
            if(board[i][j]) {
                drawCell(i,j);
            }
            else {
                clearCell(i,j);
            }
        }
    }
}

// Main game logic
// 20 FPS as of now
// Controls:
//   Left, Right: Movement
//   Down: Soft drop
//   Up: Hold
//   7, 8: Rotate ACW/CW
//   5: Hard drop
//   4: Rotate 180
int frame() {
    int key = 0;
    if(KeyDown(KEY_CTRL_MENU)) {
        KillTimer(ID_USER_TIMER1);
        isGameActive = 0;
        return 1;
    }
    isGameActive = 1;
    
    SetTimer(ID_USER_TIMER1, 1000/FPS, frame);
    
    if(KeyDown(KEY_CTRL_LEFT)) {
        switch(currentMoveDir) {
            case -1:
                ++moveInputFrames;
                break;
            default:
                moveInputFrames = 1;
                currentMoveDir = -1;
        }
    }
    else if(KeyDown(KEY_CTRL_RIGHT)) {
        switch(currentMoveDir) {
            case 1:
                ++moveInputFrames;
                break;
            default:
                moveInputFrames = 1;
                currentMoveDir = 1;
        }
    }
    else {
        moveInputFrames = 0;
        currentMoveDir = 0;
    }
    if((moveInputFrames == 1 || moveInputFrames > DAS+1)
        && pieceFits(ax+currentMoveDir, ay, aPiece, aState)) {
        movePiece(ax, ay, currentMoveDir, 0, aPiece, aState);
        ax += currentMoveDir;
    }

    if(KeyDown(KEY_CHAR_8)) {
        if(!holdingRotateCW) {
            int newState = (aState+1)%4;
            holdingRotateCW = 1;
            if(pieceFits(ax, ay, aPiece, newState)) {
                clearPiece(ax, ay, aPiece, aState);
                drawPiece(ax, ay, aPiece, newState);
                rotatePiece(ax, ay, aPiece, aState, newState);
                aState = newState;
            }
        }
    }
    else {
        holdingRotateCW = 0;
    }
    if(KeyDown(KEY_CHAR_7)) {
        if(!holdingRotateACW) {
            int newState = (aState+3)%4;
            holdingRotateACW = 1;
            if(pieceFits(ax, ay, aPiece, newState)) {
                clearPiece(ax, ay, aPiece, aState);
                drawPiece(ax, ay, aPiece, newState);
                rotatePiece(ax, ay, aPiece, aState, newState);
                aState = newState;
            }
        }
    }
    else {
        holdingRotateACW = 0;
    }
    if(KeyDown(KEY_CHAR_6)) {
        if(!holdingRotate180) {
            int newState = (aState+2)%4;
            holdingRotate180 = 1;
            if(pieceFits(ax, ay, aPiece, newState)) {
                clearPiece(ax, ay, aPiece, aState);
                drawPiece(ax, ay, aPiece, newState);
                rotatePiece(ax, ay, aPiece, aState, newState);
                aState = newState;
            }
        }
    }
    else {
        holdingRotate180 = 0;
    }
    
    gravityCounter += 1.0f / ((float)FPS) /
        powFI( (0.8f-((level-1)*0.007f)),(level-1) );
    if(gravityCounter >=1 && !pieceFits(ax,ay-1,aPiece,aState)) {
        // Spawn new piece
        setPiece(ax, ay, aPiece, aState);
        ax = SPAWN_X;
        ay = SPAWN_Y;
        aPiece = randInt(0,6);
        aState = 0;
        updateBoard();

        if(pieceFits(ax,ay,aPiece,aState)) {
            drawPiece(ax, ay, aPiece, aState);
        }
        else {
            // Top out
            KillTimer(ID_USER_TIMER1);
            while(!KeyDown(KEY_CTRL_EXE) && !KeyDown(KEY_CTRL_MENU)) {
                ++rSeed; // At this point this is just "do nothing" lol
            }
            startGame();
            return 1;
        }

        drawPiece(ax, ay, aPiece, aState);
        gravityCounter = 0;
    }
    else {
        while(gravityCounter >= 1.0f && pieceFits(ax,ay-1,aPiece,aState)) {
            movePiece(ax, ay, 0, -1, aPiece, aState);
            --ay;
            gravityCounter -= 1.0f;
        }
    }
    
    Bdisp_PutDisp_DD();
    return 1;
}

void mainMenu() {
    int key = 0;

    Bdisp_AllClr_DDVRAM();
    locate(3,2);
    Print("TETRIS");
    locate(3,4);
    Print("1: Marathon");
    locate(3,5);
    Print("2: 40L Sprint");
    locate(3,6);
    Print("3: 2min Ultra");
    Bdisp_PutDisp_DD();

    while(1) {
        GetKeyMod(&key);
        if(key == KEY_CHAR_1) {
            level = 1;
            startGame(MARATHON_MODE);
            return;
        }
        else if(key == KEY_CHAR_2) {
            level = 1;
            startGame(SPRINT_MODE);
            return;
        }
        else if(key == KEY_CHAR_3) {
            level = 1;
            startGame(ULTRA_MODE);
            return;
        }
    }
}

// Idk why but compiler is unhappy with void return
int startGame(int mode) {

    int i = 0;
    int j = 0;
    int menuPressed = 0;

    Bdisp_AllClr_DDVRAM();

    while(KeyDown(KEY_CTRL_EXE)) {
        ++rSeed;
    }

    locate(3,2);
    //Print("Hold: Up");
    locate(3,3);
    //Print("Soft/Hard drop:");
    locate(3,4);
    //Print("  Down/5");
    locate(3,5);
    Print("Rotate 180/CW/ACW:");
    locate(3,6);
    Print("  4/7/8");
    locate(3,7);
    Print("EXE to start");

    Bdisp_PutDisp_DD();

    //char str[800];
    //int k = 0;
    
    
    //GetKey(&k);
    //k = 3;
    //sprintf(str,"%d", k);
    //locate(1,4);
    //Print((unsigned char*)str);

    ax = SPAWN_X;
    ay = SPAWN_Y;
    aPiece = randInt(0,6);
    aState = 0;

    moveInputFrames = 0;
    currentMoveDir = 0;  // -1, 0, 1 each mean left, none, right

    holdingRotateCW = 0;
    holdingRotateACW = 0;
    holdingRotate180 = 0;

    gravityCounter = 0.0f;
    level = 7;

    isGameActive = 1;

    for(i=0; i<10; ++i) {
        for(j=0; j<40; ++j) {
            board[i][j] = 0;
        }
    }
   
    do {
        ++rSeed;
        menuPressed = KeyDown(KEY_CTRL_MENU);
    } while(!KeyDown(KEY_CTRL_EXE) && !menuPressed);
    
    if(menuPressed) {
        isGameActive = 0;
        return 1;
    }
      
    Bdisp_AllClr_DDVRAM();

    // draw the walls of the board
    Bdisp_DrawLineVRAM(48, 0,  48, 63);
    Bdisp_DrawLineVRAM(79, 0,  79, 63);
    Bdisp_DrawLineVRAM(48, 63, 79, 63);

    drawPiece(SPAWN_X, SPAWN_Y, aPiece, aState);
    Bdisp_PutDisp_DD();
    frame();
    
    return 1;
}

int AddIn_main(int isAppli, unsigned short OptionNum)
{
    unsigned int key = 0;

    mainMenu();

    while(1){
        GetKeyMod(&key);
        if(!isGameActive && KeyDown(KEY_CTRL_EXE)) {
            isGameActive = 1;
            mainMenu();
        }
    }

    return 1;
}

//****************************************************************************
//**************                                              ****************
//**************                 Notice!                      ****************
//**************                                              ****************
//**************  Please do not change the following source.  ****************
//**************                                              ****************
//****************************************************************************


#pragma section _BR_Size
unsigned long BR_Size;
#pragma section


#pragma section _TOP

//****************************************************************************
//  InitializeSystem
//
//  param   :   isAppli   : 1 = Application / 0 = eActivity
//              OptionNum : Option Number (only eActivity)
//
//  retval  :   1 = No error / 0 = Error
//
//****************************************************************************
int InitializeSystem(int isAppli, unsigned short OptionNum)
{
    return INIT_ADDIN_APPLICATION(isAppli, OptionNum);
}

#pragma section

